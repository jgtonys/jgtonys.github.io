<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jungyu Kim</title>
 <link href="jgtonys.github.io/atom.xml" rel="self"/>
 <link href="jgtonys.github.io/"/>
 <updated>2019-08-13T05:17:48-05:00</updated>
 <id>jgtonys.github.io</id>
 <author>
   <name>Jungyu Kim</name>
   <email></email>
 </author>

 
 <entry>
   <title>Docker 이미지 만들기 & 배포하기</title>
   <link href="jgtonys.github.io/blog/2019/08/13/docker-image-upload/"/>
   <updated>2019-08-13T00:00:00-05:00</updated>
   <id>jgtonys.github.io/blog/2019/08/13/docker-image-upload</id>
   <content type="html">&lt;p&gt;필자는 깃헙 블로그 jekyll 환경을 docker 로 작업하고 있다. 한가지 번거러운 점이 있다면, 매번 이 jekyll 컨테이너를 열고 특정 플러그인을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install metainspector&lt;/code&gt; 를 해 주어야 하는 것이다. 만약 이 패키지까지 설치되어 있는 이미지를 만들어서 배포하면, 어디서든 나만을 위한 docker image 를 불러올 수 있을 것이다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://jgtonys.github.io/blog/2019/04/25/docker-jekyll/&quot;&gt;지난번 포스트&lt;/a&gt; 에서는 docker 를 실행하고 작업하는 일련의 과정을 나타내었다. 이번에도 환경은 정확하게 동일하나, image 를 만드는 과정을 소개한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:43:56%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dockerfile-만들기&quot;&gt;Dockerfile 만들기&lt;/h2&gt;

&lt;p&gt;Dokcerfile 은 기존의 docker 이미지로부터 새로운 이미지를 만들 때, 설명서의 역할을 해주는 파일이다. 나만의 이미지를 만들고 싶다면 반드시 만들어야 하는 파일이다. &lt;em&gt;Dockerfile 은 따로 확장자가 존재하지 않는다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;간단한 문법은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; : 어떤 base 컨테이너로부터 만들어 지는 이미지인지 기술한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; : bash 쉘에서 입력하는것과 동일한 명령어를 기술한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; : 호스트의 파일 시스템으로부터 파일을 가져와서 이미지에 더한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필자는 이 명령어들을 가지고 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 을 생성했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jekyll/jekyll
RUN gem install metainspector
RUN echo &quot;Welcome to jgtony's blog compiler&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-이미지-빌드&quot;&gt;Docker 이미지 빌드&lt;/h2&gt;

&lt;p&gt;이제 앞서 만들어진 Dockerfile 을 가지고 나만의 이미지를 만들 시간이다. Dockerfile 이 있는 경로로 이동해서 다음과 같이 명령어를 치자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t githubjekyll:0.0 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 githubjekyll 는 이미지의 이름이며 0.0 은 버전 태그가 된다. 또한 맨 마지막의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 은 현재 있는 폴더의 Dockerfile 을 사용하겠다는 뜻이다.&lt;/p&gt;

&lt;p&gt;이렇게 빌드가 끝나게 되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; 를 통해 확인해보자.&lt;/p&gt;

&lt;p&gt;새롭게 githubjekyll 이미지가 생성된 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;docker-이미지-배포&quot;&gt;Docker 이미지 배포&lt;/h2&gt;

&lt;p&gt;이렇게 만들어진 githubjekyll 은 로컬에만 존재해 있다. 다른 PC로 이동해서 docker 이미지를 검색해도 나오지 않는 이미지이다. 따라서 이 이미지를 &lt;strong&gt;배포&lt;/strong&gt; 하려 한다.&lt;/p&gt;

&lt;p&gt;먼저 https://hub.docker.com/ 사이트로 이동한다&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://hub.docker.com')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Docker Hub&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://hub.docker.com&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://user-images.githubusercontent.com/33674947/56810708-ef7c3a80-6871-11e9-8285-f196baa95c99.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;로그인을 하고 Repositories 로 이동하면 나의 REPOSITORY 를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:44:48%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Repository 를 클릭한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:48:02%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이름과 설명을 작성하고 Create 를 누른다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 커맨드 창으로 돌아와서 기존에 만든 githubjekyll 이미지를 github_jekyll repository 에 배포해보자.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker login&lt;/code&gt; 을 통해 docker hub 에 로그인해주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag githubjekyll:0.0 jgtony/github_jekyll:0.0&lt;/code&gt; 으로 태그를 달고 이미지를 생성해주자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:51:21%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:51:38%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 완료가 되었다면 이제 docker hub 에 배포해보자! 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker push jgtony/github_jekyll:0.0&lt;/code&gt; 이다. 완료 후 페이지에 가서 확인하면 다음과 같이 올라와 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jgtonys/upload_test/blob/master/screenshot-Tue%20Aug%2013%202019%2018:53:45%20GMT%2B0900%20%28%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%20%ED%91%9C%EC%A4%80%EC%8B%9C%29.png?raw=true&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;**배포가 완료되었다. **&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://jungwoon.github.io/docker/2019/01/13/Docker-7/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Docker 정리 #7 (도커 이미지) - Jungwoon Blog&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Everything You need for development&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://jungwoon.github.io/docker/2019/01/13/Docker-7/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://cdn-images-1.medium.com/max/2400/1*DlNXVk9WA7tCRiHCETp3Rg.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://blog.naver.com/PostView.nhn?blogId=alice_k106&amp;amp;logNo=220646382977&amp;amp;parentCategoryNo=7&amp;amp;categoryNo=&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;65. [Docker] Dockerfile 개요 및 간단한 작성법 가이드&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;1. 개요 블로그 운영을 하면서, 어떤 사람이 아래처럼 물어본 적이 있었다. 보통 도커를 공부하기 위해서 ...&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://blog.naver.com/PostView.nhn?blogId=alice_k106&amp;amp;logNo=220646382977&amp;amp;parentCategoryNo=7&amp;amp;categoryNo=&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://blogthumb.pstatic.net/20160305_120/alice_k106_1457162981905pW7tO_PNG/%C4%B8%C3%B3.PNG?type=w2);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>텍스트 마이닝 프로젝트 : 중고거래 분석 (중고나라)</title>
   <link href="jgtonys.github.io/bigdata/2019/05/30/textmining-analysis/"/>
   <updated>2019-05-30T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/30/textmining-analysis</id>
   <content type="html">&lt;h2 id=&quot;지역별-시간대별-중고거래-분석중고나라&quot;&gt;&lt;strong&gt;지역별, 시간대별 중고거래 분석(중고나라)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;중고나라의 거래 자료들을 크롤링하여 데이터를 쌓고 그 데이터를 가지고 분석을 진행하였다. 데이터를 전처리하고 토큰화하여 명사 단위로 인식할 수 있도록 처리하였고 단어 출현 빈도수와 동시출현 네트워크를 형성했다. 결론적으로 LDA를 활용하여 토픽모델링을 하고 시각화하여 중고 거래의 트랜드를 분석하였다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;프로젝트-진행-순서&quot;&gt;&lt;strong&gt;프로젝트 진행 순서&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60061368-e1428180-972f-11e9-8934-9f2eac494338.png&quot; alt=&quot;C62280DB-9D11-4AA8-965E-5CE5DFBEE904&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 중고나라 페이지의 거래 데이터들을 크롤링한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모아진 데이터를 전처리하고 토큰화한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;처리된 데이터의 단어 빈도수를 통해 중요 단어에 대한 단서를 파악하고 동시출현 네트워크를 통해 등장하는 단어들의 관계를 파악한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;토픽모델링과 시각화를 통해 지역별,시간대별로 가장 거래가 활발한 단어(주제)를 파악한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로젝트의 결과를 분석한다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 순서로 프로젝트가 진행되었으며, 모든 처리는 python 의 모듈들을 사용하여 처리하였다. 상세 구현 방법은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;crawling&quot;&gt;&lt;strong&gt;Crawling&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;중고나라 데이터를 크롤링하는 과정에서 문제점을 발견했다. 기존에 쉽게 크롤링할 수 있는 request 모듈을 사용하려 했으나 동적으로 생성되는 웹 페이지의 내용은 가져올 수 없었다. &lt;strong&gt;웹이 로드되고 나서 내용이 동적으로 생성되기 때문이다(dynamic DOM)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;중고나라의 경우에는 iframe 을 사용하여 게시판의 내용이 형성되는데 이 정보들을 가져오기 위해 가상 테스팅 툴인 Selenium 을 사용하였다.&lt;/p&gt;

&lt;p&gt;Selenium 의 Chrome Driver 를 사용하면 실제로 사람이 클릭하는 결과를 크롤링 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;크롤러는 크롤러를 제어하는 driver.py 파일과 실제로 크롤링을 수행하는 selenium_crawler.py 로 이루어진다. 이렇게 나누게 된 이유는 여러 메뉴와 페이지를 돌며 크롤링을 수행할 때 그 수집된 데이터를 따로 정해진 위치와 이름으로 저장하기 위해서다.&lt;/p&gt;

&lt;p&gt;selenium 의 사용법은 여기에서 확인할 수 있다.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://www.javatpoint.com/selenium-tutorial')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Selenium Tutorial - javatpoint&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Selenium Tutorial with Introduction, features, selenium basic terminology, what is selenium, selenium limitations, selenium vs qtp, tool suite, selenium ide, ide-installation, ide-features, ide-first test case, ide-commands, ide-creating test cases manually, ide-login test etc.&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://www.javatpoint.com/selenium-tutorial&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://static.javatpoint.com/tutorial/selenium/images/selenium-what-is-selenium.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;driver.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium_crawler&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawler&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Default selenium webdriver setting

variables:
headless_flag   -- selenium chrome browser headless or not
options         -- selenium chrome browser options
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headless_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headless_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChromeOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'headless'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'window-size=1920x1080'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disable-gpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'chromedriver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'chromedriver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Wait until driver load resources
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implicitly_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Main crawling task

file:
selenium_crawler.py

module:
main(location, link, filename, driver)    -- main crawler

main arguments:
location    -- korean location name
link        -- browser menu id
filename    -- path result stored
driver      -- selenium driver
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'source/location_data.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loca_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loca_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;crawler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'loca'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'link'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'filename'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 주목해야 할 부분은 webdriver 에 ChromeOptions 를 주어 headless(웹 페이지가 보이지 않게 하는 옵션)를 설정하거나 gpu 가속을 줄 수 있다. 또한 implicitly_wait 은 webdriver 가 로드될 때까지 기다리는 역할을 한다(안정성).&lt;/p&gt;

&lt;p&gt;크롤러를 제어하는 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;source/location_data.json&lt;/code&gt; 파일에 담겨있는 크롤링 대상 지역,링크,저장될 데이터 파일이름 등을 인식하고 메인크롤러에 인자로 넘겨주어 실행한다. 다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;location_data.json&lt;/code&gt; 의 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;location_data.json 일부&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;loca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;서울 중고나라&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;menuLink1710&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outputs/서울/중구&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;loca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;서울 중고나라&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;menuLink1711&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outputs/서울/용산구&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;loca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;서울 중고나라&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;menuLink1712&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outputs/서울/성동구&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;loca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;서울 중고나라&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;menuLink1713&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outputs/서울/광진구&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;메인크롤러는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebDriverWait&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_conditions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;codecs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://cafe.naver.com/joonggonara'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebDriverWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visibility_of_element_located&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSS_SELECTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a.gm-tcol-c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;location_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a[title*='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;']&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arguments[0].scrollIntoView();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;elm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arguments[0].scrollIntoView();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;iframe_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iframe#cafe_main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch_to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iframe_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;page_10th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(2019).txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(~2019).txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;file_switch_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;notice_hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;label[for*='notice_hidden']&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arguments[0].scrollIntoView();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notice_hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notice_hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_10th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;page_button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prev-next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arguments[0].scrollIntoView();&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;page_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;div.prev-next a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_last_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;td.td_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_switch_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last date : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_last_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last date : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_last_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last date : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_last_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG TERMINATION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;page_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;------------&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;page-----------&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;td.td_article&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;td.td_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2018&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;file_switch_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;title_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a.article'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_switch_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전의 driver.py 에서 인식한 json 파일의 내용을 인자로 받아 크롤러가 실행된다. 중고나라 페이지에 들어가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, &quot;a.gm-tcol-c&quot;)))&lt;/code&gt; 를 통해 크롤링하고자 하는 내용의 element 가 로드될 때까지 대기한다.&lt;/p&gt;

&lt;p&gt;또한 selenium webdriver 는 실제 웹페이지가 시각적으로 윈도우 내에 보여야만 데이터를 가져올 수 있다. 이를 임의로 조정해 주기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;driver.execute_script(&quot;arguments[0].scrollIntoView();&quot;, location_group)&lt;/code&gt; 를 통해 특정 element 로 스크롤을 이동시켜 주었다.&lt;/p&gt;

&lt;p&gt;중고나라는 내용이 iframe 안에 담겨있기 때문에 iframe 으로 이동하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;dirver.switch_to.frame(iframe_element)&lt;/code&gt; 로 구현하였다.&lt;/p&gt;

&lt;p&gt;그 이후의 상세한 크롤링은 pagination 을 돌며 게시글의 제목을 가져와서 텍스트파일에 저장하는 것이다. 텍스트 파일이 두개로 나누어진 이유는, 2019년도(올해) 와 그 이전의 데이터를 따로 분리해서 저장하기 위함이다. 저장되는 filename 은 인자로 받은 이름으로 사용된다. 더 이상 pagination 이 존재하지 않으면 terminate 한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;크롤링 후 저장된 파일의 모습&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60062634-0ab1dc00-9735-11e9-9145-e2fddbabbaed.jpg&quot; alt=&quot;stored_documents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60062638-0eddf980-9735-11e9-8ea7-8405a9e8fda4.jpg&quot; alt=&quot;stored_documents2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;분석을 위해 &lt;strong&gt;서울 - 중구&lt;/strong&gt;, &lt;strong&gt;서울 - 종로구&lt;/strong&gt;,  &lt;strong&gt;서울 - 용산구&lt;/strong&gt;, &lt;strong&gt;서울 - 성동구&lt;/strong&gt; 데이터만을 사용하였다.&lt;/p&gt;

&lt;p&gt;전체 수집된 서울 전 지역 약 18만건의 데이터 중, 분석으로 사용된 데이터는 총 &lt;strong&gt;27085건&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60062803-a80d1000-9735-11e9-9125-d8c1671ca8a1.png&quot; alt=&quot;898AD8AB-CC07-46BB-A950-2F8E9CF3EF7D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-preprocessing&quot;&gt;&lt;strong&gt;Data Preprocessing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;크롤링된 실제 데이터에는 불필요한 정보들이 담겨있다. 프로젝트에서 필요한 정보는 주된 명사(단어) 이고, 이것을 제외한 다른 내용들을 전처리 해야만 했다.&lt;/p&gt;

&lt;p&gt;한국어로 나타난 정보이기 때문에 Konlpy(twitter) 를 사용하여 처리하였다.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('http://konlpy.org/en/latest/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;KoNLPy: Korean NLP in Python — KoNLPy 0.5.2 documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;KoNLPy (pronounced “ko en el PIE”) is a Python package for natural language processing (NLP) of the Korean language. For installation directions, see here.&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;http://konlpy.org/en/latest/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(http://konlpy.org/en/latest/_static/konlpy.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;먼저 konlpy 의 original twitter 를 사용하여 데이터를 전처리 해 본 결과, 특정 고유명사(제품명, 영화제목, 줄임말) 등을 인식할 수 없는 단점이 존재했다. 따라서 많이 나타나는 고유명사를 파악하여 수동으로 twitter dictionary 를 추가하였다. 추가한 모습은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'preprocess/dictionary.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Noun'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;미리 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;preprocess/dictionary.txt&lt;/code&gt; 파일에 정의된 고유명사를 twitter 에 추가하였다. 추가한 단어의 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60065732-d7287f00-973f-11e9-9c14-169ea345904b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;조사나 쓸모없는 단어들(예를들어 미개봉, 최고 같은 단어들)을 불용어(stopwords)로 처리하였는데, 그 과정은 다음과 같다.&lt;/p&gt;

&lt;p&gt;먼저 Stopwords의 처리와 n-gram인식 및 문자열 대체를 위해 Customize Konlpy(ckonlpy)를 사용하여 pos-tagging을 진행하였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stopwords(불용어) : 조사나 쓸모없는 단어들(예를들어 미개봉, 최고 같은 단어들)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;n-gram : 두개 이상의 단어가 합쳐진 형태&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;pos-tagging : 품사를 구별하여 명시하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ckonlpy.tag&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postprocessor&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ckonlpy.tag&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twitter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ckonlpy.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wordset&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ckonlpy.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_replace_wordpair&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ckonlpy.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_ngram&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;passwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wordset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'postprocess/passwords.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wordset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'postprocess/stopwords.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_replace_wordpair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'postprocess/replace.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ngrams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_ngram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'postprocess/ngrams.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'preprocess/dictionary.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nouns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Noun'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;passtags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Noun'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;postprocessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postprocessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_tagger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;passtags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passtags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ngrams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngrams&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Base_tagger는 앞서 생성된 단어가 추가된 twitter를 사용한다. Stopwords, passtags, replace, ngram처리는 미리 정의된 txt파일을 불러와 processor를 생성한다. 이 processor는 사전추가된 twitter를 base_tagger 로 토큰화 하여 불용어와 n-gram 을 처리하여 명사만을 추출한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;불용어 처리의 모습&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60066502-50c16c80-9742-11e9-8dbc-5e9d35bbe568.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tokenizing 파일의 경로로부터 ‘postprocess/stopwords.txt’ 에 불용어 리스트를 넣어둔다. 텍스트 파일의 단어는 줄단위로 추가된다. 분석에 용이하게 결과가 나타날 수 있도록 불용어를 처리하고 ngram(마찬가지로 ngram.txt 에 기입)을 추가하여 토큰화 하는 작업이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 만들어진 processor 로 크롤링 된 원본 데이터를 처리하면 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;서울 - 종로구(2019)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60066648-c0cff280-9742-11e9-9eae-8c44d54db662.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;추가된 고유명사를 인식하고 원본 텍스트에서 명사만 추출한 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;실제 vectorize.py 코드를 실행하면 원본 텍스트 옆에 preprocessed 가 붙어 전처리된 데이터가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;word-counting&quot;&gt;&lt;strong&gt;Word Counting&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이제 처리된 데이터를 가지고 어떤 단어가 얼마나 높은 빈도수로 나타났는지를 측정한다. 간단하게 단어들의 수를 측정하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'성동구(~2019)'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outputs/서울/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pre_nouns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postprocessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_nouns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nouns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nouns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wordclouds/서울/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_wordCounting.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tagbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;taglist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytagcloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pytagcloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_tag_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taglist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wordclouds/서울/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'korean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectangular&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filename 에 해당하는 파일을 읽고(크롤링된 원본 데이터), Word Counting 결과를 텍스트로 저장한다(wordclouds/지역/세부지역). 가장 상위 빈도 단어들(여기서는 상위 40개 단어)을 추출하고 pytagcloud를 사용하여 wordcloud로 시각화한다(wordclouds/지역/세부지역).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;서울 - 강서구(2019) WordCloud 모습&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60066876-6d11d900-9743-11e9-9507-e5949dcb8656.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;co-occurrence-network&quot;&gt;&lt;strong&gt;Co-Occurrence Network&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이제 연관된 단어가 어떻게 이어져 있는지 확인할 수 있는 동시출현 네트워크(co-occurrence network)를 만든다. 동시출현 네트워크를 만들기 위해서는 먼저 동시출현 매트릭스(co-occurrence matrix)가 생성되어야 한다. 과정은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;sklearn의 countVectorizer를 사용하여 co-occurrence matrix를 생성하기 위해 기존의 processor를 알맞은 format으로 변환한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;적절한 format으로 변환하기 위해 새로운 formatting class로 token을 생성한다.(MyTokenizer class)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;countVectorizer로 벡터화 한 후 vectorizer.fit_transform을 통해 matrix를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Xc = (X.T * X) 를 통해 co-occurrence matrix를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Xc.setdiag(0)을 통해 같은 단어의 동시출현을 0으로 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Co-occurrence network 생성 코드&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{}/{}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'서울/종로구(2019)'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outputs/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;my_tokenizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyTokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postprocessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountVectorizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_tokenizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit_transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Xc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdiag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# pandas 를 사용하여 gephi 에서 보여줄 word-word co-occurrence matrix csv 파일을 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_feature_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 엔티티 이름들을 보여준다
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gephi/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막에는 생성된 matrix 를 pandas 를 사용하여 column 과 index 를 설정하고 csv 파일로 저장한다. 이는 gephi 에서 사용될 자료를 만드는 과정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;생성된 csv 파일을 gephi 에서 불러와 시각화하면 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Layout : ForceAtlas 2 (default settings)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Modularity : Node &amp;amp; Egde Color Grouping&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;서울 - 종로구(2019) Co-occurrence Network&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60067254-e4943800-9744-11e9-8caa-375acc567f41.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;확대하면 다음과 같다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60067281-042b6080-9745-11e9-859b-5a8182f46681.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 굉장히 많은 node 와 egde 가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;좀 더 시각화를 용이하게 하기 위해 gephi 에서 modularity 를 분석하고 그 modularity 대로 색을 입혔다. 같은 문맥(클러스터)에 존재하는 단어들은 같은 색으로 표현되도록 한 것이다.&lt;/p&gt;

&lt;p&gt;또한 너무 많은 정보가 얽혀있어 degree 가 낮은, 상대적으로 덜 중요한 노드들을 제거하고 &lt;em&gt;(Degree Range : 13~259 (30% visible)degree range 는 noise 에 따라 다르게 설정한다)&lt;/em&gt; text size 를 PageRank 에 따라 부여하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 설정한 결과 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60067473-ac412980-9745-11e9-905d-1bd28cb0f15d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가전제품, 주방기구, 의류 등 각각의 품목끼리 클러스터를 지어(같은색으로) 존재하고, 또 그 제품군들에서 중심을 차지하거나 높은 관련성을 보이는 단어들이 크게 나타났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;topic-modeling&quot;&gt;&lt;strong&gt;Topic Modeling&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이제 각 데이터 문서별로 주제가 되는 단어를 뽑아내는 토픽 모델링을 구현한다. 이 과정에서 결과로 나온 가장 유력한 주제는 그 시간대, 그 지역의 가장 거래가 활발한 제품으로 판단할 수 있다.&lt;/p&gt;

&lt;p&gt;토픽모델링을 구현하기 위해서는 먼저 Term - Document Matrix 를 생성해야 한다. 생성하는 과정은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corpora&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;totalCorpus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## 출현단어 2개 이하는 무시하고 dictionary 생성
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;word_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;removal_word_idxs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token2id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removal_word_idxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dictionary size : &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Term - Document Matrix 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc2bow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalCorpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서는 token 의 출현이 3회 미만인 단어들을 제외하고 dictionary 를 생성하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 생성된 Term - Document Matrix 를 가지고 LDA를 적용한다. 이 때 LDA는  gensim.model의 ldaModel을 사용하는 것보다 mallet lda 를 적용하는 것이 더 좋았다(일관성 점수 기준). 구현은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
lda_model = models.ldamodel.LdaModel(corpus=corpus,
id2word=id2word,
num_topics=20,
random_state=100,
update_every=1,
chunksize=100,
passes=10,
alpha='auto',
per_word_topics=True)
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# mallet lda 적용
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mallet_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'source/mallet-2.0.8/bin/mallet'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lda_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LdaMallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mallet_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_topics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lda_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_topics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Compute Coherence Score
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coherence_model_lda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoherenceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lda_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalCorpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id2word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coherence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c_v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coherence_lda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coherence_model_lda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_coherence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Coherence Score: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coherence_lda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 일관성 점수는 생성된 LDA 모델이 얼마나 잘 만들어졌는가를 판단하는 척도가 된다.&lt;/p&gt;

&lt;p&gt;출력된 LDA 토픽은 상위 20개까지 나타나고 관련된 단어들이 출력되게 된다. 이것을 시각화하여 표현하기 위해 추가적으로 pyLDAvis 를 사용하였다. 그 결과 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068218-c92b2c00-9748-11e9-9538-387161ae7321.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에는 가장 주제가 될법한 단어들을 선정하고 해당 단어가 다른 어떤 단어들과의 연관성을 가지는지 보여준다. LDA 의 결과 생성된 주제 단어는 그 문서의 주제 단어가 된다는 가정 하에 결과를 분석하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;result-analysis&quot;&gt;&lt;strong&gt;Result Analysis&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068334-317a0d80-9749-11e9-8b37-0678b4527c4e.png&quot; alt=&quot;AFB2D91E-C341-4C1F-A5DF-DCD1FB7E3DC2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068340-3dfe6600-9749-11e9-8ea0-475b82c06a77.png&quot; alt=&quot;2BADCDD3-058F-4809-B82D-1D1EC9B1E4D4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4개-지역-단어-빈도수-분석-결과&quot;&gt;&lt;strong&gt;4개 지역 단어 빈도수 분석 결과&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;전체적으로 휴대폰 및 차량의 거래가 활발하다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서울 중구 : 다른 지역과 달리 의류의 거래가 활발하게 나타난다&lt;/p&gt;

&lt;p&gt;서울 종로구 : 중고 차량의 거래가 활발하게 나타난다&lt;/p&gt;

&lt;p&gt;서울 용산구 : 전자기기와 가전제품의 거래가 활발하게 나타난다&lt;/p&gt;

&lt;p&gt;서울 성동구 : 서적 및 쿠폰의 거래가 가장 활발하게 나타난다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068385-7e5de400-9749-11e9-8d50-1430b56bbbff.png&quot; alt=&quot;24CA3A7B-C771-4808-BA97-0DE0F89FFBE8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068411-95043b00-9749-11e9-83c6-f3fe35ae18bb.png&quot; alt=&quot;639C27ED-A4C2-443E-8DE2-701BFA636B2C&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068447-b49b6380-9749-11e9-8269-2637799df78f.png&quot; alt=&quot;147E1C57-96E7-4EBF-BF12-B12BD4B79105&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068453-bf55f880-9749-11e9-8e5d-895c7ec88f7c.png&quot; alt=&quot;247E851F-EDA0-40C9-BE27-67D6DCF53665&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068474-d694e600-9749-11e9-9849-bd3b197723a8.png&quot; alt=&quot;7A4A02D5-9C75-4C86-9CA1-A2C322E56B78&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068480-deed2100-9749-11e9-87dd-26971bc2a13f.png&quot; alt=&quot;7D0455B9-7E56-4B99-A53D-6B1112B0E039&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068489-ef9d9700-9749-11e9-9cb6-b8fbbc450f94.png&quot; alt=&quot;79A6037D-B86D-4FB9-8BCE-BB6A43EE9B33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068497-f75d3b80-9749-11e9-9e00-4c5f0873af93.png&quot; alt=&quot;25ED0DB4-7AF6-4CB1-B5A3-A9C51314B133&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068507-093ede80-974a-11e9-80e0-852d454fe01f.png&quot; alt=&quot;151E7F5E-B3A3-42AF-9271-0A502679E3F7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068515-11971980-974a-11e9-841a-f24623594b66.png&quot; alt=&quot;E31013AE-4494-49EC-8950-476DE33B968F&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/60068536-24a9e980-974a-11e9-9753-02645f41c4d8.png&quot; alt=&quot;64C2CBCB-4A1B-40CE-BA74-80773A95989D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;executable-code&quot;&gt;&lt;strong&gt;Executable Code&lt;/strong&gt;&lt;/h2&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://github.com/jgtonys/joonggonara_textmining')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;jgtonys/joonggonara_textmining&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Selenium Cralwer + Konlpy(twitter) + Mallet LDA. Contribute to jgtonys/joonggonara_textmining development by creating an account on GitHub.&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://github.com/jgtonys/joonggonara_textmining&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://avatars1.githubusercontent.com/u/33674947?s=400&amp;amp;v=4);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Real-Time Structured Streaming Privacy Preserving</title>
   <link href="jgtonys.github.io/bigdata/2019/05/24/real-time-streaming-privacy-preserving/"/>
   <updated>2019-05-24T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/24/real-time-streaming-privacy-preserving</id>
   <content type="html">&lt;h2 id=&quot;real-time-structured-streaming-privacy-preserving&quot;&gt;&lt;strong&gt;Real-Time Structured Streaming Privacy Preserving&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;실시간으로 들어오는 빅데이터를 Spark Structured Streaming 을 사용하여 개인정보를 익명화하고 그 결과를 모니터링하는 프로젝트를 완성했다. 이전에 학습하였던 로컬에서의 application 개발을 토대로 작업하였고, privacy preserving(개인정보 익명화) 프로세스는 대그룹화, 소그룹화 익명화 알고리즘을 사용하여 구현하였다. 모니터링은 실시간으로 나오는 결과를 받아 웹으로 시각화 하였다.
본 프로젝트는 연세대 컴퓨터과학과 졸업 프로젝트로 사용되었다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;460&quot; src=&quot;https://www.youtube.com/embed/1aerl_Rgfzw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-goal&quot;&gt;&lt;strong&gt;1. Goal&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-time privacy preserving data publishing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“&lt;u&gt;privacy preserving data publishing&lt;/u&gt; is the process of removing identifying information from data to prevent a person’s identity from being connected with information.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985431-9c094b80-966c-11e9-8405-c7544ace5c90.png&quot; alt=&quot;image (1)&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typical methods of privacy preserving data publishing are K-Anonymity and Differential privacy model based algorithms.&lt;/li&gt;
  &lt;li&gt;We develop Apache Spark Structured Streaming-based Algorithm performing privacy preserving data publishing to Big Data.&lt;/li&gt;
  &lt;li&gt;We research real time privacy preserving data publishing algorithms which protects against attacks resulting from the leakage of personal information during Big data circulation and analysis. At the same time, algorithms should keep the similarity of each personal information high-level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-need&quot;&gt;&lt;strong&gt;2. Need&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;why-do-we-need-real-time-privacy-model&quot;&gt;&lt;strong&gt;Why do we need real-time privacy model?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Importance of privacy model&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, privacy model(de-identification) aims to allow data to be used by others without the possibility of individuals or organizations being identified. Personal sensitive information must be managed carefully not to be wrongly used by public especially in these big data world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Existing privacy model has some limitations&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are some existing privacy models such as &lt;em&gt;k&lt;/em&gt;-anonymity model or differential privacy model and these algorithm model ensures individual data not to be recognized. However, these algorithm only supports &lt;em&gt;batch processing&lt;/em&gt; algorithm and this limitation relatively has some miserable results when we process lots of data stream in real-time big data input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Streaming process is recommended&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, not only large amounts of data but real-time feedback of data is required to build some sensitive(reactive) system or applications.
Accordingly,  &lt;em&gt;streaming process&lt;/em&gt; is extremely recommended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Therefore, Real-time privacy model.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recognizing this need which has to satisfy efficient privacy model and real-time process, we will represent privacy model supports real-time streaming process that combines de-identification algorithm and instant feedbacks using spark structured streaming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985490-f1ddf380-966c-11e9-8e63-8deca6ed94ba.png&quot; alt=&quot;test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	&lt;em&gt;real-time big data flooding pictures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Streaming process is more and more efficient at processing &amp;amp; analyzing big data in real-time than batch processing. Below are specific advantages of streaming process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Low latency&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the point of performance, the latency of batch processing will be in minutes to hours while the latency of stream processing will be in seconds or milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fraud detection &amp;amp; Error handling&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Streaming processing is effective for coping with fraud detection and error handling. Streaming process enables real-time anomaly detecting which signals fraud sign and rolling back some fraudulent transactions before they are completed. It is important in situations when we should use error-free data processing large volumes of information or use real-time analytics which needs fast fraud-clear results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-research-contents&quot;&gt;&lt;strong&gt;3. Research Contents&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;algorithm&quot;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The algorithm we used to implement Real-time privacy preserving process is as follows.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985538-38cbe900-966d-11e9-88bd-8c8b8a706873.png&quot; alt=&quot;1_ (1)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add new fields by converting the required attributes in the existing data schema.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EX) Age -&amp;gt; Age Group, Full Name -&amp;gt; Last Name&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Large Grouping&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985541-41bcba80-966d-11e9-97ed-609386e99acd.png&quot; alt=&quot;스크린샷 2019-06-19 오후 6.13.31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the selected multiple abstraction key attributes, group of records having same attributes values are grouped together (large group) and a GID column is created.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Small Grouping&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985544-45504180-966d-11e9-86bd-69382bf77322.png&quot; alt=&quot;스크린샷 2019-06-19 오후 6.13.38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Records having similar attribute values in one large group are grouped again into small groups.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Abstraction&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985547-4a14f580-966d-11e9-8b95-6253618b0a62.png&quot; alt=&quot;스크린샷 2019-06-19 오후 6.13.42&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Abstraction is performed based on the small grouping result.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985576-76c90d00-966d-11e9-8654-5ce056d3b006.png&quot; alt=&quot;스크린샷 2019-06-19 오후 6.13.49&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two frameworks to implement, Spark Structured Streaming and Kafka. In the past, the batch process was done all the work in one application, but we divide it into several applications. Because Spark Structured Streaming support aggregation only once per application. So we have to find a way to send and receive data between applications. We use Kafka to connect several applications.&lt;/p&gt;

&lt;p&gt;Spark Structured Streaming is a streaming process framework built on the Spark SQL engine. It supports Dataset/DataFreme API in Scala, Python, Java, R to express streaming aggregations, event-time windows, stream-to-batch joins. We use Java to implement each step in application. Structured Streaming provides fast, scalable, fault-tolerant, end-to-end exactly-once stream processing without the user having to reason about streaming.&lt;/p&gt;

&lt;p&gt;Apache Kafka is a publish subscribe messaging system that is exchanging data between process, applications and servers. Kafka reduces the risk of data loss by saving message in disk not memory and Kafka is designed specifically for high-volume real-time log processing.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We implement Real-time privacy preserving process successfully using these. And we also calculate various indicators between abstracted data using our process and original data.&lt;/p&gt;

&lt;p&gt;To use processed data, it has to maintain the meaning of unprocessed data. Dissimilarity indicates how much abstracted data differ from the original data. The lower dissimilarity is, the more abstracted data maintain the meaning of original data.&lt;/p&gt;

&lt;p&gt;If the residual rate is too low, the amount of data discarded becomes to large. Therefore, we compare and analyze the results of how to adjust the parameters to increase the residual rate.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-research-results&quot;&gt;&lt;strong&gt;4. Research Results&lt;/strong&gt;&lt;/h2&gt;

&lt;h4 id=&quot;residual-rate-by-abstraction-attributes&quot;&gt;&lt;strong&gt;Residual rate by abstraction attributes&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985754-4a61c080-966e-11e9-8807-210e22c6f652.jpg&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is very important to define &lt;strong&gt;abstraction attributes&lt;/strong&gt; in the process of data abstraction. Depending on which attributes are defined as abstraction attributes, the residual rate of the data differs. In the two cases, the Abstraction results are more than twice as different. This difference comes from the abstraction
attributes. In both cases, GENDER and CITY were used as abstraction attributes commonly and one used AGE as an abstraction attributes and the other used DRINK as an abstraction attributes. Left case is poorly grouped because AGE has a wide range of values, but right case is grouped well because DRINK has only two values(0 or 1). Therefore, when using abstraction attributes with various values, the grouping will not be performed properly, so the residual rate will be low.&lt;/p&gt;

&lt;h4 id=&quot;residual-rate-by-the-number-of-streaming-inputs&quot;&gt;&lt;strong&gt;Residual rate by the number of streaming inputs&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985770-649b9e80-966e-11e9-9a64-6dd477fa5792.png&quot; alt=&quot;image (2)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We experimented with different numbers of data(rows) per transaction and found that number of data per 1 transaction can determines amount of remnant (privacy-preserved) data. &lt;strong&gt;More streaming input&lt;/strong&gt; per 1 transaction makes perfect “Abstraction”. When 2,000 rows were given per 1 transaction, the residual rate was 69.71%, but when 100 rows were given per 1 transaction, the residual rate is very low.&lt;/p&gt;

&lt;h4 id=&quot;how-well-does-the-result-preserve-the-meaning-of-original-data&quot;&gt;&lt;strong&gt;How well does the result preserve the meaning of original data?&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985784-70876080-966e-11e9-8f71-88bd4729e325.png&quot; alt=&quot;image (3)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To use remnant(abstracted) data, the abstracted data should not lose the meaning of original data. The indicator of this is dissimilarity. The lower dissimilarity, the more conservative the meaning. It is calculated as follows. The results show that the dissimilarity-value is close to zero. Therefore, the abstracted data maintains the meaning of the original data well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985789-79783200-966e-11e9-9933-381f6844a2a9.png&quot; alt=&quot;image (4)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-project-environment&quot;&gt;&lt;strong&gt;5. Project Environment&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This is overall project environment&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59985878-ec81a880-966e-11e9-96e4-2efc65cb465f.jpg&quot; alt=&quot;Mid-Report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Main spark streaming application environment&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59986201-a9283980-9670-11e9-96af-48ee4092d105.png&quot; alt=&quot;그림1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We use Spark Structured Streaming and Kafka. In the past, the process was done all the work in one application, but we divide it into several applications. Because Spark Structured Streaming support aggregation only once per application. We use Kafka to connect several applications. (Therefore there is several kafka topics listening to previous applications)&lt;/p&gt;

&lt;p&gt;Kafka topic listening view&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;460&quot; src=&quot;https://www.youtube.com/embed/_n8S1R90H4I&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Spark Structured Streaming is a streaming process framework built on the Spark SQL engine. We use the Dataset/DataFreme API in Java to express streaming aggregations, event-time windows, stream-to-batch joins and implement each step in Java application. Structured Streaming provides fast, scalable, fault-tolerant, end-to-end exactly-once stream processing without the user having to reason about streaming.&lt;/p&gt;

&lt;p&gt;Apache Kafka is a publish subscribe messaging system that is exchanging data between process, applications and servers. Kafka reduces the risk of data loss and Kafka is designed specifically for high-volume real-time log processing.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Project Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;모니터링 웹페이지 코드 공개입니다&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://github.com/jgtonys/Spark-Structured-Streaming')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;jgtonys/Spark-Structured-Streaming&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;연세대 컴퓨터과학과 소프트웨어종합설계 Real-time privacy preserved data publishing Monitoring Page - jgtonys/Spark-Structured-Streaming&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://github.com/jgtonys/Spark-Structured-Streaming&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://avatars1.githubusercontent.com/u/33674947?s=400&amp;amp;v=4);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;em&gt;Short Report For Project&lt;/em&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://drive.google.com/file/d/11b_qiVLkTgvpjU3tT59YyYzQemx2VAr0/preview&quot; width=&quot;100%&quot; height=&quot;640&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>텍스트마이닝: Word Representation</title>
   <link href="jgtonys.github.io/bigdata/2019/05/16/textmining-word-representation/"/>
   <updated>2019-05-16T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/16/textmining-word-representation</id>
   <content type="html">&lt;h2 id=&quot;텍스트데이터-수집-방법&quot;&gt;&lt;strong&gt;텍스트(데이터) 수집 방법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;python을 사용하여 데이터를 크롤링하는 방법을 배운다. 본격적으로 코드에 대해 언급하기 전에 알아야 할 인코딩이나 환경에 대하여 먼저 서술한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;different-types-of-word-embeddings&quot;&gt;&lt;strong&gt;Different types of Word Embeddings&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빈도수 기반 Embedding : Count Vector, TF-IDF Vector, Co-Occurrence Vector&lt;/li&gt;
  &lt;li&gt;예측 기반 Embedding : CBOW(Continuous Bag of words), Skip-Gram model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributional Embeddings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Training Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tdm의 특징 sparse 하다 (필요없는 정보 예를들어 0이 많음)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GloVe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Word Representation 을 위한 Global Vector 이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FastText&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;페이스북에서 제작한 word2bag 의 변형. 단어단위가 아니라 캐릭터 단위의 레벨을 사용하며 스킵-그램 모델의 확장이다. n-gram 단위로 학습한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# For preprocessing
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# For data handling
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# To time our operations
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# For word frequency
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spacy&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# For preprocessing
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# python -m spacy download en_core_web_sm
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Setting up the loggings to monitor gensim
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datefmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data/simpsons_dataset.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleaning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Lemmatizes and removes stopwords
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# doc needs to be a spacy Doc object
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lemma_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Word2Vec uses context words to learn the vector representation of a target word,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# if a sentence is only one or two words long,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# the benefit for the training is very small
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;brief_cleaning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[^A-Za-z']+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'spoken_words'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spacy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'en_core_web_sm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ner'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# disabling Named Entity Recognition for speed
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleaning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brief_cleaning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time to clean up everything: {} mins'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df_clean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'clean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_clean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gensim.models.phrases&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phrases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phraser&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'clean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phrases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phrases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progress_per&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bigram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phraser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Most Frequent Words:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;word_freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word_freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Train the Model
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gensim.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Word2Vec&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Count the number of cores in a computer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Word2Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6e-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;min_alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# min_count = int - Ignores all words with total absolute frequency lower than this - (2, 100)
# window = int - The maximum distance between the current and predicted word within a sentence. E.g. window words on the left and window words on the left of our target - (2, 10)
# size = int - Dimensionality of the feature vectors. - (50, 300)
# sample = float - The threshold for configuring which higher-frequency words are randomly downsampled. Highly influencial. - (0, 1e-5)
# alpha = float - The initial learning rate - (0.01, 0.05)
# min_alpha = float - Learning rate will linearly drop to min_alpha as training progresses. To set it: alpha - (min_alpha * epochs) ~ 0.00
# negative = int - If &amp;gt; 0, negative sampling will be used, the int for negative specifies how many &quot;noise words&quot; should be drown. If set to 0, no negative sampling is used. - (5, 20)
# workers = int - Use these many worker threads to train the model (=faster training with multicore machines)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progress_per&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time to build vocab: {} mins'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corpus_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time to train the model: {} mins'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_sims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_similar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;homer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_similar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;homer_simpson&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_similar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;similarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'maggie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'baby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;similarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'nelson'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;### Visualization
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;darkgrid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.decomposition&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCA&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.manifold&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TSNE&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tsnescatterplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Plot in seaborn the results from the t-SNE dimensionality reduction algorithm of the vectors of a query word,
    its list of most similar words, and a list of words.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# adds the vector of the query word
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# gets list of most similar words
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;close_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_similar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# adds the vector for each of the closest words to the array
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrd_score&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wrd_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrd_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;word_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrd_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;color_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrd_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# adds the vector for each of the words from list_names to the array
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wrd_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;word_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;color_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrd_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reduces the dimensionality from 300 to 50 dimensions with PCA
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;reduc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit_transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Finds t-SNE coordinates for 2 dimensions
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_printoptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suppress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TSNE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perplexity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit_transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Sets everything up to plot
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'words'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size_inches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Basic plot
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;fit_reg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;scatter_kws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;s&quot;&gt;'facecolors'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Adds annotations one by one with a loop
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'  '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;words&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;horizontalalignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;verticalalignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'medium'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'normal'&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t-SNE visualization for {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tsnescatterplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'maggie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w2v_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_similar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maggie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Spark Streaming Application Tutorial</title>
   <link href="jgtonys.github.io/bigdata/2019/05/13/spark-streaming-application0/"/>
   <updated>2019-05-13T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/13/spark-streaming-application0</id>
   <content type="html">&lt;h2 id=&quot;spark-streaming-application&quot;&gt;&lt;strong&gt;Spark Streaming Application&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;본 포스트는 Spark 와 Java Application 을 이용하여 Streaming Application 을 구성한다. Streaming 을 구현하는 방법에는 Structured Streaming 과 Spark Streaming 이 있다. 먼저 Spark Streaming 을 로컬 환경에서 구성하여 본다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;이전 로컬환경 설정&lt;/em&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Spark &amp;amp; Java Application Local 설정&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Spark 로컬 환경 구성 본 포스트는 Spark 와 Java Application 을 이용한 Structured Streaming 구현을 목표로 한다. 방대한 양의 빅데이터가 실시간으로 들어오는 상황에서 database의 관리를 batch processing 이 아닌, streaming 으로 처리하기 위함이다. 그 첫번째 과정으로 로컬 환경을 구성하여 테스트 해 본다. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://user-images.githubusercontent.com/33674947/56813408-d1b1d400-6877-11e9-9b4f-893fcc6254c6.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h2 id=&quot;reference&quot;&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/h2&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Getting Started - Spark 2.4.3 Documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;The entry point into all functionality in Spark is the SparkSession class. To create a basic SparkSession, just use SparkSession.builder():&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://spark.apache.org/docs/latest/img/spark-logo-hd.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;linking&quot;&gt;&lt;strong&gt;LINKING&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Spark Streaming Application 의 개발을 위해서는 먼저 Maven 의 설정을 다시 바꾸어서 Streaming 을 연결해 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.spark&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spark-streaming_2.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 Kafka, Flume, and Kinesis 같은 Spark Streaming core API 에 존재하지 않는 소스로부터 데이터를 받아 온다면, artifactId 에는 다음과 같이 적어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59984216-b50cff00-9662-11e9-8d9b-1106318d56ec.jpg&quot; alt=&quot;E3215407-542D-4791-BA06-3E996A83865D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;initialize&quot;&gt;&lt;strong&gt;INITIALIZE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkConf&lt;/code&gt; 객체 로부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamingContext&lt;/code&gt; 를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.streaming.api.java.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAppName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;appName&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 는 RDD 의 conf 에서와 같은 형식으로 넣어준다. 여기에서 Dura&lt;/p&gt;

&lt;p&gt;만약 application 에서가 아니라 기존에 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaSparkContext&lt;/code&gt; 로 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaStreamingContext&lt;/code&gt; 를 생성하려 한다면 다음과 같이 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.streaming.api.java.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;JavaSparkContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//existing JavaSparkContext&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;discretized-streams-dstreams&quot;&gt;&lt;strong&gt;Discretized Streams (DStreams)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;DStream 이란 연속적인 데이터의 흐름이다. Source 로부터 받은 data 일 수도 있고, input stream 을 변형하면서 나타나는 처리된 data stream 일 수도 있다.&lt;/p&gt;

&lt;p&gt;Dstream 은 일련의 연속적인 RDD 의 모습으로 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59984125-c4d81380-9661-11e9-83fa-89aa9e780490.png&quot; alt=&quot;streaming-dstream-7dd917cd-e9a2-4a2b-a140-b1163cbde3f1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DStream 에 적용된 operation 은 RDD 를 변환시킨다. Stream line 을 word 로 변환시키는 작업은 다음과 같은 변환을 나타낸다. 여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; operation 이 해당 RDD 를 변환시키게 된다.(line → word)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/59984126-c4d81380-9661-11e9-84bf-6a80ca2f08fa.png&quot; alt=&quot;streaming-dstream-ops-1273b3f9-b07d-4ecb-8582-0edea24f2183&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 변환은 Spark Engine 에 의해서 이루어진다.&lt;/p&gt;

&lt;p&gt;정해진 hostname 과 port 에서 들어오는 TCP data 를 받는 DStream Receiver 를 생성해보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create a DStream that will connect to hostname:port, like localhost:9999&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaReceiverInputDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;socketTextStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서의 lines 는 &lt;a href=&quot;http://localhost:9999&quot;&gt;localhost:9999&lt;/a&gt; 로부터 오는 data stream 을 받는다.&lt;/p&gt;

&lt;p&gt;이를 word 단위로 처리하기 위해서는 다음과 같이 작성해 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Split each line into words&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; 은 lines Dstream 각각을 단어 단위로 쪼개어 words Dstream 으로 생성하는 역할을 한다.&lt;/p&gt;

&lt;p&gt;또한 여기에서 각각의 word 를 count 하기 위한 코드는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Count each word in each batch&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaPairDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaPairDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduceByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Print the first ten elements of each RDD generated in this DStream to the console&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mapToPair&lt;/code&gt; 함수는 각각의 단어를 1과 함께 묶어서 짝을 짓게 만들고 pairs 에 저장한다. 다음으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;reduceByKey&lt;/code&gt; 는 이렇게 생성된 pairs 에서 key 값에 따라 같은 값인 경우 숫자를 더해주어 wordCounts 에 저장한다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;wordCounts.print&lt;/code&gt; 는 매초 생성된 wordCounts 를 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;streaming-process&quot;&gt;&lt;strong&gt;STREAMING PROCESS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Streaming 연산을 시작하기 위해서 다음과 같이 코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// Start the computation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Wait for the computation to terminate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jssc.start()&lt;/code&gt; 함수는 스트리밍 연산을 시작하는 것이고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jssc.awaitTermination()&lt;/code&gt; 함수는 스트리밍 연산의 종료를 기다리는 함수이다.&lt;/p&gt;

&lt;p&gt;연산이 종료되지 않으면 스트리밍은 멈추지 않고 계속 스트리밍을 읽기 위해 대기한다. ctrl + c 로 종료할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;real-code&quot;&gt;&lt;strong&gt;REAL CODE&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;실제 작성된 예제 코드이다&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testSparkStreaming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.streaming.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.streaming.api.java.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaWordCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAppName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testSparkStreaming&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local[2]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaStreamingContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Durations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;JavaReceiverInputDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;socketTextStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;JavaDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

	  &lt;span class=&quot;nc&quot;&gt;JavaPairDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;JavaPairDStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduceByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;wordCounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	  &lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;              
	  &lt;span class=&quot;n&quot;&gt;jssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 python 으로 랜덤 문자열을 자동으로 생성하여 &lt;a href=&quot;http://localhost:9999&quot;&gt;localhost:9999&lt;/a&gt; 로 전송하게 하였다. 아래는 시연 영상이다.&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/u_S4IU7m8WI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Spark Dataset Application Tutorial</title>
   <link href="jgtonys.github.io/bigdata/2019/05/13/spark-dataset-application/"/>
   <updated>2019-05-13T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/13/spark-dataset-application</id>
   <content type="html">&lt;h2 id=&quot;spark-dataset-application&quot;&gt;&lt;strong&gt;Spark Dataset Application&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;본 포스트는 Spark 와 Java Application 을 이용하여 Dataset Application 을 구성한다. 그 전에 구성된 로컬 환경을 바탕으로 테스트 해 본다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;이전 로컬환경 설정&lt;/em&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Spark &amp;amp; Java Application Local 설정&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Spark 로컬 환경 구성 본 포스트는 Spark 와 Java Application 을 이용한 Structured Streaming 구현을 목표로 한다. 방대한 양의 빅데이터가 실시간으로 들어오는 상황에서 database의 관리를 batch processing 이 아닌, streaming 으로 처리하기 위함이다. 그 첫번째 과정으로 로컬 환경을 구성하여 테스트 해 본다. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://user-images.githubusercontent.com/33674947/56813408-d1b1d400-6877-11e9-9b4f-893fcc6254c6.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h2 id=&quot;reference&quot;&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/h2&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Getting Started - Spark 2.4.3 Documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;The entry point into all functionality in Spark is the SparkSession class. To create a basic SparkSession, just use SparkSession.builder():&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://spark.apache.org/docs/latest/img/spark-logo-hd.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;initialize&quot;&gt;&lt;strong&gt;INITIALIZE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Dataset application 을 만들 때 첫번째로 해야 하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkSession&lt;/code&gt; 클래스를 생성하는 것이다. Basic &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkSession&lt;/code&gt; 을 구성하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkSession.builder()&lt;/code&gt; 를 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.SparkSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SparkSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SparkSession&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Java Spark SQL basic example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.some.config.option&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;some-value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;creating-dataframes&quot;&gt;&lt;strong&gt;Creating DataFrames&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SparkSession&lt;/code&gt; 을 사용하면, 기존에 존재하던 RDD 를 가지고 DataFrame 을 생성할 수 있다. 아래는 하나의 예시로 json 파일의 정보를 불러와서 DataFrame 을 생성하는 것을 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.Dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;examples/src/main/resources/people.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// DataFrame 의 모습을 stdout 으로 보여준다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | age|   name|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |null|Michael|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  30|   Andy|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  19| Justin|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; 는 json 으로 생성된 DataFrame 이다.&lt;/p&gt;

&lt;p&gt;DataFrame 으로 할 수 있는 작업은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printSchema()&lt;/code&gt; : DataFrame 의 Schema 를 보여준다.&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// root&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// |-- age: long (nullable = true)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// |-- name: string (nullable = true)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Select(&quot;Attribute name&quot;).show()&lt;/code&gt; : Select 한 Column 의 정보만을 보여준다.&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// +-------+&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// |   name|&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// +-------+&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// |Michael|&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// |   Andy|&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// | Justin|&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// +-------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Select(col(&quot;name&quot;), col(&quot;age&quot;).plus(1)).show();&lt;/code&gt; : 임의로 정보를 수정하여
Select 할 수 있다.&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +-------+---------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |   name|(age + 1)|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +-------+---------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |Michael|     null|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |   Andy|       31|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | Justin|       20|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +-------+---------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt; : 연산에 의해 걸러진 정보만들 표현한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +---+----+&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// |age|name|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +---+----+&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// | 30|Andy|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +---+----+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GroupBy&lt;/code&gt; : 그룹화 하여 정보를 표현할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +----+-----+&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// | age|count|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +----+-----+&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// |  19|    1|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// |null|    1|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// |  30|    1|&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// +----+-----+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;running-sql-queries-programmatically&quot;&gt;&lt;strong&gt;RUNNING SQL QUERIES PROGRAMMATICALLY&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;먼저 SQL Query 를 실행하기 위해서는 DataFrame 을 가상의 view 로 바꾸는 과정이 필요하다. 예를 들어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Select * from Table&lt;/code&gt; 을 하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt; 이라는 view(table) 가 필요하기 때문이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 DataFrame 을 Temporary View 로 생성하여 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.Dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.sql.Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// DataFrame 을 SQL Temporary View 로 등록한다. df -&amp;gt; people&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createOrReplaceTempView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqlDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | age|   name|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |null|Michael|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  30|   Andy|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  19| Justin|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;단 Temporary View 는 Spark Session-Scope 에서만 존재하기 때문에, Session 이 종료되면 사라지는 임시적인 View 이다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;만약 Application 단에서 Session 이 종료되더라도 지속적으로 사용할 수 있는 View 를 생성하고 싶다면 &lt;strong&gt;Global Temporary View&lt;/strong&gt; 를 생성해야 한다. 주의할 점은 정의한 다음 사용할 때 항상 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;global_temp&lt;/code&gt; 를 붙여 주어야 한다. ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;global_temp.people&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;아래는 Global Temporary View 의 예제이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Global Temporary View 로 등록한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createGlobalTempView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Global temporary view is tied to a system preserved database `global_temp`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM global_temp.people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | age|   name|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |null|Michael|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  30|   Andy|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  19| Justin|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Global temporary view is cross-session&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM global_temp.people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | age|   name|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |null|Michael|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  30|   Andy|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// |  19| Justin|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +----+-------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;example-running&quot;&gt;&lt;strong&gt;EXAMPLE RUNNING&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Spark 예제의 &lt;a href=&quot;http://javasparksqlexample.java&quot;&gt;JavaSparkSQLExample.java&lt;/a&gt; 를 실행해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Real Code&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/spark-submit &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt; spark://jungyu:7077 &lt;span class=&quot;nt&quot;&gt;--class&lt;/span&gt; testSparkApplication.JavaSparkSQLExample testcase/testSparkApplication-0.0.2.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;시연-영상&quot;&gt;&lt;strong&gt;시연 영상&lt;/strong&gt;&lt;/h2&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/ynOzTCfrsW0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Spark RDD Application Tutorial</title>
   <link href="jgtonys.github.io/bigdata/2019/05/12/spark-rdd-application/"/>
   <updated>2019-05-12T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/12/spark-rdd-application</id>
   <content type="html">&lt;h2 id=&quot;spark-rdd-application&quot;&gt;&lt;strong&gt;Spark RDD Application&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;본 포스트는 Spark 와 Java Application 을 이용하여 RDD Application 을 구성한다. 그 전에 구성된 로컬 환경을 바탕으로 테스트 해 본다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;이전 로컬환경 설정&lt;/em&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Spark &amp;amp; Java Application Local 설정&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Spark 로컬 환경 구성 본 포스트는 Spark 와 Java Application 을 이용한 Structured Streaming 구현을 목표로 한다. 방대한 양의 빅데이터가 실시간으로 들어오는 상황에서 database의 관리를 batch processing 이 아닌, streaming 으로 처리하기 위함이다. 그 첫번째 과정으로 로컬 환경을 구성하여 테스트 해 본다. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://user-images.githubusercontent.com/33674947/56813408-d1b1d400-6877-11e9-9b4f-893fcc6254c6.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h2 id=&quot;reference&quot;&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/h2&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://spark.apache.org/docs/latest/rdd-programming-guide.html')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;RDD Programming Guide - Spark 2.4.3 Documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Spark 2.4.3 programming guide in Java, Scala and Python&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://spark.apache.org/docs/latest/rdd-programming-guide.html&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://spark.apache.org/docs/latest/img/spark-webui-accumulators.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;environment&quot;&gt;&lt;strong&gt;ENVIRONMENT&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Spark 2.4.0&lt;/em&gt; supports &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda expressions&lt;/code&gt; for concisely writing functions, otherwise you can use the classes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.spark.api.java.function&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Java 를 Spark application 에 연결하기 위해서는 Spark application 의 maven 에 dependency 를 추가해 주어야만 한다. (이미 되어있는 경우 생략)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;groupId = org.apache.spark
artifactId = spark-core_2.11
version = 2.4.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 HDFS 를 연결한다면 마찬가지로 maven 에 dependency 를 추가해 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;groupId = org.apache.hadoop
artifactId = hadoop-client
version = &lt;span class=&quot;nt&quot;&gt;&amp;lt;your-hdfs-version&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java 를 Link 하기 위해서는 다음과 같이 class 들을 import 한다&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.api.java.JavaSparkContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.api.java.JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;initialize&quot;&gt;&lt;strong&gt;INITIALIZE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Spark application 을 만들 때 첫번째로 해야 하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaSparkContext&lt;/code&gt; 객체를 생성하는 것이다. 이 객체는 어떻게 cluster 에 연결할 수 있는지를 명세한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkContext&lt;/code&gt; 를 생성하기 위해서는 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkConf&lt;/code&gt; 객체를 생성하여 application 의 정보를 가져온다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;SparkConf 객체로 정보 획득&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SparkContext 객체 생성&lt;/p&gt;

    &lt;p&gt;SparkConf conf = new SparkConf().setAppName(appName).setMaster(master);
JavaSparkContext sc = new JavaSparkContext(conf);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;appName&lt;/code&gt; : Name for your application to show on the cluster UI&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;  : Spark, Mesos or YARN cluster URL, or local (또는 spark-submit 을 통해 나타난 master 의 이름)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java Spark Application 은 shell 을 통해 initialize 할 수 없다. 따라서 코드에서만 가능하다.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;resilient-distributed-datasets-rdds&quot;&gt;&lt;strong&gt;Resilient Distributed Datasets (RDDs)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;병렬로 처리가 가능한 장애 감내(결함 감수)  속성들의 집합이다. RDD 를 만드는 방법에는 크게 두가지가 존재하는데, 하나는 존재하는 데이터를 병렬로 처리하는 것이고, 다른 하나는 외부 Storage, input 으로 부터 dataset 을 참조하는 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Internal Collection → RDD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaSparkContext&lt;/code&gt; 의 기능 중 하나인 &lt;em&gt;pararellize&lt;/em&gt; 를 사용하면 기존의 집합을 병렬적으로 처리하여 RDD 생성이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;List data 를 RDD 로 만드는 과정(parallelize)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;PARTITION : Spark application 이 task 를 수행하는 단위로서 cluster 를 나누어 사용하는 단위이다. 보통 하나의 CPU 당 2~4 개의 partition 이 존재한다. 만약 partition 이 지정되지 않았다면 Spark 가 자동으로 할당하지만 다음과 같이 임의로 partition 을 할당할 수도 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;sc.parallelize(data, 10)&lt;/code&gt;← 10개의 partition.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;External Dataset → RDD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaSparkContext&lt;/code&gt; 의 &lt;em&gt;textfile&lt;/em&gt; 을 사용하면 외부 dataset 을 RDD 로 생성이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Text file 을 RDD 로 만드는 과정&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Local 에서 실행할 경우 파일은 local filesystem 내에서 접근이 가능해야 한다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Partition 의 경우 textfile method 를 사용하면 input file 의 한 block 마다 partition 이 생성된다.(default)&lt;/p&gt;

&lt;p&gt;여러가지 다른 Format 의 파일&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wholeTextFiles : 디렉토리 단위로 읽어서 내부 파일들까지 모두 읽는다&lt;/li&gt;
  &lt;li&gt;sequenceFile : Key 와 Value 를 가지고 읽는다.&lt;/li&gt;
  &lt;li&gt;hadoopRDD : Hadoop 의 inputFormat 을 읽는다.&lt;/li&gt;
  &lt;li&gt;JavaRDD.saveAsObjectFile : RDD 를 java Object 로 저장한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rdd-operation&quot;&gt;&lt;strong&gt;RDD OPERATION&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Transformation : lazy 하게 동작하여 실제로는 값을 변경하지 않는 예약작업&lt;/p&gt;

&lt;p&gt;Action : Task 를 실제로 실행하게 되는 작업&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineLengths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineLengths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 은 transformation 이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 는 action 이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 가 실행되는 시점에서 spark 는 partition 을 실행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 을 실행하게 한다.&lt;/p&gt;

&lt;p&gt;만약 위의 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lineLengths&lt;/code&gt; 를 메모리에 저장하여 한번 실행 후 다시 재사용 하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;lineLengths.persist(StorageLevel.MEMORY_ONLY());&lt;/code&gt; 코드를 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lambda function usage&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetLength&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;JavaRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineLengths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineLengths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Spark & Java Application Local 설정</title>
   <link href="jgtonys.github.io/bigdata/2019/05/12/spark-local-setting/"/>
   <updated>2019-05-12T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/12/spark-local-setting</id>
   <content type="html">&lt;h2 id=&quot;spark-로컬-환경-구성&quot;&gt;&lt;strong&gt;Spark 로컬 환경 구성&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;본 포스트는 Spark 와 Java Application 을 이용한 Structured Streaming 구현을 목표로 한다. 방대한 양의 빅데이터가 실시간으로 들어오는 상황에서 database의 관리를 batch processing 이 아닌, streaming 으로 처리하기 위함이다. 그 첫번째 과정으로 로컬 환경을 구성하여 테스트 해 본다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;spark-local-setting&quot;&gt;&lt;strong&gt;SPARK LOCAL SETTING&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;local spark settings, java application settings&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;requirement&quot;&gt;&lt;strong&gt;REQUIREMENT&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Spark, Eclipse(Maven)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-maven&quot;&gt;&lt;strong&gt;WHAT IS MAVEN&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;개발 프로젝트 시 나타나는 많은 의존성 라이브러리들을 관리해 주는 툴&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;또한 MAVEN 은 사용할 라이브러리에 필요한 다른 의존성 라이브러리들을 자동으로 다운로드하여 개발 환경에 셋팅할 수 있도록 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;maven-installation&quot;&gt;&lt;strong&gt;MAVEN INSTALLATION&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Eclipse 를 설치하게 되면 자동으로 설치된다. (따로 설치할 필요 없음)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;maven-lifecycle&quot;&gt;&lt;strong&gt;MAVEN LIFECYCLE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;메이븐은 프로젝트 생성에 필요한 단계(phases)들을 Build Lifecycle이라 정의하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;clean,&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; 세가지로 표준 정의한다. Lifecycle은 Build Phase 들로 구성되며 일련의 순서를 갖는다. phase 는 실행단위로서 goal과 바인딩된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702602-6189b780-7699-11e9-9b1a-e4d3c3dbf3fa.png&quot; alt=&quot;maven_lifecycle-acf99801-30f0-475c-b462-f9997ee6f0ae&quot; /&gt;&lt;/p&gt;

&lt;p&gt;build default lifecycle&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clean : 빌드 시 생성되었던 산출물을 삭제
    &lt;ol&gt;
      &lt;li&gt;pre-clean : clean 작업 전에 사전작업&lt;/li&gt;
      &lt;li&gt;clean : 이전 빌드에서 생성된 모든 파일 삭제&lt;/li&gt;
      &lt;li&gt;post-clean : 사후작업&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;default : 프로젝트 배포절차, 패키지 타입별로 다르게 정의됌
    &lt;ol&gt;
      &lt;li&gt;validate : 프로젝트 상태 점검, 빌드에 필요한 정보 존재유무 체크&lt;/li&gt;
      &lt;li&gt;initialize : 빌드 상태를 초기화, 속성 설정, 작업 디렉터리 생성&lt;/li&gt;
      &lt;li&gt;generate-sources : 컴파일에 필요한 소스 생성&lt;/li&gt;
      &lt;li&gt;process-sources : 소스코드를 처리&lt;/li&gt;
      &lt;li&gt;generate-resources : 패키지에 포함될 자원 생성&lt;/li&gt;
      &lt;li&gt;compile : 프로젝트의 소스코드를 컴파일&lt;/li&gt;
      &lt;li&gt;process-classes : 컴파일 후 후처리&lt;/li&gt;
      &lt;li&gt;generate-test-source : 테스트를 위한 소스 코드를 생성&lt;/li&gt;
      &lt;li&gt;process-test-source : 테스트 소스코드를 처리&lt;/li&gt;
      &lt;li&gt;generate-test-resources : 테스팅을 위한 자원 생성&lt;/li&gt;
      &lt;li&gt;process-test-resources : 테스트 대상 디렉터리에 자원을 복사하고 가공&lt;/li&gt;
      &lt;li&gt;test-compile : 테스트 코드를 컴파일&lt;/li&gt;
      &lt;li&gt;process-test-classes : 컴파일 후 후처리&lt;/li&gt;
      &lt;li&gt;test : 단위 테스트 프레임워크를 이용해 테스트 수행&lt;/li&gt;
      &lt;li&gt;prepare-package : 패키지 생성 전 사전작업&lt;/li&gt;
      &lt;li&gt;package : 개발자가 선택한 war, jar 등의 패키징 수행&lt;/li&gt;
      &lt;li&gt;pre-integration-test : 통합테스팅 전 사전작업&lt;/li&gt;
      &lt;li&gt;integration-test : 통합테스트&lt;/li&gt;
      &lt;li&gt;post-integration : 통합테스팅 후 사후작업&lt;/li&gt;
      &lt;li&gt;verify : 패키지가 품질 기준에 적합한지 검사&lt;/li&gt;
      &lt;li&gt;install : 패키지를 로컬 저장소에 설치&lt;/li&gt;
      &lt;li&gt;deploy : 패키지를 원격 저장소에 배포&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;site : 프로젝트 문서화 절차
    &lt;ol&gt;
      &lt;li&gt;pre-site : 사전작업&lt;/li&gt;
      &lt;li&gt;site : 사이트문서 생성&lt;/li&gt;
      &lt;li&gt;post-site : 사후작업 및 배포 전 사전작업&lt;/li&gt;
      &lt;li&gt;site-deploy : 생성된 문서를 웹 서버에 배포&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dependency-pomxml&quot;&gt;&lt;strong&gt;DEPENDENCY (POM.XML)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;의존성에 대한 정보는 POM.XML에 저장된다. 이 정의에 의해서 MAVEN 은 자동으로 repository 를 검색하고 필요한 library 를 자동으로 추가해준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;마치 npm 의 package.json 같은 역할&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;groupid&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;projectid&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.8.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/code&gt; : 프로젝트의 패키지 명칭&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/code&gt; : artifact 이름, groupId 내에서 유일해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; : artifact 의 현재버전 ex. 1.0-SNAPSHOT&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;&lt;/code&gt; : 어플리케이션 명칭&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/code&gt; : 패키징 유형(jar, war 등)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; : artifact가 배포될 저장소 정보와 설정&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;parent&amp;gt;&lt;/code&gt; : 프로젝트의 계층 정보&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; : 의존성 처리에 대한 기본 설정 영역&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; : 의존성 정의 영역&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/code&gt; : 이거 안쓰면 공식 maven 저장소를 활용하지만, 사용하면 거기 저장소를 사용&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;build&amp;gt;&lt;/code&gt; : 빌드에 사용할 플러그인 목록을 나열&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;reporting&amp;gt;&lt;/code&gt; : 리포팅에 사용할 플러그인 목록을 나열&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; : 보기좋게 관리가능, 보통 버전에 많이 쓴다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- properties 에 이렇게 추가하면 --&amp;gt;
  &amp;lt;spring-version&amp;gt;4.3.3.RELEASE&amp;lt;/spring-version&amp;gt;

&amp;lt;!-- dependencies 에 이렇게 쓸수 있다. --&amp;gt;
  &amp;lt;version&amp;gt;${spring-version}&amp;lt;/version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TEST STRUCTURE&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The Basics --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Build Settings --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;reporting&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/reporting&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- More Project Information --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;inceptionYear&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/inceptionYear&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;licenses&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/licenses&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;organization&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/organization&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;developers&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/developers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;contributors&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contributors&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Environment Settings --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;issueManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/issueManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ciManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ciManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;mailingLists&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mailingLists&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;scm&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scm&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;prerequisites&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prerequisites&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702603-6189b780-7699-11e9-9511-8af5e8f600ba.png&quot; alt=&quot;pom_xml_example-b5060146-b06e-47eb-b2ac-0a6ed1c21c45&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.test.spark&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;testSparkApplication&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;wordCounting&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.spark&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spark-core_2.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.spark&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spark-sql_2.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven.compiler-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  					&lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  					&lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
  				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
  			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;build&quot;&gt;&lt;strong&gt;BUILD&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;/src/main/java 에 패키지를 생성하고 예제 java 파일을 생성한다.&lt;/p&gt;

&lt;p&gt;그리고 maven 을 빌드해서 tar 파일을 생성해보자&lt;/p&gt;

&lt;p&gt;example ‘&lt;a href=&quot;http://wordcounting.java&quot;&gt;wordcounting.java&lt;/a&gt;’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702889-eb398500-7699-11e9-94b5-8da52fc63e02.png&quot; alt=&quot;3-364fd36b-cc31-4064-a0ee-77848e972f84&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;maven build&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702890-ebd21b80-7699-11e9-9c80-5792a5deb2d3.png&quot; alt=&quot;4-9afccd89-38a2-44d2-afb6-9d9accda295b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;maven build configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702892-ebd21b80-7699-11e9-8126-6a08192740d3.png&quot; alt=&quot;5-be3ab936-7b11-467d-b272-1a976616d02a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;build confirmation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 BUILD SUCCESS 가 나오면 성공이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702894-ebd21b80-7699-11e9-99e7-d707d80f8b65.png&quot; alt=&quot;6-3caf4958-3e70-4549-8172-15dc72b21e8a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spark-tar-file-testing&quot;&gt;&lt;strong&gt;SPARK .tar FILE TESTING&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;서버의 spark 가 설치되어 있는 폴더로 이동하여&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/spark-submit —class 클래스이름 jar파일 분석할md파일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702895-ebd21b80-7699-11e9-9bbe-8c994daef59d.png&quot; alt=&quot;7-975cefcf-30c5-4bb7-864b-40d9103b28b2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 적으면 동작한다. 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702896-ec6ab200-7699-11e9-9c27-8664443248d5.png&quot; alt=&quot;9-2ab6da5d-903f-41b2-972e-a3d3f29ebd68&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reference&quot;&gt;&lt;strong&gt;REFERENCE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/KangDognhyun/2apache-spark&quot;&gt;https://www.slideshare.net/KangDognhyun/2apache-spark&lt;/a&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://www.slideshare.net/KangDognhyun/2apache-spark')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;2.apache spark 실습&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;강동현 2016-12-26 1 Apache Spark 실습 &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://www.slideshare.net/KangDognhyun/2apache-spark&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://cdn.slidesharecdn.com/ss_thumbnails/2-161226003957-thumbnail-4.jpg?cb=1482712886);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-submit-application&quot;&gt;&lt;strong&gt;HOW TO SUBMIT APPLICATION&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Standalone Document&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spark.apache.org/docs/latest/spark-standalone.html&quot;&gt;Spark Standalone Mode - Spark 2.4.0 Documentation&lt;/a&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://spark.apache.org/docs/latest/spark-standalone.html')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Spark Standalone Mode - Spark 2.4.3 Documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;In addition to running on the Mesos or YARN cluster managers, Spark also provides a simple standalone deploy mode. You can launch a standalone cluster either manually, by starting a master and workers by hand, or use our provided launch scripts. It is also possible to run these daemons on a single machine for testing.&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://spark.apache.org/docs/latest/spark-standalone.html&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://spark.apache.org/docs/latest/img/spark-logo-hd.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Standalone 으로 cluster 를 실행한다**&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin/start-master.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702898-ec6ab200-7699-11e9-9ad4-e887194a1a25.png&quot; alt=&quot;10-40524bf1-6704-46b1-9815-27be15b1287d&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 cluster 실행에 성공하면 기본적으로 &lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt; 에서 master 의 web ui 를 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702899-ec6ab200-7699-11e9-9f1b-60c830ea0e41.png&quot; alt=&quot;11-1c46299b-3cbe-4fcc-ad16-d9150cb2542f&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아직 실행중인 worker 나 application 이 없는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;위에서 만든 wordcounting application 을 배포하려면 spark가 설치된 폴더에서&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/spark-submit --master spark://computername:7077 --class javaclass something.jar somewhat.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 실행한다. 이 명령은 실행된 cluster 에 application 을 연결하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;—master spark://computername:7077&lt;/code&gt; 옵션으로 연결시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Submitting Application Reference&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spark.apache.org/docs/latest/submitting-applications.html&quot;&gt;Submitting Applications - Spark 2.4.0 Documentation&lt;/a&gt;&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://spark.apache.org/docs/latest/submitting-applications.html')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Submitting Applications - Spark 2.4.3 Documentation&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;The spark-submit script in Spark’s bin directory is used to launch applications on a cluster. It can use all of Spark’s supported cluster managers through a uniform interface so you don’t have to configure your application especially for each one.&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://spark.apache.org/docs/latest/submitting-applications.html&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://spark.apache.org/docs/latest/img/spark-logo-hd.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;Running application이 master 에서 인식된 모습&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702605-6189b780-7699-11e9-8c38-a1c3748c448f.png&quot; alt=&quot;spark_master_window1-169d17e3-ab21-4bc0-8ae3-e29754fa5a75&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Terminal에서 application 을 종료하였을 때 인식된 모습&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702607-62224e00-7699-11e9-8815-ebc882318241.png&quot; alt=&quot;spark_master_window2-ebf0c6e4-d3d4-41a4-ac46-c15ace879f0c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Terminal 에서 application 을 종료하였을 때 인식된 모습&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-set-workers&quot;&gt;&lt;strong&gt;HOW TO SET WORKERS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;순서는 다음과 같다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클러스터 할당&lt;/li&gt;
  &lt;li&gt;클러스터에 워커 할당&lt;/li&gt;
  &lt;li&gt;어플리케이션 시작&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Commands&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin/start-master.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./sbin/start-slave.sh &amp;lt;master-url:port&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/spark-submit --master &amp;lt;Spark-Master URL&amp;gt; --class &amp;lt;Package&amp;gt;.&amp;lt;Class&amp;gt; &amp;lt;Example&amp;gt;.jar&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Real Code&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./sbin/start-master.sh
./sbin/start-slave.sh jungyu:7077
bin/spark-submit --master spark://jungyu:7077 --class testSparkApplication.wordCounting testcase/testSparkApplication-0.0.1-SNAPSHOT.jar testcase/test.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;할당된 worker 에는 default 값으로 core 와 memory 가 할당된다.&lt;/p&gt;

&lt;p&gt;만약 이를 변경하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/conf/spark-env.sh&lt;/code&gt; 파일에 다음과 같은 줄을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export SPARK_WORKER_INSTANCES=2
export SPARK_WORKER_MEMORY=1024m
export SPARK_WORKER_CORES=4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Worker 2개, 각각 4개의 Core 및 1G Memory 가 나타난다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702900-ed034880-7699-11e9-96b4-b9bf555edc7b.png&quot; alt=&quot;12-4610d968-1879-4070-8bfd-49f769a3f4a4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57702903-ed034880-7699-11e9-9b15-9bde5eb0a77e.png&quot; alt=&quot;13-863eaf20-0309-4df6-8f7a-828877edfb8b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;log-숨기기&quot;&gt;&lt;strong&gt;LOG 숨기기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;터미널에서 stdout 을 확인해야 하는데, 자꾸 다른 로그들이 겹쳐 나와서 보기가 힘든 경우가 있다. 이 모든 출력되는 로그들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/conf/log4j.properties&lt;/code&gt; 에  설정이 되어있다. 여기에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;log4j.rootCategory=INFO, console&lt;/code&gt; 부분을 &lt;code class=&quot;highlighter-rouge&quot;&gt;log4j.rootCategory=ERROR, console&lt;/code&gt; 로 바꾸어 주면 ERROR 에 대한 로그만 출력되어 편리하다.&lt;/p&gt;

&lt;p&gt;아래는 설정 영상이다.&lt;/p&gt;

&lt;script id=&quot;asciicast-R3b1kV4sP3v0YhOnfpk9lO2eB&quot; src=&quot;https://asciinema.org/a/R3b1kV4sP3v0YhOnfpk9lO2eB.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>텍스트마이닝: Scraping 기초 지식</title>
   <link href="jgtonys.github.io/bigdata/2019/05/10/textmining2/"/>
   <updated>2019-05-10T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/10/textmining2</id>
   <content type="html">&lt;h2 id=&quot;텍스트데이터-수집-방법&quot;&gt;&lt;strong&gt;텍스트(데이터) 수집 방법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;python을 사용하여 데이터를 크롤링하는 방법을 배운다. 본격적으로 코드에 대해 언급하기 전에 알아야 할 인코딩이나 환경에 대하여 먼저 서술한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;(사실 시험대비용)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;인코딩-방식&quot;&gt;&lt;strong&gt;인코딩 방식&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ASCII : 최초의 문자열 인코딩 방식으로 7bit으로 구성되어 128개 문자를 표현한다. 일본어나 중국어 등 다른 언어의 표현이 불가능하여 후에 다른 언어 지원을 위해 만들어진 인코딩이 &lt;em&gt;ANSI&lt;/em&gt; 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ANSI : ASCII의 확장판으로 8bit로 구성되어 ASCII에서 1bit 를 추가해 여기에 다른 언어 문자를 표현했다. 그러나 새로 추가된 128개 문자로는 모든 언어의 표현이 불가능하여 CodePage 라는 개념이 탄생했다. 영어가 아닌 다른 언어를 사용할 경우에는 Code Page 를 동일하게 맞춰 주어야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;CodePage : 각 언어별로 Code 를 주고 Code 마다 다른 문자열 표를 의미하도록 약속하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;EUC-KR : 한글 지원을 위해 유닉스 계열에서 나온 완성형 코드 조합이다. 한국에서 ANSI를 확장한 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;완성형 코드란 완성된 문자 하나하나 마다 코드 번호를 부여하는 것이고 반대 개념으로 조합형 코드가 있다. 조합형 코드는 자음과 모음으로 나누어 초성 중성 종성을 조합하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CP949 (Code Page 949) : 한글 지원을 위해 윈도우즈 계열에서 나온 확장 완성형 코드 조합이다. EUC-KR 이 2byte로 표현할 수 있는 문자의 수에 한계가 있어 확장하여 만든 것이다. 949는 페이지 번호를 의미하고 한국을 의미한다. 기본적으로 EUC-KR과 호환되며 마이크로소프트가 만들었다고 MS949라고도 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UTF-8 : 유니코드를 위한 가변 길이 문자 인코딩(멀티 바이트) 방식이다. ANSI의 Code Page 를 이용하는 방식(단점)을 보완하기 위해 만들어졌다. 하나의 character set 에 거의 모든 문자를 넣을 수 있다. 첫 128자는 ASCII 코드 값으로 ASNI와 동일하다. 또한 영어를 사용할 경우에는 1byte 만 사용한다. 한국,중국,일본 등 동아시아권 언어는 3byte 이상을 사용하고 이때 UTF-8 은 비효율적일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;멀티바이트란 표현해야 하는 문자에 따라 글자 크기를 가변으로 변경해서 사용하는 것이다. ANSI는 고정바이트로 최대 256자까지만 표현이 가능하지만, UTF-8은 최대 1112064자까지 표현이 가능하다. (더 많은 문자 표현 가능)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UTF-16 : 16bit 기반으로 저장하는 UTF-8의 변형으로 한글을 UTF-16으로 저장하면 2byte가 된다. (UTF-8에서는 3byte) 그러나 때때로 2byte 이상을 사용하기 때문에 용량에 이점이 있다고 볼수는 없고, ANSI와 호환이 안되거나 복잡하여 문제가 있다. 옛날 한자나 한글 고어를 표현할 수 있다. 참고로 UTF-32는 모든 문자를 4byte로 인코딩한다(매우 비효율적).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UNICODE : 전 세계의 문자를 일관되게 표현할 수 있도록 고안된 코드 조합으로 전 세계 모든 문자를 2byte 숫자로 1:1 매핑시켰다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;UTF-8과 유니코드는 엄연히 다르다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python 문자열 다루기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;string 을 다루는 것은 나중에 stemming 이나 lemmitization 에 활용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자열 결합(concatenation) : ‘+’&lt;/li&gt;
  &lt;li&gt;문자열 반복 : ‘*’&lt;/li&gt;
  &lt;li&gt;타입 변환 : str(),int()&lt;/li&gt;
  &lt;li&gt;인코딩 : name(), lookup()&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unicodedata&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicodedata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'LATIN SMALL LETTER A’&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; snowman = '&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;u2603&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; unicodedata.lookup(unicodedata.name(snowman)) '&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;☃’&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snowman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;문자열 변형 : split(), replace()&lt;/li&gt;
  &lt;li&gt;정규표현식 : 복잡한 문자열을 처리할 때 사용. 메타문자 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;의존 구문 분석(Dependency Parse)이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;각 단어들이 다른 단어의 요소에 의해 의존적으로 영향 받는 상태를 분석하는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;메타문자[] 란 문자 클래스를 의미한다. 예를 들어, [abc]라면 이 표현식의 의미는 “a,b,c중 한 개의 문자 와 매치”이다. [a-c] 는 문자 사이의 범위를 이용한다. [^0-9] 는 숫자가 아닌 문자를 의미한다(반대).&lt;/p&gt;

&lt;p&gt;자주 사용하는 문자 클래스는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\d - 숫자와 매치, [0-9]와 동일한 표현식&lt;/li&gt;
  &lt;li&gt;\D - 숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식&lt;/li&gt;
  &lt;li&gt;\s - whitespace 문자와 매치, [ \t\n\r\f\v]와 동일 – 맨앞의 빈칸은 공백문자(space)를 의미&lt;/li&gt;
  &lt;li&gt;\S - whitespace 문자가 아닌 것과 매치 – [^\t\n\r\f\v]와 동일&lt;/li&gt;
  &lt;li&gt;\w - 문자+숫자(alphanumeric)와 매치 – [a-zA-Z0-9_]와 동일&lt;/li&gt;
  &lt;li&gt;\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치 – [^a-zA-Z0-9_]와 동일&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dot(.)은 줄바꿈 문자 \n 을 제외한 모든 문자를 의미한다. 예를 들어 a.b는 a+모든문자+b 이다. 만약 a[.]b 라면 문자 그대로 a.b 만을 일치시킨다.&lt;/p&gt;

&lt;p&gt;반복 ({m,n}, ?)은 m부터 n까지 반복하는 것을 의미한다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;– {3,}처럼 사용하면 반복 횟수가 3이상인 경우
– {,3}처럼 사용하면 반복횟수가 3이하인 것 – 생략된 m은 0과 동일
– 생략된 n은 무한대(2억개미만)의 의미
– {1,}은 +와 동일하며 {0,}은 *와 동일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;python re 모듈 : 정규표현식을 python 에서 사용할 수 있도록 해준다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[a-z]+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# match() : 문자열의 처음부터 정규식과 매치되는지 조사
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3 python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#조건에 부합하지 않으므로 리턴값 NONE
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;match() : 문자열의 처음부터 정규식과 매치되는지 조사&lt;/li&gt;
  &lt;li&gt;search() : 문자열 전체를 검색하여 정규식과 매치되는지 조사&lt;/li&gt;
  &lt;li&gt;findall() : 정규식과 매치되는 모든 문자열(substring)을 리스트로 리턴&lt;/li&gt;
  &lt;li&gt;finditer() : 정규식과 매치되는 모든 문자열(substring)을 iterator 객체로 리턴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고로 python 의 자료형 중 list 는 변경이 가능하고, tuple은 불변이다. dict 는 key와 value 로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698513-becd3b00-7690-11e9-8855-bc3e893ffc30.jpg&quot; alt=&quot;tuple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;웹-데이터의-종류&quot;&gt;&lt;strong&gt;웹 데이터의 종류&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;바이너리 데이터 : 2진수로 표현된 데이터&lt;/p&gt;

&lt;p&gt;텍스트 데이터 : 문장이나 글자로 구성된 데이터. 텍스트 데이터도 바이너리 데이터이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;수집의 3단계&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;대상 선정 : 목적 데이터의 위치 파악&lt;/li&gt;
  &lt;li&gt;데이터 수집 : 대상 데이터 수집(데이터 수집 자동화)&lt;/li&gt;
  &lt;li&gt;데이터 정리 : 수집된 데이터 정리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;수집할 때 유의사항으로는 저작권, 리소스의 과다, 업무방해, API 규칙 준수 가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;스크래핑크롤링&quot;&gt;&lt;strong&gt;스크래핑/크롤링&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;스크래핑이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 사이트에 있는 특정 정보를 추출하는 기술이다. 데이터베이스에 저장하기 위해 데이터 가공이 필요하고, 사이트의 구조를 분석해야 한다. 따라서 스크래핑은 데이터 추출 + 데이터 구조 분석 으로 정의된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;크롤링이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 사이트의 링크를 타고 돌며 데이터를 긁어 저장하는 기술이다. 크롤러 또는 스파이더라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스크래핑 및 크롤링을 하기 위해서는 웹의 구조를 분석해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http&quot;&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Hyper Text Transfer Protocol로 하이퍼텍스트 뿐만 아니라 이미지나 동영상, 음성 등을 전송하는데 사용된다. 웹 브라우저는 HTTP 사용자 에이전트 중 하나이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698512-be34a480-7690-11e9-8249-2df46822c80a.jpg&quot; alt=&quot;http&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP request의 구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698511-be34a480-7690-11e9-922f-5834ae711bd6.jpg&quot; alt=&quot;request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698509-be34a480-7690-11e9-886c-cf92ce6e0521.jpg&quot; alt=&quot;request2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Request Header 는 부가적인 정보를 서버에 제공할 때 name 과 data 쌍으로 표현한다. 부가정보의 성격을 가지며 HTTP 1.1버전에서는 host에 대한 정보가 필수적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP response의 구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698508-bd9c0e00-7690-11e9-98eb-a9627f0728bb.jpg&quot; alt=&quot;response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57698507-bd9c0e00-7690-11e9-8b8f-5ee81b48e852.jpg&quot; alt=&quot;response2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Response Header 도 마찬가지로 name 과 data의 쌍으로 표현되며 주요 header name으로는 다음과 같은 것들이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;P3P (Platform for Privacy Preference)&lt;/li&gt;
  &lt;li&gt;Content-Type: - MIME type of content in response body&lt;/li&gt;
  &lt;li&gt;Content-Length: - Length of content in response body&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python 웹 클라이언트 라이브러리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;urllib 은 python 에서 url 을 통해 데이터를 가져오는 기능을 제공한다. httplib 은 get, post 이외의 방식으로 요청을 보내거나 시간을 지연시키는 기능이 필요할때, http 프로토콜 요청의 저수준 세밀 기능이 필요할 때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;urlparse 는 url을 분해하고 조립하고 변경처리를 하게 해준다. 말 그대로 url parsing&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.parse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;html-parsing&quot;&gt;&lt;strong&gt;HTML Parsing&lt;/strong&gt;&lt;/h2&gt;
</content>
 </entry>
 
 <entry>
   <title>텍스트마이닝: 전반적인 지식</title>
   <link href="jgtonys.github.io/bigdata/2019/05/10/textmining1/"/>
   <updated>2019-05-10T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/05/10/textmining1</id>
   <content type="html">&lt;h2 id=&quot;텍스트마이닝이란&quot;&gt;&lt;strong&gt;텍스트마이닝이란?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;텍스트 정보처리라고도 불리우며 구조화되지 않은(unstructured) 대규모 텍스트 집합에서 새로운 지식 또는 의미를 발견하는 과정이다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57694133-e7036c80-7685-11e9-9f53-42270604bb66.jpg&quot; alt=&quot;textmining_review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;구조화되지-않은-데이터&quot;&gt;&lt;strong&gt;구조화되지 않은 데이터&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Unstructured Data 는 내부 구조는 있으나, 미리 정의된 데이터 모델이나 스키마에 의해 구조화 되지 못한 데이터이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 데이터들은 텍스트일수도 있고 아닐수도 있으며 인간에 의해 만들어졌을 수도 있고, 기계가 자동으로 만들었을 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;또한 이 데이터들은 NoSQL 같은 non-relational db 에 저장될 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unstructured data has internal structure but is not structured via pre-defined data models or schema. It may be textual or non-textual, and human- or machine-generated. It may also be stored within a non-relational database like NoSQL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인간이 만든 unstructured data 의 예시&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;텍스트 파일&lt;/li&gt;
  &lt;li&gt;이메일&lt;/li&gt;
  &lt;li&gt;Social Media&lt;/li&gt;
  &lt;li&gt;웹사이트&lt;/li&gt;
  &lt;li&gt;Mobile data&lt;/li&gt;
  &lt;li&gt;Communications&lt;/li&gt;
  &lt;li&gt;Media&lt;/li&gt;
  &lt;li&gt;Business applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;기계가 만든 unstructured data 의 예시&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Satellite imagery: Weather data, land forms, military movements.&lt;/li&gt;
  &lt;li&gt;Scientific data: Oil and gas exploration, space exploration, seismic imagery, atmospheric data.&lt;/li&gt;
  &lt;li&gt;Digital surveillance: Surveillance photos and video.&lt;/li&gt;
  &lt;li&gt;Sensor data: Traffic, weather, oceanographic sensors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;semi-structured-data&quot;&gt;&lt;strong&gt;Semi-Structured data&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;내부 태그들과 마킹들이 별개의 데이터 요소를 식별할 수 있도록 하는 데이터이다. 주로 정보를 그룹화하고 계층화한다.&lt;/p&gt;

&lt;p&gt;Ex) XML, JSON&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인간과 기계가 읽을 수 있는 형식으로 인코딩 규칙을 적용한 문서이다. 태그에 의해 구조가 정의되며 사용이 매우 유연하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Set of document encoding rules that defines a human- and machine-readable format. Its tag-driven structure is highly flexible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트 객체를 나타낼 때 사용한다. name/value 로 이루어지거나 배열의 형태를 띌 수도 있으며 언어간에 구조 변환이 가능하다. 웹과 서버 사이에서 데이터를 주고받는데 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript Object Notation. Name/value pairs (or object, hash table, etc.) and an
ordered value list (or array, sequence, list). Interchangeable structure among languages. Transmitting data between web applications and servers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텍스트-정보처리과정&quot;&gt;&lt;strong&gt;텍스트 정보처리과정&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;수행하고자 하는 목표 설정&lt;/li&gt;
  &lt;li&gt;(텍스트)데이터 수집&lt;/li&gt;
  &lt;li&gt;(텍스트)데이터 전처리: 데이터클리닝, 자연어처리&lt;/li&gt;
  &lt;li&gt;(텍스트)데이터 탐색&lt;/li&gt;
  &lt;li&gt;(텍스트)데이터 분석: 통계분석(회귀분석), 오차(기계학습)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텍스트-마이닝의-과정&quot;&gt;&lt;strong&gt;텍스트 마이닝의 과정&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57694129-e66ad600-7685-11e9-8681-47db038c177e.jpg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tm-vs-dm&quot;&gt;&lt;strong&gt;TM vs DM&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57694130-e66ad600-7685-11e9-905c-8212b2dd0ec6.jpg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Machine Learning 의 관점에서는 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Mining&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터셋 식별 (Identify data sets)&lt;/li&gt;
  &lt;li&gt;특징 선택 (Select features)&lt;/li&gt;
  &lt;li&gt;데이터 준비 (Prepare data)&lt;/li&gt;
  &lt;li&gt;분석 (Analyze distribution)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Text Mining&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문서들을 식별 (Identify documents)&lt;/li&gt;
  &lt;li&gt;특징 추출 (Extract features)&lt;/li&gt;
  &lt;li&gt;알고리즘으로 특징 선택 (Select features by algorithm)&lt;/li&gt;
  &lt;li&gt;데이터 준비 (Prepare data)&lt;/li&gt;
  &lt;li&gt;분석 (Analyze distribution)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텍스트의-구조&quot;&gt;&lt;strong&gt;텍스트의 구조&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;텍스트는 먼저 문헌집합(Collection or Corpus)으로 이루어져 있다. 그리고 각각의 문헌 또는 문서(Document)는 문단(Paragraph)과 문장(Sentence)으로 이루어져 있다.&lt;/p&gt;

&lt;p&gt;문장의 구조는 다음과 같이 어절(Word phrase) -&amp;gt; 형태소(Morpheme) -&amp;gt; 음절(Syllable) -&amp;gt; 음소(Phoneme)로 쪼갤 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/57694132-e7036c80-7685-11e9-8e58-a169e597dfb0.jpg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;의존 구문 분석(Dependency Parse)이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;각 단어들이 다른 단어의 요소에 의해 의존적으로 영향 받는 상태를 분석하는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텍스트-분석&quot;&gt;&lt;strong&gt;텍스트 분석&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Natural Language Processing(NLP)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자연어 처리 NLP 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Corpus &amp;gt; Document &amp;gt; Paragraph &amp;gt; Sentence &amp;gt; Token&lt;/code&gt; 순서로 처리한다.&lt;/p&gt;

&lt;p&gt;토큰 레벨(Token Level)에서의 분석법으로는 Ontologies, Inexact Match, Regular Expression 을 사용하고 문서 레벨(Document Level)에서는 Classification, Clustering 을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;분석의 문제점(또는 어려운 점)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Access : 모든 소스가 통합되어 있지 않다. 각기 다른 저장소를 가지고 다른 어플리케이션에 존재한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Management : unstructured data 의 관리는 매우 부실하고, 처리가 필요하다. 또한 불필요 더미 데이터가 너무 많고 보안에 취약하다. 또 다양한 언어로 구성되어 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>깃헙 블로그 Docker에서 작업하기</title>
   <link href="jgtonys.github.io/blog/2019/04/25/docker-jekyll/"/>
   <updated>2019-04-25T00:00:00-05:00</updated>
   <id>jgtonys.github.io/blog/2019/04/25/docker-jekyll</id>
   <content type="html">&lt;h2 id=&quot;계기&quot;&gt;&lt;strong&gt;계기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;깃헙 블로그를 만들기 위해서는 로컬 PC에 ruby를 설치하고 jekyll 환경구성을 해야한다. 이전에 만들었을 때는 직접 다 로컬에 설치하고 구성하였으나 PC 포맷 후 그 작업을 다시 하려니 생각보다 신경쓸 일이 많아서, 저번에 구성해 놓았던 도커로 jekyll 을 구성하기로 하였다. 5분도 안되서 모든 환경 구성이 끝났고 몇가지 명령어만 익힌다면 쉽고 빠르게 블로그를 빌드할 수 있을 것 같다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;필자는 Mac에서 Docker for mac을 설치하여 사용하였고 만약 Mac에서 설치할 방법을 찾는다면 아래에서 간단하게 볼 수 있다.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://jgtonys.github.io/docker/2019/04/24/docker-install-mac/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Mac에 Docker 설치&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Docker 란? Docker란 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 거창하게 말하면 그렇지만 간단하게 말해서 많은 서버와 프로그램의 환경을 컨테이너로 추상화하여 사용자의 PC에 직접 설치하는 일 없이 가상환경으로 돌려주는 플랫폼을 의미한다. 최근의 많은 개발 작업들은 의존성 패키지들이 버전도 다양하여 환경 셋팅만 하루종일 걸리고 정작 실제 개발은 시작도 하지 못하고 지쳐버리는 현상이 나타나는데, 이 환경 셋팅을 아주 간편하게 가상화하여 사용할 수 있는 녀석이다. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://jgtonys.github.io/docker/2019/04/24/docker-install-mac/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://user-images.githubusercontent.com/33674947/56813408-d1b1d400-6877-11e9-9b4f-893fcc6254c6.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;이제 구성한 순서에 따라서 단계별로 설명하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jekyll-docker-사용하기&quot;&gt;&lt;strong&gt;Jekyll-Docker 사용하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56785055-6b549380-682e-11e9-8145-a599d5f90b5b.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Docker가 설치되어 있고, 실행중이라면 터미널에서 다음 명령어를 쳐보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;명령어 설명&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run &lt;/code&gt; : 도커를 실행한다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt; : 도커 컨테이너 실행이 끝나면 컨테이너를 삭제한다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt; : Interactive Terminal 옵션으로 결과를 터미널에 출력한다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/jekyll&lt;/code&gt; : 도커 허브 이미지이다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt; : bash 로 실행한다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 과정에서 전에 설치한 이미지가 존재하지 않다면 다음과 같이 자동으로 설치 후 컨테이너로 진입하게 된다.&lt;/p&gt;

&lt;script id=&quot;asciicast-IlsHSmBLjbapntRmOzJMUwbJc&quot; src=&quot;https://asciinema.org/a/IlsHSmBLjbapntRmOzJMUwbJc.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;여기까지 완료되었다면 이제 도커 image 가 생성되었다. 명령어로 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56785054-6b549380-682e-11e9-93bf-4fd2f7305be0.jpg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;jekyll/jekyll 이미지가 생성된 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;만약 이미지를 잘못 설치해서 이미지를 지워야 하는 경우에는&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;image-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;으로 삭제가 가능하다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;개발-환경-설정&quot;&gt;&lt;strong&gt;개발 환경 설정&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;필자는 로컬에 이미 지킬 블로그의 구조가 생성되어 있다. 다만 빌드할 수 있는 환경이 PC가 바뀌면서 사라졌을 뿐이다.&lt;/p&gt;

&lt;p&gt;그러나 본 포스트에서는 처음부터 도커로 지킬 블로그를 만드는 과정을 설명하겠다.&lt;/p&gt;

&lt;p&gt;먼저 로컬에서 지킬 블로그 파일들이 저장될 폴더로 들어가자. 그 후 터미널에 다음과 같이 입력하자. (현재 로컬에 저장될 폴더의 절대 경로가 /test 라고 가정한다)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm \
--volume=&quot;/test:/srv/jekyll&quot; \
-p 4000:4000 \
-it jekyll/jekyll /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;명령어 설명&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--volume=&quot;/test:/srv/jekyll&quot;&lt;/code&gt; : 로컬과 지킬 컨테이너 사이에 폴더를 공유한다고 생각하면 쉽다. 로컬에서는 /test 폴더, 지킬 컨테이너에서는 /srv/jekyll 의 폴더를 동기화하여 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 4000:4000&lt;/code&gt; : 컨테이너의 특정 포트를 외부로 노출하는 명령어로 -p &lt;호스트 포트=&quot;&quot;&gt;:&lt;컨테이너 포트=&quot;&quot;&gt;의 형식으로 이루어진다. 지킬 컨테이너에서 serve 한 결과를 로컬 포트에서 확인할 수 있다.&lt;/컨테이너&gt;&lt;/호스트&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 명령어를 실행하면 로컬의 파일들이 지킬 컨테이너에서 보이게 된다(로컬에 아무것도 없다면 아무것도 없다). 여기에 새롭게 지킬 블로그를 만든다면 지킬 컨테이너 bash 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new .&lt;/code&gt; 를 입력하면 된다. 구조가 모두 만들어지면 로컬에 연결된 폴더에서도 파일들을 확인 할 수 있다.&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/sFM0J-8OTP4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;이렇게 하면 로컬에서 모든 파일 작업들을 진행하고 jekyll 명령어를 사용해야 할 때만 터미널에서 build 하고 serve 하면 로컬에서 모든 결과를 받아 볼 수 있다! 즉 로컬에는 ruby 며 jekyll 이며 설치하지 않고 개발환경을 구성하게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;추가-개발-환경&quot;&gt;&lt;strong&gt;추가 개발 환경&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;필자는 로컬에서 atom 에디터로 관리하고, 도커로 지킬을 빌드한다. 변경된 파일들을 로컬에서 터미널로 푸시하거나 gitkraken을 사용해서 푸시한다. 대부분 master에 푸시하지만, 커스텀 플러그인을 만들어서 붙이거나 하게 되면 다른 브랜치에 올린 뒤 master로 올려야 한다. 이 경우에 대한 포스트는 &lt;a href=&quot;#&quot;&gt;여기&lt;/a&gt;에서 확인 할 수 있다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mac에 Docker 설치</title>
   <link href="jgtonys.github.io/docker/2019/04/24/docker-install-mac/"/>
   <updated>2019-04-24T00:00:00-05:00</updated>
   <id>jgtonys.github.io/docker/2019/04/24/docker-install-mac</id>
   <content type="html">&lt;h2 id=&quot;docker-란&quot;&gt;&lt;strong&gt;Docker 란?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Docker란 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 거창하게 말하면 그렇지만 간단하게 말해서 많은 서버와 프로그램의 환경을 컨테이너로 추상화하여 사용자의 PC에 직접 설치하는 일 없이 가상환경으로 돌려주는 플랫폼을 의미한다. 최근의 많은 개발 작업들은 의존성 패키지들이 버전도 다양하여 환경 셋팅만 하루종일 걸리고 정작 실제 개발은 시작도 하지 못하고 지쳐버리는 현상이 나타나는데, 이 환경 셋팅을 아주 간편하게 가상화하여 사용할 수 있는 녀석이다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;설치 방법은 굉장히 간단하므로 쉽게 따라할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;docker-설치&quot;&gt;&lt;strong&gt;Docker 설치&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;영상은 공용 와이파이에서 다운로드해서 설치가 느리다..&lt;/em&gt;&lt;/p&gt;

&lt;script id=&quot;asciicast-2UQJqnVpnmsm2GSCQiAAIM1Hf&quot; src=&quot;https://asciinema.org/a/2UQJqnVpnmsm2GSCQiAAIM1Hf.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mac에서 Docker를 설치하려면 먼저 서버와 클라이언트를 설치해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클라이언트 설치&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트 설치는 터미널에서 다음과 같이 입력한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install Docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 모두 완료한 후 정상적으로 클라이언트가 설치되었는지 확인하기 위해 다음과 같이 입력한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 클라이언트가 설치되었다는 것을 확인할 수 있고, 서버는 아직 설치되지 않았음을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56633253-52b27500-6698-11e9-8ba3-bbead7e8b52b.jpg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 설치&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버를 설치하기 위해 &lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot;&gt;여기&lt;/a&gt; 에서 설치 파일을 다운로드 한다.&lt;/p&gt;

&lt;p&gt;간단한 회원가입 후 다음과 같이 다운로드 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56633121-e0da2b80-6697-11e9-998c-ae71286cf5fa.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;dmg 파일이 정상적으로 다운로드 되면, 실행시킨 후 application 폴더로 옮겨서 바로가기를 만든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56782596-c4b6c580-6822-11e9-8fe0-cc5f6e8f3bcc.jpg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 후 실행시키면 서버가 켜진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56782597-c4b6c580-6822-11e9-86e0-407336ca3be2.jpg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버가 켜졌는지 확인하기 위해 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker version&lt;/code&gt; 을 확인해 보면 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56782598-c4b6c580-6822-11e9-9c02-b8db73c7474c.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이렇게 맥에서 Docker의 설치가 끝났다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>저사양 삼성노트북을 맥으로</title>
   <link href="jgtonys.github.io/hackintosh/2019/04/20/laptop-to-mac/"/>
   <updated>2019-04-20T00:00:00-05:00</updated>
   <id>jgtonys.github.io/hackintosh/2019/04/20/laptop-to-mac</id>
   <content type="html">&lt;h2 id=&quot;hackintosh-설치-계기&quot;&gt;&lt;strong&gt;Hackintosh 설치 계기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;맥을 쓰고 싶으나 맥을 쓰지 못하는 사람들이 항상 꿈꾸던 해킨토시에 도전했다. 필자는 윈도우에서 작업하는 것을 그렇게 좋아하지 않고 그래서 노트북에 리눅스 민트를 설치해서 유용하게 사용하고 있었다. 그러나 이 리눅스 OS 는 몇 가지 아주 큰 단점이 존재했는데 먼저 한국에서 대학생으로서 살아가는데 필요한 Office 들의 호환이 아주 좋지 않고, 무엇보다 카카오톡을 wine 으로 돌려야 하는데 이것마저 아주 버그가 심하다. 개발과 업무를 모두 만족시킬수 잇는 방법이 없을까 생각하다가 해킨토시를 설치하게 되었다. 생각보다 굉장히 어려운 작업이었고, 공부할 것도 많아서 고생을 좀 한 것 같다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56632205-a40c3580-6693-11e9-8e85-baee6b73b557.jpg&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;본 포스트는 설치 및 셋팅의 세세한 설명을 다루고 있지 않다. 알아야 할 자료가 너무나도 많고, 자세히 설명된 자료가 많기 때문에 효과적으로 공부하고 적용할 수 있는 방법을 제시한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;지금은 해킨토시의 안정화가 이루어졌지만 언제 오류가 발생할지 모르니 재빠르게 적어놓는다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;설치하기-전에&quot;&gt;&lt;strong&gt;설치하기 전에&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;맥은 원래 애플에서 소프트웨어를 만들 때 정확히 그에 맞는 하드웨어에 맞는 모습으로 만들어서 일반적인 아무 하드웨어에서나 돌아가지는 않는다. 애플에서 사용했던, 또는 호환 가능한 하드웨어에서만(주로 메인보드) 돌아간다는 것을 유의해야 한다. 필자의 노트북은 다행히도 다른 능력자분의 성공사례가 있었기에 시작하게 되었다.&lt;/p&gt;

&lt;p&gt;먼저 해야할 일들에 대해 간략하게 적어보겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;** 자신의 하드웨어 모델 인식 (데스크탑, 노트북)**&lt;/p&gt;

&lt;p&gt;자신의 메인보드가 해킨토시로 성공한 사례가 있는지 알아보아야 한다. 만약 아무도 성공하지 못한 보드라면, 이 단계에서 해킨토시를 포기하는 것을 추천한다. (뒤에 하는 작업들이 너무나 큰 스트레스를 유발하고도 안정화되지 못할 가능성이 있다.) 또한 노트북의 메인보드는 크기를 작게 하기 위해 기존의 모델에서 튜닝된 경우가 있다. 노트북은 메인보드가 어떤것이 들어갔는지 살펴보는 것보다 자신의 노트북 모델에서 성공한 사례가 있는지 알아보는것이 빠르다! 노트북 모델 성공사례가 있다면 CPU 나 그래픽 설정 등을 신경쓰지 않고 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 상용화되고 있는 대부분의 기가바이트, 아수스, MSI 등의 보드들은 서쪽의 능력자 분들이 성공시킨 사례가 굉장히 많다. 만약 자신의 메인보드로 누군가 성공했다는 것을 알게 되었다면 다음 단계로 진행하자.&lt;/p&gt;

&lt;p&gt;다음으로 CPU 와 그래픽카드를 알아보아야 한다. 지금 현재 대부분의 인텔 CPU는 몇가지 설정에 의해서 쉽게 인식된다. 인텔 CPU가 아니라면 이 역시 구글링을 통해 성공한 사례가 있는지 알아보자. 그래픽카드의 경우도 라데온의 경우 굉장히 native 하게 잡히는 설정들이 즐비한 것으로 알고 있고, GTX 그래픽의 경우에는 Mac OS High Sierra 까지는 web driver 를 통해 성공한 사례가 많이 나타나고 있다. 물론 인텔 내장그래픽 또한 성공사례가 많이 나타나고 있다.&lt;/p&gt;

&lt;p&gt;필자의 노트북은 &lt;code class=&quot;highlighter-rouge&quot;&gt;nt370r5e-a44s&lt;/code&gt; 이라는 모델이고, 사양은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CPU : Intel Core i3-3120M ivy bridge (Dual Core)
RAM : DDR3 8G (확장)
Graphic : Intel HD Graphics 4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다행히도 필자의 모델에서 성공한 사례를 찾아서 시작하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;성공 사례 검색은 다음 사이트에서 찾아보는 것이 좋다.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://x86.co.kr/mymac/2954551')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;삼성 NT370RSE-A44S(i3, 윈10+10.13.4)&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;삼성 NT370RSE-A44S에 윈10+10.13.4를 단일 하드에 듀얼부팅 방식으로 설치 성공하였습니다(Uefi 방식).와이파이(usb 사용, iptime)외에는 모든 기능 이상없이 사...&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://x86.co.kr/mymac/2954551&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://x86.co.kr/files/seopro/site_image.png?20190306195243);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://www.tonymacx86.com')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Home&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt; Today Apple released macOS 10.14.6 Supplemental Update, a major software update to macOS Mojave. Update any supported system using the built-in Software Update functionality through the System Preferences pane or by using the standalone installer available from Apple.com. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://www.tonymacx86.com&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://www.tonymacx86.com/images/tonymacx86-logo.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://www.insanelymac.com')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;InsanelyMac - InsanelyMac Forum&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt; The macOS Mojave 10.14.6 update improves the stability and reliability of your Mac, and is recommended for all users. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://www.insanelymac.com&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://www.insanelymac.com/forum/uploads/monthly_2019_06/macos_catalina.thumb.png.c6f8b2497e33530f4511ef394227ef9c.png);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;&lt;em&gt;여기에서 자신의 노트북 모델명으로 성공한 사례를 찾다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;EFI&lt;/code&gt; 나 설정파일들을 찾아냈다면 꼭 기억하거나 다운로드 받아놓자! 데스크탑의 경우에는 메인보드에 대한 파일, 그래픽 설정의 파일을 미리 받아 놓는 것을 추천한다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;여기까지 성공 확률을 확인하고 본격적으로 진행하기로 결심했다면 다음 단계로 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;공부하기&quot;&gt;&lt;strong&gt;공부하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;공부한다고 하니까 굉장히 질려하는 사람들이 있을텐데, 자신의 PC 를 해킨토시로 만들기 위해서는 귀찮고 어려워도 꼭 진행해야 하는 단계이다. 모든 내용을 다 알아야만 해킨토시를 성공하는 것은 아니지만, 설치 과정과 안정화 과정에서 진행되는 모든 오류들을 해결하기 위해서는 적어도 커뮤니티의 능력자분들이 말하는 내용을 이해할 수는 있어야 한다! 너무 성급하게 시작해서 돌이킬 수 없는 오류를 맞이하게 된다면, 소중한 PC 를 잃을 수도 있기 때문이다.&lt;/p&gt;

&lt;p&gt;일단 기본적으로 설명이 잘된, 한국어로 나타난, 필자가 본 자료들을 소개한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://x86.co.kr/tip/1066190&quot;&gt;기본 설명서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://x86.co.kr/tip/2557795&quot;&gt;보충 설명서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;생각보다 읽고 이해하는데 시간이 오래걸리기 때문에 대중교통을 이용하면서 1주일동안 공부했다. 대충 감이 오기 시작한다면 이제부터 뭔가 준비해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;설치-usb-만들기&quot;&gt;&lt;strong&gt;설치 USB 만들기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Mac OS 도 타 OS 설치때와 마찬가지로 설치 USB 를 만들어야 한다. 단 이 과정에서 자칫 잘못하면 오류가 나기(OS가 아주 예민) 쉽기 때문에 능력자 분들이 진행한 과정을 따라하는 것을 강력히 추천한다.&lt;/p&gt;

&lt;p&gt;기본적인 내용들을 숙지하고 있다면, 아마 USB 부팅에 많은 방법이 있다는 것을 알게 되었을 것이다. 가장 많이 소개되는 정석적인 방법은 가상환경 MAC 을 설치하고 OS 를 뜨는 방법일 텐데, 필자는 능력자 분이 만들어 놓은 고스트 파일을 사용하는 것을 선택했다. 왜냐면 CLOVER 부트로더 및 많은 필수 설정 파일들을 고스트 파일 안에 같이 넣어서 배포해 주시기 때문이다. 또한 USB 를 만들때 OS 를 어떤 버전으로 해야할 지 고민인 경우가 분명 나타나는데, 기존에 성공사례에서 어떤 버전으로 성공했는지를 확인하고 그 이미지를 사용해서 만드는 것을 추천한다. 현재 high sierra 가 대부분 즐비해 있고, 최신 버전인 mojave 의 성공사례가 나타나고 있다. 버전이 높다고 무조건 좋은 것은 아니며(오히려 오류가 가득가득할 수 있다) 해킨토시에서는 안정성을 우선적으로 생각해야 한다는 것을 명심하자.&lt;/p&gt;

&lt;p&gt;앞서 언급했듯, 필자는 &lt;a href=&quot;https://x86.co.kr&quot;&gt;x86&lt;/a&gt; 에 능력자분이 배포해주신 10.13.4 high sierra 고스트 이미지를 받아서 USB에 복원하였다. 복원법은 커뮤니티에도 나타나 있으며, 만약 찾기 어렵다면 추가적으로 &lt;a href=&quot;https://x86.co.kr/tip/2806727&quot;&gt;다음&lt;/a&gt; 사이트를 참고하자. 그림이 많이 나와있어서 쉽게 따라할 수 있다.&lt;/p&gt;

&lt;p&gt;다른 방법으로 이미지를 구해 설치 USB 를 만든다면 꼭 기본서를 참고하고 구글링 및 커뮤니티 검색을 통해 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;기본-바이오스-설정&quot;&gt;&lt;strong&gt;기본 바이오스 설정&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;설치 USB 를 만들었다면 무작정 PC에 꼽고 시작하면 안된다. 해킨토시는 매우 하드웨어에 민감한 녀석이라는 것을 기억하자. 기존의 PC의 BIOS 설정을 바꾸어 주어야 한다. 기존 커뮤니티들에 보드별 바이오스 설정 방법이 아주 잘 나와 있지만, 그래도 정리가 되지 않는다면 이 사이트들을 확인하고 설정하자.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://lifehacker.com/the-always-up-to-date-guide-to-building-a-hackintosh-o-5841604')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;The Always Up-to-Date Guide to Building a Hackintosh (macOS Sierra)&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Building a hackintosh—that is, installing macOS on non-Apple hardware—used to require extremely restricted hardware choices and quite a bit of know-how. Now your options are vast and the installation process is fairly simple. With that in mind, here is our always up-to-date guide to building a hackintosh that will walk you through purchasing compatible parts, building your machine, and installing macOS all on your own. &lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://lifehacker.com/the-always-up-to-date-guide-to-building-a-hackintosh-o-5841604&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://i.kinja-img.com/gawker-media/image/upload/s--onvTFlJI--/c_fill,fl_progressive,g_center,h_900,q_80,w_1600/zwc2k2r1xdzrwvhepidd.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://hackintosher.com/guides/high-sierra-install-full-guide/')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;Guide to fresh installing macOS High Sierra on a Hackintosh (10.13 Update) - Hackintosher&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;High Sierra is out. Now it’s time to install it on anything but a Mac. The first rig I got to run High Sierra is this cute and tiny silver build with an ASUS motherboard. High Sierra adds some pretty useful features like a log out button. The only downside I’ve noticed so far is that the screen waking can be a little slower then on Sierra. If you never built a hackintosh check out our list of compatible parts or the build list for hackintosh friendly parts. This High Sierra guide is compatible with the latest hardware from Coffee&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://hackintosher.com/guides/high-sierra-install-full-guide/&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://hackintosher.com/wp-content/uploads/2017/10/High-Sierra-Full-Guide-Hackintosh.jpg);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;자신의 보드에 맞는 설정들을 모두 완료했다면 이제 다음 단계로 진행하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;최초-usb-부팅-및-설치&quot;&gt;&lt;strong&gt;최초 USB 부팅 및 설치&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;위의 바이오스 설정에서 USB 부팅을 최우선순위로 주었을 것이기 때문에 부팅 즉시 맥을 설치할 수 있는 화면이 나타나게 된다. 만약 맞는지 잘 모르겠다면 설명서를 다시 보고 오자. 이 과정은 많은 자료들에서 사진과 함께 자세하게 다루고 있기 때문에 생략한다.&lt;/p&gt;

&lt;p&gt;단 실수하기 쉬운 부분은 설치할 하드디스크를 유틸리티 디스크로 &lt;em&gt;Mac OS 확장(저널링)&lt;/em&gt; 으로 포맷해야 한다는 것과 설치 후 &lt;em&gt;Boot Option&lt;/em&gt; 을 주어 Mac OS 를 실행해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;설치가 완료되면 재부팅이 되며 자신이 설치한 하드디스크에 Mac OS 가 설치되게 된다. 그럼 그 하드디스크 부팅을 통해 Mac OS 로 들어가자!&lt;/p&gt;

&lt;p&gt;최초로 내 PC 에 Mac OS 가 설치된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;부트로더-설치&quot;&gt;&lt;strong&gt;부트로더 설치&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;지금 설치된 Mac OS 는 USB 가 없으면 부팅이 되지 않는다. 하드디스크에 부트로더를 설치하기 위해 다음의 사이트를 참고하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://x86.co.kr/tip/1464085&quot;&gt;하드디스크에 부트로더 설치&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;필자의 경우에는 CLOVER 와 기타 Clover configuration 등의 어플리케이션이 포함된 이미지를 받아서 설치 USB 를 만들었기 때문에 기타 설정들은 불필요했고, 미리 받아 놓은 “내 모델명으로 성공한 EFI” 파일을 받아서 USB에 같이 넣어 놓았기 때문에 이 과정에서 EFI 를 그대로 복사하고 Clover Configuration 프로그램으로 부트로더만 하드디스크에 심어주었다.&lt;/p&gt;

&lt;p&gt;정리하자면 다음과 같은 과정을 수행하였다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 내 모델명으로 성공한 EFI 파일 복사

2. Clover Configuration 으로 EFI 파티션 마운트

3. Clover Configuration 으로 EFI 열기 / 저장

4. 최신 Clover Configuration 에서 최신 Bootloader 다운로드

5. Bootloader 실행, 하드디스크에 자동 설치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 과정을 수행하게 되면 자동으로 재부팅되는데, 필자는 이 과정에서 부팅 USB 를 뽑고 하드디스크에 부트로더가 제대로 설치되었는지 확인하였다.&lt;/p&gt;

&lt;p&gt;재부팅까지 정상적으로 되게 되면 왼쪽의 애플로고를 클릭하여 “이 Mac에 관하여” 를 클릭해서 모든 하드웨어들이 정상적으로 인식되었는지 확인하자!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;설치된 맥 시스템의 모습&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56630504-92735f80-668c-11e9-9add-09b845b0f4db.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;High Sierra(10.13.4) 로 메모리,그래픽 드라이버랑 VRAM 까지 모두 인식되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약 시스템을 확인했는데, 그래픽 드라이버의 메모리가 8MB 등으로 잘 잡히지 않았다면 이제 부터 개인적인 오류 해결의 시간이다. 하이시에라에서 내장 그래픽 및 외장 그래픽의 문제들은 거의 대부분 해결책이 나타나 있다. 여기까지 진행했다면, 기본적으로 수정할 수 있는 방법을 본다면 직접 진행할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;intel-wifi-노트북-무선랜-잡기&quot;&gt;&lt;strong&gt;Intel Wifi 노트북 무선랜 잡기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;OS가 설치된 것까지는 좋았는데 와이파이가 잡히지 않는다. 유선랜을 연결하여 사용하는 것은 kext 설정을 통해 정상적으로 동작하는데, 노트북이 와이파이가 되지 않는다면 그냥 화면 작은 데스크탑이다. &lt;strong&gt;안타깝게도 인텔 와이파이를 사용하는 노트북은 무슨 수를 써도 내장 와이파이를 사용해서 인터넷을 사용할 수 없다.&lt;/strong&gt; 필자의 노트북이 그렇다.&lt;/p&gt;

&lt;p&gt;따라서 여러가지 차선책을 사용해야 하는데, 노트북 뒷면을 열어서 내장된 와이파이 모듈을 바꾸거나 와이파이 동글을 사용해서 인터넷을 잡는 방법을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;내장된 와이파이 모듈을 바꾸어 끼는 것은 뭔가 일이 커질 것 같은 느낌이 들어서 동글을 사용해서 잡는 방법을 사용하였다. 아 물론 다른 많은 자료들이 안정적인 모듈의 선택과 교체방법에 대해 설명하고 있기 때문에 참고해서 교체해도 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;x86 hackintosh 커뮤니티에서는 다이소에서 판매하는 5000원짜리 동글로도 인터넷을 잡을 수 있다고 나와있었기 때문에 필자는 이 동글을 구매하여 연결하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56631451-504c1d00-6690-11e9-862f-8d3e94708cc7.jpg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;동글이는 기존에 USB 를 inject 하는 kext 가 들어가 있었기 때문에 자동으로 인식된다. 다만, OS에 이 드라이버를 설치해 주어야 하는데 처음에는 다이소에서 배포하는 드라이버를 설치해서 사용했다. 그러나 이 드라이버를 설치하고 나서, 노트북이 정기적으로 재부팅되거나 다운되는 현상이 발생했고 화면 상단에 와이파이 배지가 나타지 않는 오류가 있었다. 이것을 해결하기 위해 다이소 드라이버를 삭제하고 &lt;strong&gt;iptime n100mini 드라이버&lt;/strong&gt; 를 설치하여 실행하니 와이파이 배지도 나타나고 PC도 재부팅되지 않고 무선 인터넷이 아주 잘 되었다!&lt;/p&gt;

&lt;p&gt;요약하자면 인텔 와이파이 노트북에서 와이파이를 잡기 위해 다음과 같이 하였다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 다이소 무선랜 동글 구매

2. iptime n100mini 드라이버 설치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 두가지 과정으로 무선랜을 잡았다. 물론 다이소 동글이는 속도가 조금 느리고 범위가 조금 짧기 때문에 추후에 더 안정적이고 좋은 동글이로 교체할 생각이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;정상적으로 잡힌 무선랜&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56631537-aa4ce280-6690-11e9-80b8-df4e2cc52c6a.jpg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 성공하면 일단 하드웨어 및 인터넷 연결이 모두 완료되었으므로 해킨토시의 설정은 모두 끝났다. 이제 실제로 맥북이 아닌 PC를 맥북처럼 사용하기 위해 키보드의 설정을 바꾸어주고, 많은 업무용 소프트웨어를 설치하는 과정이 남았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;한글-한영키-인식&quot;&gt;&lt;strong&gt;한글 한/영키 인식&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;필자는 Karabiner 를 설치하여 인식하도록 하였다. 이 Karabiner 는 모든 키보드의 이벤트를 인식하고 다른 키로 치환해주는 설정을 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56631762-a1a8dc00-6691-11e9-867b-cc8b58d422f8.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하고 상단의 아이콘에서 왼쪽버튼을 클릭하면 “Preference” 와 “EventViewer” 가 보인다. 먼저 EventViewer 는 나타나는 모든 키보드 이벤트를 인식하고 출력해준다. 여기서 내가 입력하는 키보드 입력값이 내 PC에서 어떻게 인식되는지 알 수 있다. 또한 이 인식된 키를 다른 키로 바꾸어주는 작업을 Preference 에서 등록할 수 있다. 여기에서 필자의 경우에는 right_alt 로 인식된 한영키를 f18 키로 인식되도록 바꾸었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33674947/56631820-dfa60000-6691-11e9-994e-c3aac65942ca.jpg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 후 키보드 환경설정의 단축키-입력소스에서 “입력 메뉴에서 다음 소스 선택” 을 클릭하고 한/영키를 누르면 f18이 등록되는 것을 확인할 수 있다. 이렇게 설정하면 앞으로 눌린 한/영키는 f18 로 인식되고 키보드 환경설정은 이를 언어 전환 키로서 확인한다.&lt;/p&gt;

&lt;p&gt;이렇게 설정하면 한/영키로 문자 전환이 가능하다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;폰트-문제-해결&quot;&gt;&lt;strong&gt;폰트 문제 해결&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;해킨토시에서 웹사이트를 실행하면 글자가 흐리고 이쁘지 않게 나온다. 이를 해결하기 위해 사파리 확장 프로그램을 설치하였다. &lt;strong&gt;Korean Font Modifier&lt;/strong&gt; 라는 프로그램인데 아래에서 다운로드하여 사용할 수 있다. 조금 폰트가 나아지는 느낌이 든다.&lt;/p&gt;

&lt;table style=&quot;table-layout: fixed; height:110px !important; border:none;border-collapse: separate !important;&quot;&gt; &lt;tr style=&quot;vertical-align:top; padding:0; margin:0;border:none;&quot; onclick=&quot;window.open('https://github.com/encyphered/SafariKoreanFontModifierExtension/releases')&quot;&gt; &lt;td class=&quot;rad&quot; style=&quot;margin:0px;&quot; width=&quot;70%&quot; height=&quot;110px&quot;&gt; &lt;div style=&quot;font-size:12pt margin:0;color:black;&quot;&gt;encyphered/SafariKoreanFontModifierExtension&lt;/div&gt; &lt;div style=&quot;color:gray;font-size:11pt;height: 2.4em;line-height: 1.2em;display: flex;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;overflow: hidden; &quot;&gt;Safari extension for modifying Korean font to OS X bundled fonts - encyphered/SafariKoreanFontModifierExtension&lt;/div&gt; &lt;div style=&quot;font-size:10pt&quot;&gt;https://github.com/encyphered/SafariKoreanFontModifierExtension/releases&lt;/div&gt; &lt;/td&gt; &lt;td class=&quot;noborderRad&quot; style=&quot;border-collapse: separate !important;margin:0px;background-image:url(https://avatars3.githubusercontent.com/u/1845000?s=400&amp;amp;v=4);background-repeat:no-repeat;background-size: 100% 100%;&quot; width=&quot;30%&quot; height=&quot;110px;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;또한 시스템에서도 글자가 흐리고 이쁘지 않게 나온다. 이것은 해상도와 모니터가 오리지널 맥과 달라서 생기는 문제점이라고 하는데, 조금이나마 수정할 방법을 찾아보았다. 터미널에서 관리자 권한을 획득하고 다음과 같이 입력하면 조금 나아진다!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; write &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; AppleFontSmoothing &lt;span class=&quot;nt&quot;&gt;-int&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;힘든 여정의 끝에 안정화를 이루었다.. 많은 기존의 능력자들 덕분에 성공할 수 있었다&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>깃헙 블로그에 Latex 적용하기</title>
   <link href="jgtonys.github.io/blog/2019/04/17/blog-latex-implementation/"/>
   <updated>2019-04-17T00:00:00-05:00</updated>
   <id>jgtonys.github.io/blog/2019/04/17/blog-latex-implementation</id>
   <content type="html">&lt;h2 id=&quot;latex-적용법&quot;&gt;&lt;strong&gt;Latex 적용법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;깃헙의 마크다운은 네이트브로 수식 입력을 지원하지 않으므로, MathJax 를 연결하여 사용할 수 있도록 하자. &lt;em&gt;Jekyll 로 만든 Github Blog&lt;/em&gt; 의 경우 따로 커스터마이징 하지 않았다면 대부분 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 라는 폴더가 존재할 것이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt; 이라는 파일은 blog post 를 작성할 때 이 구조를 따르게 되는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;article&amp;gt;&lt;/code&gt; 태그 안에는 우리가 Markdown 으로 적은 내용(contents)이 들어가게 된다. 여기에 다음과 같은 script 코드를 넣어주자.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 넣으면 이제 모든 post 의 contents 에서 mathjax 을 인식하고 latex 문법을 사용할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;블로그에 수식을 쉽게 넣을 수 있도록 하자!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given a DFA~$A=(Q, \Sigma, \delta, s, F)$, where
&lt;script type=&quot;math/tex&quot;&gt;Q = \{1,2,3,4,5,6\}, \Sigma = \{a,b\}, s = 1, F = \{2,5,6\}&lt;/script&gt; and
$\delta$
is defined as follows:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;latex-문법-정리&quot;&gt;&lt;strong&gt;Latex 문법 정리&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;https://ko.wikipedia.org/wiki/위키백과:TeX_문법&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Apache Kafka 사용하기</title>
   <link href="jgtonys.github.io/bigdata/2019/03/18/kafka/"/>
   <updated>2019-03-18T00:00:00-05:00</updated>
   <id>jgtonys.github.io/bigdata/2019/03/18/kafka</id>
   <content type="html">&lt;h2 id=&quot;kafka-란&quot;&gt;&lt;strong&gt;Kafka 란?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Kafka는 publisher-subscriber 모델의 메세지 큐이고, 분산환경에 특화되어 설계되었다. 기존의 많은 다른 메세지 큐와 비교하였을 때 월등하게 성능 처리가 좋고, 필자는 여기서 Spark Structured Streaming 환경을 구성하기 위해 kafka 를 사용하였다. 기존의 publisher-subscriber 에 대한 개념은 이전 &lt;a href=&quot;https://jgtonys.github.io/iot/2018/07/13/mqtt-test/&quot;&gt;MQTT&lt;/a&gt;  에서도 한번 다룬 적이 있다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;설치-환경&quot;&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux Mint 18.3 Sylvia (Ubuntu 16.04 기반)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;설치-방법&quot;&gt;&lt;strong&gt;설치 방법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;먼저 Java8 과 Zookeeper 를 선행으로 설치하여야 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openjdk-8-jdk
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zookeeperd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모두 설치가 완료되면 이제 Kafka 를 설치해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;공식 홈페이지&lt;/a&gt;에 들어가서 직접 다운로드 받을 수도 있고, 미러 링크를 알고 있다면 다음과 같이 콘솔에서 설치해도 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://apache.tt.co.kr/kafka/2.1.0/kafka_2.11-2.1.0.tgz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvzf kafka_2.11-2.1.0.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이로서 kafka 설치는 끝이 난다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;실행-방법&quot;&gt;&lt;strong&gt;실행 방법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;순서가 매우 중요하다. 헷갈릴 수 있기 때문에 하나씩 차근차근 실행해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;먼저 zookeeper 를 실행한다.&lt;/strong&gt; kafka 는 zookeeper 를 사용하여 돌아가기 때문에 선행으로 먼저 실행되어 있어야 한다. 해당 kafka 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/zookeeper-server-start.sh config/zookeeper.properties&lt;/code&gt; 를 입력하여 실행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;그 후 kafka 서버를 실행한다.&lt;/strong&gt; 해당 kafka 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-server-start.sh config/server.properties&lt;/code&gt; 를 입력하여 실행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Topic 을 생성한다.&lt;/strong&gt; kafka 서버가 실행되었으므로 topic 을 발행할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test&lt;/code&gt; default config 값으로 localhost:2181 로 되어있지만, 설정을 바꾼다면 해당 내용을 바꾸어 주면 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;생성된 topic 을 확인한다.&lt;/strong&gt; 정상적으로 발행되었는지 확인하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-topics.sh --list --zookeeper localhost:2181&lt;/code&gt; 과 같이 확인해보면 아까 발행한 topic 을 볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;이제 producer 를 생성한다.&lt;/strong&gt; 메세지를 보내는 주체가 되는 producer 를 생성하기 위해서는 다음과 같이 할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test&lt;/code&gt; 아까 생성한 topic 에 메세지를 보낼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;메세지를 받을 consumer 를 생성한다.&lt;/strong&gt; 해당 topic 에 대한 메세지를 받을 consumer 이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;데모-영상&quot;&gt;&lt;strong&gt;데모 영상&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;아래 영상은 test 라는 topic 을 미리 발행해 놓은 상태이다&lt;/em&gt;&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/6O0EtdTJ2T8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>터미널 녹화하기 : Asciinema </title>
   <link href="jgtonys.github.io/tips/2019/03/16/asciinema/"/>
   <updated>2019-03-16T00:00:00-05:00</updated>
   <id>jgtonys.github.io/tips/2019/03/16/asciinema</id>
   <content type="html">&lt;h2 id=&quot;asciinema&quot;&gt;&lt;strong&gt;Asciinema&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;손쉽게 터미널을 녹화하여 동영상으로 만들어주는 프로그램이다. 간단한 명령어로 녹화를 시작하고 끝낼 수 있다. 녹화가 완료됨에 따라서 자동으로 웹에 업로드 되며, 로컬에 저장할 수도 있다. 또한 다른 웹에 embedded 하거나 markdown 에 넣기 편리하도록 링크도 제공한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;설치하기&quot;&gt;&lt;strong&gt;설치하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;https://asciinema.org/docs/installation&lt;/p&gt;

&lt;p&gt;위의 링크를 보면 여러가지 설치 방법이 나와 있다.&lt;/p&gt;

&lt;p&gt;필자는 pip 로 설치하는 방법을 택했다. 기존에 python 3.3 이상이 설치되어 있다면 문제없이 설치할 수 있다. 명령어는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install install &lt;/span&gt;asciinema
&lt;span class=&quot;c&quot;&gt;# 또는 pip 가 python3 로 설정되어 있다면&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;asciinema
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/tips/asciinema/0.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;사용법&quot;&gt;&lt;strong&gt;사용법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;설치 후 Asciinema 를 사용하기 위해서는 인증이 필요하다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asciinema auth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라고 치면 다음과 같이 링크가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/tips/asciinema/1.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나타난 링크를 눌러서 들어가거나 직접 웹사이트(https://asciinema.org/)에 들어가서 회원가입을 하면 인증이 완료된다.&lt;/p&gt;

&lt;p&gt;인증이 완료되면 녹화를 시작할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 녹화 시작&lt;/span&gt;
asciinema rec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/tips/asciinema/2.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 녹화 종료&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 또는&lt;/span&gt;
Ctrl-D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/tips/asciinema/3.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;녹화가 종료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt; 로 웹에 업로드하거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-c&lt;/code&gt; 로 로컬에 저장할 수 있다.&lt;/p&gt;

&lt;p&gt;매우 쉽고 빠르게 터미널의 영상을 녹화하고 공유할 수 있어서 매우 유용한 프로그램이라고 생각한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;demo&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;uploading..&lt;/p&gt;

&lt;p&gt;다음은 script tag 로 embedded 된 asciinema 의 영상이다. 손쉽게 녹화하고 공유할 수 있다.&lt;/p&gt;

&lt;script id=&quot;asciicast-m7hi0MfqqH2QFwKHjQ5F8GC1B&quot; src=&quot;https://asciinema.org/a/m7hi0MfqqH2QFwKHjQ5F8GC1B.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Finite State Automata FAs</title>
   <link href="jgtonys.github.io/school/2019/03/12/finite-state-automata-dfa-nfa/"/>
   <updated>2019-03-12T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2019/03/12/finite-state-automata-dfa-nfa</id>
   <content type="html">&lt;h2 id=&quot;fas&quot;&gt;&lt;strong&gt;FAs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Finite-State Automata 를 의미하며, 많은 application 이 FA로 만들어져 있다.&lt;/p&gt;

&lt;p&gt;여기에선 FA의 특성을 알아보기 위해 application 을 간략하게 다루어 볼 것이다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;switch&quot;&gt;&lt;strong&gt;Switch&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/11.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;automata 는 주로 자신이 어디에 있고, 무엇을 하는지 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example(vending machine)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/12.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 state 를 change 하며 결과값을 선택해 나갈 수 있다.&lt;/p&gt;

&lt;p&gt;위의 그림에서는 많은 오류가 있다. (환불 불가, 가격에 따른 종류 변경 불가)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;automata&quot;&gt;&lt;strong&gt;Automata&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;오토마타란?&lt;/p&gt;

&lt;p&gt;프로그램 가이드라인을 따라서 만들어지는데, 오토마타는 language recognizer 라고 불리운다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/13.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Input 이 주어졌을 때 유효한지 알아보고(accept) 그렇지 않으면 거부한다(reject).&lt;/p&gt;

&lt;p&gt;Double circle 로 나타난 state 는 final state 라고 불리운다.&lt;/p&gt;

&lt;p&gt;자기 자신을 가리키는 transition 은 self transition 이라고 불리운다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 그림에서 가능한 input 은 inifinite 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;automata 는 따라서 language 를 represent 한다. (set of string 을 받아들이기 때문이다. set of string == language)&lt;/p&gt;

&lt;p&gt;automata 가 인식하는 language 는 regular language 이다.&lt;/p&gt;

&lt;p&gt;외부의 input 으로부터 움직이는 것을 제어하는 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deterministic-finite-state-automata-dfas&quot;&gt;&lt;strong&gt;Deterministic Finite-State Automata (DFAs)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;각 state 마다 하나의 움직임만이 가능하다.(unique 하게)&lt;/p&gt;

&lt;p&gt;유한한 state 의 개수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/14.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/15.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서 3 은 sink state 이다. 왜냐하면, 이 state 로 간 경우 다시 빠져나올 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;final state 는 sink state 가 될 수 없다.(accpet 를 해야 하기 때문이다)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;QUIZ : lanugage 를 주고 DFA 를 디자인하라고 할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DFA Configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;만약 crash 가 일어난 경우 현재 state 와 남은 input string 을 가지고 unfinished computation 을 resume 할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/16.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서는 state 3 와 7 에서 언제든지 다시 시작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Single-Step computation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;앞의 example 에서 input 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa&lt;/code&gt; 라면 다음과 같이 표현이 가능하다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(0,aaa)
(1,aa)
(2,a)
(2,lamda)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 변환의 과정은 다음과 같은 automaton 으로 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/17.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Multiple-Step Computation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/18.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Acceptance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;만약 얼마간의 automation 이후 lamda 가 나타났다면, 그 state 는 final state 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/19.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Language L(A) 라는 것은 A가 모든 accepted string 의 set 라는 것을 의미한다.&lt;/p&gt;

&lt;h2 id=&quot;determinism-vs-nondeterminism&quot;&gt;&lt;strong&gt;Determinism vs Nondeterminism&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/20.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NFA 란 경로가 하나가 아닌 것을 의미한다. 반대로 DFA 는 단하나의 경로가 존재하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nfa-specification&quot;&gt;&lt;strong&gt;NFA Specification&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;기본적으로 DFA와 같지만 transition 의 결과가 여러개로 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/21.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/22.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dfas-and-nfas&quot;&gt;&lt;strong&gt;DFAs and NFAs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;DFA 의 language 와 NFA 의 language 는 같다. 비록 모양이 다르고 방식이 다르더라도 language 는 같다.&lt;/p&gt;

&lt;h2 id=&quot;subset-construction&quot;&gt;&lt;strong&gt;Subset Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/23.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Correctness&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/24.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Finite State Automata Basic</title>
   <link href="jgtonys.github.io/school/2019/03/12/finite-state-automata-basic/"/>
   <updated>2019-03-12T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2019/03/12/finite-state-automata basic</id>
   <content type="html">&lt;h2 id=&quot;alphabet-strings-and-languages&quot;&gt;&lt;strong&gt;Alphabet, Strings and Languages&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;alphabet&lt;/strong&gt; is a finite, nonempty set of symbols denoted by Σ.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;string&lt;/strong&gt; (or sometimes word) is a finite sequence of symbols chosen from some alphabet.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;empty string&lt;/strong&gt; is the string with zero occurrences of symbols. This string, denoted by λ(in text epsilon)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The &lt;strong&gt;length&lt;/strong&gt; of a string is the number of symbol occurrences.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;occurrence&lt;/strong&gt; w σ of σ is the number of σ occurrences.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;power&lt;/strong&gt; Σ^k of an alphabet is the set of strings of length k, each of whose symbols is chosen from Σ&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;power 가 0 이더라도 empty string 은 존재하기 때문에 length 는 0 이 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kleene star is all subset of the element.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;non-empty-string&quot;&gt;&lt;strong&gt;Non-Empty string&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;’+’ 는 1개 이상의 element 를 가지는 모든 subset 을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘*’ (Kleene star) 는 + 에 empty string 을 합집합한 것이다. (all possible strings)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;concatenation&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;x와 y의 concatenation&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;catenation operation symbol 은 생략이 가능하다.&lt;/p&gt;

&lt;p&gt;단순히 두개의 string 을 뒤에 붙여주는 역할을 한다.&lt;/p&gt;

&lt;p&gt;만약 lamda 를 붙이게 되면 기존의 string 과 identical 한 string 이 형성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;language&quot;&gt;&lt;strong&gt;Language&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;language 는 시그마* 로부터 선택된 set of strings 이다.&lt;/p&gt;

&lt;p&gt;따라서 language L 은 시그마에 포함된 언어이다. 따라서 infinite 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/6.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;중요&quot;&gt;&lt;em&gt;중요&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;empty language&lt;/strong&gt; == &lt;strong&gt;empty set&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;empty set 이면 empty language 이다. (필요충분관계)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;단 empty string(lamda) 1개를 가지고 있는 집합은 empty language 가 아니다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;empty string(lamda) 1개를 가지고 있는 집합은 length 가 1 이다.&lt;/p&gt;

&lt;p&gt;그러나 empty language(empty set) 은 length 가 0 이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;lamda 는 sigma 에 포함되지 않는다. (알파벳에 포함될 수 없다)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set&quot;&gt;&lt;strong&gt;SET&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/7.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Operations&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;set operation 에서 each element 는 duplicate 할 수 없다. (중복이 있으면 안된다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/8.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/9.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bijections&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/10.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;inductive-proofs&quot;&gt;&lt;strong&gt;Inductive Proofs&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Basis : 어떤 작은 문제에 대해 (직접)증명한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inductive step : 푼 문제보다 작은 문제를 이미 푼 문제를 사용하여 가정하고 증명한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;n 개의 leaves 를 가지는 이진트리는 2n-1 개의 노드가 있다 를 증명하시오&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;S(1) 일 때 2*1-1 = 1 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S(T) 일 때 더 작은 subtree U 와 V 를 두고 계산한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;if-and-only-if-proofs&quot;&gt;&lt;strong&gt;If-And-Only-If Proofs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;만약 X 이면 Y 이다 &amp;lt;=&amp;gt; 만약 Y 가 아니라면 X 가 아니다.&lt;/p&gt;

&lt;p&gt;대우법(contrapositive)을 사용하는 방법이다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Latex installation [Linux Mint]</title>
   <link href="jgtonys.github.io/school/2019/03/10/latex-install/"/>
   <updated>2019-03-10T00:00:00-06:00</updated>
   <id>jgtonys.github.io/school/2019/03/10/latex-install</id>
   <content type="html">&lt;h2 id=&quot;latex-란&quot;&gt;&lt;strong&gt;Latex 란?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;문서 작성 매크로 프로그램이라고 생각하면 이해하기 쉽다. 많은 문서 프로그램들과 호환이 되며, Tex를 조금 더 쉽게 사용할 수 있도록 고안된 것이다. 수식 및 도표 삽입이 쉬워 공학 및 수학 프로그래밍 문서 작성에 매우 유용하게 사용이 되고 있다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation-on-linux-mint&quot;&gt;&lt;strong&gt;Installation On Linux Mint&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;다음과 같은 순서로 설치가 진행된다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Latex 설치&lt;/li&gt;
  &lt;li&gt;Latex 문서 작성을 위한 에디터&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;latex-설치&quot;&gt;&lt;strong&gt;Latex 설치&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Latex 를 설치하기 위해서는 먼저 Linux mint 에 &lt;em&gt;TeX Live&lt;/em&gt; 라는 것을 설치해야 한다.&lt;/p&gt;

&lt;p&gt;필자의 Linux mint 는 Ubuntu 16.04 버전을 기반으로 만들어진 OS 이기 때문에 다음과 같이 입력하여 TeX Live 를 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;만약 더 최신 버전의 Ubuntu 를 기반으로 한다면, TeX Live 홈페이지에서 다운로드 받는 것을 추천한다.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install texlive-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되면 다음과 같이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/1.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;latex-에디터-설치&quot;&gt;&lt;strong&gt;Latex 에디터 설치&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Texmaker 라는 것을 설치하여야 한다.&lt;/p&gt;

&lt;p&gt;Texmaker 는 cross-platform open source Latex editor 로서 많은 플러그인들을 제공해주는 기본적인 Latex editor 이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install texmaker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되면, Texmaker 라는 프로그램이 설치되어 있는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;실행하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/2.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;확인-test&quot;&gt;&lt;strong&gt;확인 TEST&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;기본적으로 PDFLatex 로 빌드(컴파일) 하게 되어있으며, 이를 실행하고 VIEW pdf 를 누르면 변환된 pdf 가 생성된다.&lt;/p&gt;

&lt;p&gt;다음은 정상적으로 latex 를 Texmaker 가 인식하고 컴파일한 후 작성된 문서를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/3.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;추가적으로 몇가지 이쁜 템플릿을 찾아서(보고서용으로) 둘러보다가 적용하였다.&lt;/p&gt;

&lt;p&gt;보고서용으로 셋팅한 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/4.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/automata/5.png&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;~LATEX CONFIGURATION COMPLETE~&lt;/p&gt;

&lt;p&gt;&lt;em&gt;참고용 사이트&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://www.latex-project.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.xm1math.net/texmaker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://www.latextemplates.com&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Text Mining Introduction</title>
   <link href="jgtonys.github.io/school/2019/03/07/text-mining-introduction/"/>
   <updated>2019-03-07T00:00:00-06:00</updated>
   <id>jgtonys.github.io/school/2019/03/07/text-mining-introduction</id>
   <content type="html">&lt;h2 id=&quot;텍스트-정보처리text-mining&quot;&gt;&lt;strong&gt;텍스트 정보처리(Text mining)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;구조화되지 않은 unstrutured data 로 부터 새로운 지식을 발견하는것이다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;텍스트-전처리&quot;&gt;&lt;strong&gt;텍스트 전처리&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;unstructured data → structured data&lt;/p&gt;

&lt;h2 id=&quot;텍스트-마이닝&quot;&gt;&lt;strong&gt;텍스트 마이닝&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;unstructured data 에 존재하는 pattern, trends, association 을 찾아내는 것&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;구조화-vs-비구조화&quot;&gt;&lt;strong&gt;구조화 VS 비구조화&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;비구조화 데이터는 internal structure 가 있을수도 있지만, 미리 정의된 구조나 스키마는 존재하지 않는다. 그래서 non-relational db 인 nosql 에 저장을 하기도 한다.&lt;/p&gt;

&lt;h2 id=&quot;semi-structured-data&quot;&gt;&lt;strong&gt;Semi-structured data&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Markup Language XML 이나 JSON 형태등이 있다.&lt;/p&gt;

&lt;p&gt;정보를 구조화하고 계층화한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XML JSON 은 간단하게 넘어감&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;정보처리과정&quot;&gt;&lt;strong&gt;정보처리과정&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;수행하고자 하는 목표 설정&lt;/li&gt;
  &lt;li&gt;데이터 수집&lt;/li&gt;
  &lt;li&gt;전처리
    &lt;ul&gt;
      &lt;li&gt;데이터클리닝&lt;/li&gt;
      &lt;li&gt;자연어 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 탐색&lt;/li&gt;
  &lt;li&gt;데이터 분석
    &lt;ul&gt;
      &lt;li&gt;통계분석 : 회귀분석, 오차&lt;/li&gt;
      &lt;li&gt;기계분석&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;text-mining-process&quot;&gt;&lt;strong&gt;Text mining process&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;기존의 데이터 마이닝에서 다른 리소스를 가지고 전처리를 하는 부분이 추가되었다.&lt;/p&gt;

&lt;p&gt;전처리의 과정이 굉장히 부각된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/textmining/1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TM vs DM&lt;/p&gt;

&lt;h2 id=&quot;tm-vs-dm-in-ml&quot;&gt;&lt;strong&gt;TM vs DM in ML&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;수만개의 텍스트 중에서 뽑아내어 feature 를 만든다.&lt;/p&gt;

&lt;p&gt;data mining 에서는 select feature 라고 부르며, text mining 에서는 extract feature 라고 부른다. Extract feature 는 select feature 에서 뽑아 낸다.&lt;/p&gt;

&lt;h2 id=&quot;structure-of-text&quot;&gt;&lt;strong&gt;Structure of Text&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/textmining/2.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문장-구조&quot;&gt;&lt;strong&gt;문장 구조&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;어절은 Token 단위이다.&lt;/p&gt;

&lt;p&gt;자연어 처리의 가장 중요한 이슈중 하나는 형태소의 분석이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;POS : 품사를 분석하여 명사만 추출해 내는 것&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/textmining/3.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;structure of sentence&lt;/p&gt;

&lt;h2 id=&quot;dependency-parse&quot;&gt;&lt;strong&gt;Dependency Parse&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;의존 구문분석이라고 하며 동사구, 형용사구 등을 분석하는 과정이다.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-text&quot;&gt;&lt;strong&gt;Analyzing Text&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;NLP : Corpus → Document → Paragraph → Sentence → Token&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Token level
    &lt;ul&gt;
      &lt;li&gt;Ontologies : 단어들 간의 계층구조, 관계가 반영된 것&lt;/li&gt;
      &lt;li&gt;Inexact match : 자연어 처리단계에서 오타 및 문법적 변형을 찾는 것 (Edit distance)&lt;/li&gt;
      &lt;li&gt;Regular Expression : 정규 표현식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;issues&quot;&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/textmining/4.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;수업-목표&quot;&gt;&lt;strong&gt;수업 목표&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;텍스트 정보의 주요 특성을 이해하고 웹에서 텍스트 정보를 수집, 추출하여 파싱한다.&lt;/p&gt;

&lt;p&gt;간단한 NLP 처리기법을 익히고 활용하며, Python 으로 텍스트 처리를 실습한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;lemmatization : 원형 복원법&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fintech Academy Development</title>
   <link href="jgtonys.github.io/fintech/2019/02/22/fintech-academy-team-project/"/>
   <updated>2019-02-22T00:00:00-06:00</updated>
   <id>jgtonys.github.io/fintech/2019/02/22/fintech-academy-team-project</id>
   <content type="html">&lt;h2 id=&quot;fintech-academy-team-project&quot;&gt;&lt;strong&gt;Fintech Academy Team Project&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;KISA 핀테크 아카데미 개발과정 팀 프로젝트&lt;/p&gt;

&lt;p&gt;월급 자동이체 및 직원관리 서비스 SIGBI 개발 및 최우수상 수상&lt;/p&gt;

&lt;!-- more --&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/ECDCV55sIlM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;what-is-sigbi&quot;&gt;&lt;strong&gt;WHAT IS SIGBI&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이번 KISA 핀테크 아카데미 개발과정에서는 Open API 를 사용하여 간편 결제 및 송금 시스템을 사용한 서비스 개발을 하게 되었다.&lt;/p&gt;

&lt;p&gt;선정된 서비스로는 ‘월급 자동이체 및 직원관리 서비스’ 로 ‘SIGBI’ 라는 서비스 네임을 가지고 기획과 개발에 착수하였다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;purpose&quot;&gt;&lt;strong&gt;PURPOSE&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;직원의 월급 자동지급 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;관리자의 직원 관리 통합 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;크게 다음과 같은 두가지 메인 기능을 가지고 시작하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;시장성&lt;/strong&gt; 조사는 사전에 진행되었고, 충분한 사업성이 보장될 수 있을 것으로 판단된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fintech/1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fintech/2.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;&lt;strong&gt;FUNCTIONS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;주요 기능으로는 다음과 같다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;관리자 측면
    &lt;ul&gt;
      &lt;li&gt;월급 자동 급여이체 서비스&lt;/li&gt;
      &lt;li&gt;직원 근태관리&lt;/li&gt;
      &lt;li&gt;근무기록 파일 내보내기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직원 측면&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;월급 자동계산 및 자동 입금&lt;/li&gt;
      &lt;li&gt;누적 시급 &amp;amp; 동기부여 시스템&lt;/li&gt;
      &lt;li&gt;출퇴근 관리 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flowchart&quot;&gt;&lt;strong&gt;FLOWCHART&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;/image3&lt;/p&gt;

&lt;h2 id=&quot;extensions&quot;&gt;&lt;strong&gt;EXTENSIONS&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스마트 컨트랙트를 이용한 근로계약서 체결&lt;/li&gt;
  &lt;li&gt;기존 알바앱과 제휴를 맺어 상호 서비스 제공&lt;/li&gt;
  &lt;li&gt;사장님 및 알바생 검증 서비스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developmentbackend&quot;&gt;&lt;strong&gt;DEVELOPMENT(Backend)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Nodejs 를 사용하여 금융결제원 OpenAPI 를 연결, 자동결제 및 은행등록 등의 절차를 서버에서 구현하였다.&lt;/p&gt;

&lt;p&gt;다음은 Backend Dependency 를 보여준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
    &quot;async&quot;: &quot;^2.6.0&quot;,
    &quot;bcrypt&quot;: &quot;^1.0.3&quot;,
    &quot;body-parser&quot;: &quot;^1.18.2&quot;,
    &quot;express&quot;: &quot;^4.16.3&quot;,
    &quot;jsonwebtoken&quot;: &quot;^8.2.0&quot;,
    &quot;lodash&quot;: &quot;^4.17.5&quot;,
    &quot;sequelize&quot;: &quot;^4.37.1&quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 폴더 구조는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app (backend)
    &lt;ul&gt;
      &lt;li&gt;controller (server app controller)&lt;/li&gt;
      &lt;li&gt;models (database models)&lt;/li&gt;
      &lt;li&gt;routes (routing)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;client (frontend)&lt;/li&gt;
  &lt;li&gt;config
    &lt;ul&gt;
      &lt;li&gt;config.js&lt;/li&gt;
      &lt;li&gt;db.js&lt;/li&gt;
      &lt;li&gt;express.js&lt;/li&gt;
      &lt;li&gt;jwt.js (optional)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;server.js&lt;/li&gt;
  &lt;li&gt;package.json (npm install modules, description)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-api-simulation&quot;&gt;&lt;strong&gt;OPEN API SIMULATION&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;금융결제원 테스트배드에서 입력한 내용과 동일하게 작성해준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;금융결제원 OPEN API 사용자 인증 및 계좌 취득 데모 코드&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * POST: /authResult
 * 초기 토큰 발급 (성공)
 **/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://testapi.open-platform.or.kr/oauth/2.0/token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-type: application/x-www-form-urlencoded; charset=UTF-8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;client id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;client_secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;client secret key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redirect_uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;redirection uri&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;grant_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;authorization_code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;db inserting process&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){})&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;script&amp;gt;self.close();&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;계좌 조회 데모 코드&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * POST:
 * 계좌 조회 (성공)
 **/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mydata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://testapi.open-platform.or.kr/user/me?user_seq_no=userNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bearer Token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;잔액 조회 데모 코드&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * POST:
 * 잔액 조회 (성공)
 **/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://testapi.open-platform.or.kr/v1.0/account/balance?fintech_use_num=fintechNum&amp;amp;tran_dtime=tranDtime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bearer Token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나머지 은행 API들도 위와 같은 방식으로 서버에 구현하여 테스트 해 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;프로젝트의 메인 기능인 자동 송금 기능이 정상적으로 구현되었는지 임의로 확인해 보기 위해 임시 송금 테스트 페이지를 구현하여 테스트 해 본 결과는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fintech/3.png&quot; alt=&quot;test1&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Freelancer Web Matching Service</title>
   <link href="jgtonys.github.io/web/2018/12/08/freelancer-matching-service/"/>
   <updated>2018-12-08T00:00:00-06:00</updated>
   <id>jgtonys.github.io/web/2018/12/08/freelancer-matching-service</id>
   <content type="html">&lt;h2 id=&quot;freelancer---client-web-matching-service&quot;&gt;&lt;strong&gt;Freelancer - Client Web Matching Service&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Using nodejs (backend) + reactjs (frontend)&lt;/p&gt;

&lt;p&gt;Full responsive application&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;demo&quot;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;https://github.com/jgtonys/freelancer-web-matching.git&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/lg0wD5D7Ucg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-run&quot;&gt;&lt;strong&gt;How to run&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git clone&lt;/li&gt;
  &lt;li&gt;root directory - &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;client directory - &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;root directory - &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;To build client files &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;functions&quot;&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Token authentication (JWT) + Session-Storage&lt;/p&gt;

&lt;p&gt;File upload with Multer&lt;/p&gt;

&lt;p&gt;Encryption with Bcrypt&lt;/p&gt;

&lt;h2 id=&quot;development-environment&quot;&gt;&lt;strong&gt;Development Environment&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;es6(babel), axios, node-sass, SPA, webpack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &quot;dependencies&quot;: {
        &quot;async&quot;: &quot;^2.6.0&quot;,
        &quot;bcrypt&quot;: &quot;^3.0.2&quot;,
        &quot;body-parser&quot;: &quot;^1.18.2&quot;,
        &quot;express&quot;: &quot;^4.16.3&quot;,
        &quot;jsonwebtoken&quot;: &quot;^8.2.0&quot;,
        &quot;lodash&quot;: &quot;^4.17.5&quot;,
        &quot;multer&quot;: &quot;^1.4.1&quot;,
        &quot;mysql2&quot;: &quot;^1.6.1&quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;frontend&quot;&gt;&lt;strong&gt;Frontend&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &quot;dependencies&quot;: {
        &quot;@babel/plugin-proposal-class-properties&quot;: &quot;^7.1.0&quot;,
        &quot;@babel/polyfill&quot;: &quot;^7.0.0&quot;,
        &quot;@material-ui/core&quot;: &quot;^3.4.0&quot;,
        &quot;@material-ui/icons&quot;: &quot;^3.0.1&quot;,
        &quot;axios&quot;: &quot;^0.18.0&quot;,
        &quot;babel-runtime&quot;: &quot;^6.26.0&quot;,
        &quot;bootstrap&quot;: &quot;^4.1.3&quot;,
        &quot;cross-env&quot;: &quot;^5.2.0&quot;,
        &quot;css-loader&quot;: &quot;^1.0.1&quot;,
        &quot;node-sass&quot;: &quot;^4.9.4&quot;,
        &quot;react&quot;: &quot;^16.6.0&quot;,
        &quot;react-dom&quot;: &quot;^16.6.0&quot;,
        &quot;react-pdf&quot;: &quot;^4.0.0&quot;,
        &quot;react-redux&quot;: &quot;^5.1.0&quot;,
        &quot;react-router&quot;: &quot;^4.3.1&quot;,
        &quot;react-router-dom&quot;: &quot;^4.3.1&quot;,
        &quot;react-swipeable-views&quot;: &quot;^0.13.0&quot;,
        &quot;react-text-mask&quot;: &quot;^5.4.3&quot;,
        &quot;reactstrap&quot;: &quot;^6.5.0&quot;,
        &quot;redux&quot;: &quot;^4.0.1&quot;,
        &quot;sass-loader&quot;: &quot;^7.1.0&quot;,
        &quot;style-loader&quot;: &quot;^0.23.1&quot;,
        &quot;webpack&quot;: &quot;^4.23.1&quot;,
        &quot;webpack-cli&quot;: &quot;^3.1.2&quot;,
        &quot;webpack-dev-server&quot;: &quot;^3.1.10&quot;
    },
    &quot;devDependencies&quot;: {
        &quot;@babel/core&quot;: &quot;^7.1.2&quot;,
        &quot;@babel/preset-env&quot;: &quot;^7.1.0&quot;,
        &quot;@babel/preset-react&quot;: &quot;^7.0.0&quot;,
        &quot;babel-loader&quot;: &quot;^8.0.4&quot;,
        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;structure&quot;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;app (backend)
    &lt;ul&gt;
      &lt;li&gt;controller (server app controller)&lt;/li&gt;
      &lt;li&gt;models (database models)&lt;/li&gt;
      &lt;li&gt;routes (routing)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;client (frontend)&lt;/li&gt;
  &lt;li&gt;config
    &lt;ul&gt;
      &lt;li&gt;config.js (port, session setting)&lt;/li&gt;
      &lt;li&gt;db.js (database setting)&lt;/li&gt;
      &lt;li&gt;express.js&lt;/li&gt;
      &lt;li&gt;jwt.js (optional, token authentication)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;server.js&lt;/li&gt;
  &lt;li&gt;package.json (npm install modules, description)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-model&quot;&gt;&lt;strong&gt;Database Model&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/db.png&quot; alt=&quot;test1&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Database Relational Model</title>
   <link href="jgtonys.github.io/school/2018/10/20/database-2/"/>
   <updated>2018-10-20T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2018/10/20/database-2</id>
   <content type="html">&lt;h2 id=&quot;isa-is-a-hierarchies&quot;&gt;&lt;strong&gt;ISA (is-a) Hierarchies&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;만약 A ISA B 라고 한다면, 모든 A entity 는 B entity 로서 간주된다.&lt;/p&gt;

&lt;p&gt;ex) Employees ISA Contract_Employees&lt;/p&gt;

&lt;p&gt;Superclass(A) 의 속성들을 subclass(B) 에게 적용시키기(물려주기) 위해 사용한다.&lt;/p&gt;

&lt;p&gt;Relationship 에서 entity 를 identify 하기 위해 사용한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;superclass-subclass&quot;&gt;&lt;strong&gt;Superclass, Subclass&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;class는 type이다. type은 entity의 세트다. 그러므로 class는 entity 의 세트다.&lt;/p&gt;

&lt;p&gt;만약 A 가 B 의 superclass 라면 B의 속성은 A에 존재하지만, A의 속성은 B에 존재하지 않는다.&lt;/p&gt;

&lt;p&gt;이때 A 가 B 의 superclass 이고 B 는 A 의 subclass 이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;attribute-inheritance&quot;&gt;&lt;strong&gt;Attribute inheritance&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;만약 B 가 A 의 속성을 상속받으면 B 에는 B 고유의 속성과 A 의 속성이 함께 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;specialization&quot;&gt;&lt;strong&gt;Specialization&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Superclass에 대해 이루어진 특정한 관계들의 superclass-subclass relation들의 집합이 specialization이다.&lt;/p&gt;

&lt;p&gt;Superclass G 와 구별되는 특정 속성을 가지고 있는 것을 기초로 한다. 먼저 subclass 들 중 다른 entity type 과 다른 additional specific attribute 가 있거나 relationship type 이 있는 경우 그 specific attribute 를 표기해 준다. 즉 어떤 superclass에 대해 특수한 서브셋들을 뽑아내고, 특수한 속성을 달고, 특수한 relation이 필요하다면 단다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;generalization&quot;&gt;&lt;strong&gt;Generalization&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/18.PNG&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Specialization 의 역방향으로, 공통 속성들을 합쳐서 특수 속성들만들 남겨놓는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;constraint-on-specializationgeneralization&quot;&gt;&lt;strong&gt;Constraint on specialization/generalization&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Predicate-defined subclass : 특수 속성값에 대해 constraint를 걸어 specialization을 하는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) jobtype 을 가지고 constraint 를 걸 수 있다. [jobtype = secretary] 이때 jobtype 이 defining attribute 이고 secretary 가 attribute value 가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Attribute-defined specialization : 속성의 값을 가지고 specialization 을 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/19.PNG&quot; alt=&quot;19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;다이어그램에서 표현할 때 superclass 와 동그라미 사이에 defining attribute 를, 동그라미와 subclass 사이에 attribute value 를 표현한다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;User-defined subclass : defining attribute 와 attribute value 를 이용해서 자동으로 specialize 하지 않고 유저가 직접 정의해서 관리한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disjoint-constraints&quot;&gt;&lt;strong&gt;Disjoint constraints&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Disjoint : 동그라미가 그려진 d 는 복수의 subclass를 가질 수 없다는 것을 의미&lt;/li&gt;
  &lt;li&gt;Overlap : 동그라미가 그려진 o 는 복수의 subclass를 가질 수 있다는 것을 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;completeness-constraint&quot;&gt;&lt;strong&gt;Completeness constraint&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Total specialization : 두줄은 무조건 어떤 subclass를 가져야 한다는 것을 의미&lt;/li&gt;
  &lt;li&gt;Parital specialization : 아무 subclass를 가지지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;insertion--deletion-rules-for-specialization-generalization&quot;&gt;&lt;strong&gt;Insertion &amp;amp; deletion rules for specialization/ generalization&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Superclass 의 entity 를 삭제할 때, 모든 subclass 로부터 자동으로 삭제가 된다&lt;/li&gt;
  &lt;li&gt;Superclass 에 entity 를 추가할 때, 모든 predicate-defined subclass 에 (만약 defining predicate 를 만족하면) 자동으로 추가된다.&lt;/li&gt;
  &lt;li&gt;Total specialization 일 때 superclass 에 entity 를 추가하면 적어도 하나의 subclass 에 자동으로 추가된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;specialization-hierarchies--lattices&quot;&gt;&lt;strong&gt;Specialization hierarchies &amp;amp; lattices&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/20.PNG&quot; alt=&quot;20&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;lattice : 서브클래스가 하나 이상의 클래스나 서브클래스를 갖는다.(multiple inheritance) 모든 superclass 들의 속성을 상속받는다.&lt;/p&gt;

    &lt;p&gt;여기서 lattice 는 engineering_manager. engineer, manager,salaried employee의 상속을 받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hierarchy : 모든 서브클래스 서브클래스 관계가 싱글이다.(single inheritance)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;top-down-vs-bottom-up-conceptual-design&quot;&gt;&lt;strong&gt;Top-down vs Bottom-up conceptual design&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;위에서 아래로가는 specialization 은 top-down. 이것을 successive specialization 이라 한다.&lt;/p&gt;

&lt;p&gt;아래서 위로가는 specialization 을 bottom-up. 이것을 successive generalization 이라 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;union-types&quot;&gt;&lt;strong&gt;Union types&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;만약 superclass 들이 하나의 union 이라면 한번에 하나의 entity 속성만이 상속된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/21.PNG&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/22.PNG&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/23.PNG&quot; alt=&quot;23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-relational-data-model-and-relational-database-constraints&quot;&gt;&lt;strong&gt;The Relational Data Model and Relational Database Constraints&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;어플리케이션 단에서 data를 제어하기에는 부하가 많이 걸리므로 database 모델에서 제어한다.&lt;/p&gt;

&lt;p&gt;데이터를 수정할 때에도 간섭한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;domain-tuples-attributes-relations&quot;&gt;&lt;strong&gt;Domain, Tuples, Attributes, Relations&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;겉으로 보기에는 flat file과 relation은 비슷해 보인다.&lt;/p&gt;

&lt;p&gt;relation이란 가지고 있는 정보를 수학적으로 정의하는것&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tuple : relation의 각 row&lt;/li&gt;
  &lt;li&gt;Attribute : relation의 각 column 속성&lt;/li&gt;
  &lt;li&gt;Relation Name : relation의 이름&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-model-concepts&quot;&gt;&lt;strong&gt;Relational Model Concepts&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Domain : entity의 value set 과 비슷한 개념. 더이상 나누어지지 않는 단위들의 set&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relation Schema(intension) : relation의 이름과 relation의 속성들을 정의함&lt;/p&gt;

    &lt;p&gt;각각의 속성들은 Domain에 연결된다.&lt;/p&gt;

    &lt;p&gt;degree of a relation : 속성의 개수&lt;/p&gt;

    &lt;p&gt;domain of A1 = dom(A1)&lt;/p&gt;

    &lt;p&gt;relation intension = relation schema R&lt;/p&gt;

    &lt;p&gt;EX) R(A1,A2,A3,A4) 여기서 R은 relation name, A1,A2,A3,A4 는 R의 속성값&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relation state(extension) : relation state는 n개의 tuple이 있다.(degree 가 n 이므로)&lt;/p&gt;

    &lt;p&gt;하나의 튜플에는 relation schema의 속성들이 대응된다.&lt;/p&gt;

    &lt;p&gt;relation extension = relation instance r(R)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;r(R) 이란 각각의 속성값들이 가질 수 있는 모든 경우의 수의 카테시안 곱의 서브셋이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cardinality : 도메인 값이 가질 수 있는 경우의 수, 또는 현재 relation의 도메인 가지수&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Current Relation State : 특정 시간의 relation state(instance)&lt;/p&gt;

    &lt;p&gt;relation 은 dynamic 하지만 relation schema 는 almost static 하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relation의-특성&quot;&gt;&lt;strong&gt;Relation의 특성&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;relation에서 tuple의 순서는 중요하지 않다. (no ordering)&lt;/p&gt;

    &lt;p&gt;파일에서는 physical ordering 이 존재한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 tuple에서 속성들의 순서는 중요하다. (ordering)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Alternative definition 가능하다. (&lt;attribute&gt;,&lt;value&gt;) pair 만 맞으면 순서는 상관없다.&lt;/value&gt;&lt;/attribute&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tuple의 value는 atomic value여야 한다.&lt;/p&gt;

    &lt;p&gt;composite/multi-valued attribute 는 불가능하다(first normal form)&lt;/p&gt;

    &lt;p&gt;relaxation : nested relation or non-first normal form&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NULL value 는 여러가지 경우가 있을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relation의 해석&lt;/p&gt;

    &lt;p&gt;Relation 이란 entity 나 entity 들 사이의 관계를 나타낸다.&lt;/p&gt;

    &lt;p&gt;Relation Schema 는 속성들의 정의를 나타낸다.&lt;/p&gt;

    &lt;p&gt;각각의 tuple 은 값(사실)을 나타낸다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-model-notation&quot;&gt;&lt;strong&gt;Relational Model Notation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/24.PNG&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;constraints&quot;&gt;&lt;strong&gt;Constraints&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Inherent model-based (implicit) constraints&lt;/p&gt;

&lt;p&gt;Schema-based (explicit) constraints&lt;/p&gt;

&lt;p&gt;Application-based (semantic) constraints or business rules&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Domain constraints : 속성 A의 도메인은 dom(A)로 표현되며 데이터 타입을 정의하고, 도메인 범위내에 값이 무조건 존재해야 한다. 또한 date 나 time 같은 format 형식도 가질 수 있다.&lt;/p&gt;

&lt;p&gt;Key constraints : relation 에서 모든 tuple들은 key 에 의해서 구별되어야 한다. 이렇게 구별이 되는 속성들의 조합을 superkey 라고 한다. 모든 relation schema 는 적어도 한개 이상의 superkey 를 가지고 있으며 key 는 최소 superkey 의 하나이다. 이 후보 key 들이 candidate key 이고, primary key 는 candidate key 들 중에서 mini-world 에 의해 결정이 된다(DB designer 에 의해). 단순속성이나 적은 수의 속성으로 결정하는 것이 좋다. unique key 란 primary key 가 아닌 key를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-database-schema&quot;&gt;&lt;strong&gt;Relational Database Schema&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;relational database 는 여러개의 relation 으로 구성이 되어 있으며 relational database schema S = {R1,R2..} 로 표현될 수 있다.(Ri : relation schema) relation schema 들과 integrity constraints 들의 세트로 이루어진다.&lt;/p&gt;

&lt;p&gt;relational database instance DB 는 integrity constraint 를 만족하는 relation instance 의 집합이다&lt;/p&gt;

&lt;p&gt;&lt;em&gt;relational database = relational database schema + relational database state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity--referential-integrity&quot;&gt;&lt;strong&gt;Entity &amp;amp; Referential Integrity&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Entity integrity constraint : primary key 는 null 값을 가질 수 없다.&lt;/p&gt;

&lt;p&gt;Referential Integrity constraint : 한 relation 의 tuple 에서 다른 relation을 참조할 때는 항상 참조되는 tuple 이 존재해야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;foreign-key&quot;&gt;&lt;strong&gt;Foreign Key&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;참조되는 key 로서 FK 로 나타낸다. ex) dom(FK) = dom(PK)&lt;/p&gt;

&lt;p&gt;FK 의 도메인과 참조하는 PK 의 도메인이 같아야 한다.(또는 포함되어야 한다)&lt;/p&gt;

&lt;p&gt;semantic integrity constraint : 대부분의 DBMS에서 지원하지 않지만 mini-world 에서 작용하는 제약조건이다. 또는 DBMS에서 trigger 나 assertion 을 통해 관리가 가능하기도 하지만, 대부분은 application level 에서 관리한다.&lt;/p&gt;

&lt;p&gt;functional dependency constraint : 특정 속성이 다른 속성을 제약하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;insert-operation&quot;&gt;&lt;strong&gt;Insert Operation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;새로운 tuple 을 relation 에 추가하는 것이다.&lt;/p&gt;

&lt;p&gt;constraint checking 은 domain constraint(값이 범위내에 있어야 한다), key constraint(키가 중복되지 않아야 한다), entity constraint(null 이 아니어야 한다), referential constraint(참조되는 tuple 이 있어야 한다) 를 한다.&lt;/p&gt;

&lt;p&gt;제약조건에 걸리게 되면 reject insertion 하거나 유저와 상호작용해서 insertion 을 고친다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;delete-operation&quot;&gt;&lt;strong&gt;Delete Operation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;relation 에서 기존 tuple 을 제거한다.&lt;/p&gt;

&lt;p&gt;constraint checking 은 referential integrity constraint 를 확인한다.(삭제될 tuple 이 다른 relation 에 의해 참조될때)&lt;/p&gt;

&lt;p&gt;제약조건에 걸리게 되면 restrict 는 delete operation 을 reject 한다. 또 cascade 는 참조하는 모든 tuple 을 함께 삭제하는 것이고, set null(or default) 은 참조하는 값을 null로 바꾸는 것이다. 이때 만약 참조하는 속성이 key 이면 null 로 바꾸지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modify-operation&quot;&gt;&lt;strong&gt;Modify Operation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;삭제하고 추가한다고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;Insert 와 delete 의 constraint 를 모두 포함한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;defining-relation&quot;&gt;&lt;strong&gt;Defining Relation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;설계된 DB 를 DBMS 에서 정의하는 법이다.&lt;/p&gt;

&lt;p&gt;Relational DBMS, Relational database schema, domain, relation 을 정의한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;er-to-relational-mapping-algorithm&quot;&gt;&lt;strong&gt;ER to Relational Mapping Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;ER diagram 으로 RDB 를 디자인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/25.PNG&quot; alt=&quot;25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/26.PNG&quot; alt=&quot;26&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Step 1 : entity를 table로 변형한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;simple attribute는 그대로 테이블에 표현한다.&lt;/li&gt;
      &lt;li&gt;복합 속성들은 따로 나누어서 표현하거나 합쳐서 표현할 수 있다.&lt;/li&gt;
      &lt;li&gt;entity 무결성 설정 (primary key 설정)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 2 : weak entity 설정&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;key attribute 속성 세팅이 안되기 때문에 (owner key + partial key) 를 primary key로 설정한다. foreign key는 owner key가 된다. ex) DEPENDENT 의 Essn 이 foreign key 이다.(EMPLOYEE 의 PK Ssn)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 3 : 1대1 relationship&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/27.PNG&quot; alt=&quot;27&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;Manage relation 의 attribute Start_date 를 Department 에 붙인다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;속성을 뒤에 붙여버릴 수 있다. (ex예제 내용)&lt;/li&gt;
      &lt;li&gt;몽땅 붙여버릴 수도 있다. (다른 관계가 없을 고, total participation 일때)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 4 : 1대N relationship&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/28.PNG&quot; alt=&quot;28&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;N 쪽에 1쪽의 PK 를 FK 로 넣는다.(rename 해서)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 5 : N대M relationship&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/29.PNG&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;S relation 에 각 entity(relation schema) 들의 primary key 들을 가져와서 S 의 primary key 로 지정한다.&lt;/li&gt;
      &lt;li&gt;S relation 에 각 entity(relation schema) 들의 primary key 들을 가져와서 S 의 foreign key 로 지정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 6 : multi-valued 속성 표현&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/30.PNG&quot; alt=&quot;30&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;따로 table을 만든다.&lt;/li&gt;
      &lt;li&gt;owner 의 primary key 를 가져오고 multi-valued 속성을 primary key 로 지정한다.&lt;/li&gt;
      &lt;li&gt;가져온 owner 의 primary key 가 foreign key 가 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Step 7 : n-ary relationship&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/public/img/school/database/31.PNG&quot; alt=&quot;31&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/32.PNG&quot; alt=&quot;32&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;새로 table을 만드는데 연결된 entity 의 primary key들을 가져와서 만든다.&lt;/li&gt;
      &lt;li&gt;가져온 primary key 들이 FK 가 된다. 그 중 max=1 관계인 entity type 의 PK 를 PK 로 설정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapping-transition&quot;&gt;&lt;strong&gt;Mapping transition&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/33.PNG&quot; alt=&quot;33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-model-does-not-represents-explicitly&quot;&gt;&lt;strong&gt;Relational model does not represents explicitly&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;multi-valued 속성이나, 두 tuple 이 관계를 가지고 있다는 것을 한눈에 표현하지는 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1:1 and 1:N relationship type —&amp;gt; one join 연결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;M:N relationship type —&amp;gt; two join 연결&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/database/34.PNG&quot; alt=&quot;34&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;n-ary relationship type —&amp;gt; n join 연결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;multi-value 속성 —&amp;gt; one join 연결&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/database/35.PNG&quot; alt=&quot;35&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;eer-to-relational-mapping-algorithm&quot;&gt;&lt;strong&gt;EER to Relational Mapping Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Step 8 : Specialization / generalization&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1번 방법 (ISA 관계)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/36.PNG&quot; alt=&quot;36&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Superclass 의 primary key 는 기존의 key 와 같다.&lt;/li&gt;
      &lt;li&gt;Subclass 들의 FK 는 모두 superclass 의 PK 와 같다.&lt;/li&gt;
      &lt;li&gt;Relation 으로 표현할 때는 disjoint/overlapping, total/partial 이 중요하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2번 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/public/img/school/database/37.PNG&quot; alt=&quot;37&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Superclass 의 table 을 생성하지 않는다. ex) VEHICLE table 이 존재하지 않는다.&lt;/li&gt;
      &lt;li&gt;Subclass 에 VEHICLE superclass 의 모든 속성들이 포함되어 나타난다.&lt;/li&gt;
      &lt;li&gt;단 partial 인 경우에는 해당되지 않고, total participation 일 때만 가능하다. (아무쪽에도 속하지 않는 속성이 존재하게 되므로)&lt;/li&gt;
      &lt;li&gt;반드시 disjoint 해야한다. (중복되어 부하가 걸릴 수 있다.)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;MUST BE TOTAL and DISJOINT&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3번 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/public/img/school/database/38.PNG&quot; alt=&quot;38&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;모든 subclass 의 고유 특성을 다 superclass 에 합치고 필요한 부분만 정보를 넣고 나머지는 null 로 유지한다. job_type을 가지고 어떤 subclass 내용인지 알 수 있다.&lt;/li&gt;
      &lt;li&gt;반드시 disjoint 일 때에만 가능하다. relation 의 속성값은 항상 atomic value 여야 하므로 overlapping 인 경우 job_type 이 multi-value 가 되므로 불가능하다. (단 모든 경우의 수의 job_type value 를 만들어 주면 가능하긴 하다. 이 경우에는 null value 가 많아지는 단점이 생기지만, join이 적게 들어가는 장점이 있다.)&lt;/li&gt;
      &lt;li&gt;만약 partial 이라면 job_type 은 null 이 된다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;MUST BE DISJOINT&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4번 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;/public/img/school/database/39.PNG&quot; alt=&quot;39&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;3번처럼 합치되 job_type 같은 구별 속성이 존재하지 않는다면 뒤에 각각의 subclass 에 대한 Flag를 달아서 사용할 수 있다. overlapping 까지 구현할 수 있다. ex) Mflag, Pflag&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예제&quot;&gt;&lt;strong&gt;예제&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/40.PNG&quot; alt=&quot;40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PERSON 은 1번 방법을 사용했다 (superclass 있음, subclass 있음)&lt;/p&gt;

&lt;p&gt;EMPLOYEE 는 3번 방법을 사용했다 (모두다 superclass 에 합치되 employee_type 으로 구별한다)&lt;/p&gt;

&lt;p&gt;STUDENT_ASSISTANT 는 4번 방법을 사용했다 (모두다 superclass 에 합치되 flag 을 주었다)&lt;/p&gt;

&lt;p&gt;STUDENT 는 4번 방법을 사용했다 (모두다 superclass 에 합치되 flag 을 주었다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;eer-to-relational-mapping-algorithm-1&quot;&gt;&lt;strong&gt;EER to Relational Mapping Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Step 9 : Mapping of union types(Categories)&lt;/p&gt;

&lt;p&gt;각각의 superclass 의 pk 가 다르기 때문에 subclass 에서 사용할 수가 없다. 따라서 superclass 에 subclass 의 key 를 포함하게 하고 이것을 surrogate key 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/41.PNG&quot; alt=&quot;41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;SQL 이 필요한 이유나 정의에 대해서 이해하라&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-structured-query-language&quot;&gt;&lt;strong&gt;SQL (Structured Query Language)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Declarative language 로서 what to do 에 관해 질의한다.(procedural language 는 how to execute 를 지시하고 Relational Algebra &amp;amp; Relational Calculus 등이 있다). DBMS 에 의해 실행순서가 조절되고 최적화 된다.&lt;/p&gt;

&lt;p&gt;Relation =&amp;gt; table&lt;/p&gt;

&lt;p&gt;Tuple =&amp;gt; row&lt;/p&gt;

&lt;p&gt;Attribute =&amp;gt; column&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sequel-structured-english-query-language&quot;&gt;&lt;strong&gt;SEQUEL (Structured English Query Language)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;70년대에 IBM에서 개발되었고, 회사들 마다 standard 한 기준이 필요해져서 만들어졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-schema&quot;&gt;&lt;strong&gt;SQL schema&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;relation schema 를 database system 에 집어넣기 위해 필요하다&lt;/p&gt;

&lt;p&gt;동일한 데이터베이스에 있는 table 및 기타 construct 로 구성되며 schema name + authorization identifier + descriptors for tables, constraints, view, domains, and other constructs 로 구성된다. 여기서 authorization identifier 는 DB 관리자이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AUTHORIZATION&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;catalog&quot;&gt;&lt;strong&gt;Catalog&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;스키마의 집합체이다. 도메인 정의 같은 요소들을 공유한다. Integrity constraint 들을 공유한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;information_schema&quot;&gt;&lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;스키마에 대한 정보를 저장하고, table 이 어떤것이 있고, 각각의 속성이 어떤 것이 있는지 등등을 저장한다. 제약조건에 대한 정보 및 도메인 정의도 같은 스키마 안에서 공유된다.&lt;/p&gt;

&lt;p&gt;oracle 에서는 meta-data 라고 부르기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-table&quot;&gt;&lt;strong&gt;Create Table&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;relation 이름, 속성이름, constraints 등이 포함된다&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMPLOYEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-type&quot;&gt;&lt;strong&gt;Data type&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;어떤 데이터 타입인지 설정한다.&lt;/p&gt;

&lt;p&gt;고정길이(CHAR(n))와 가변길이(VARCHAR(n),CLOB) 도 가능하다. 가변길이는 디스크 용량을 압축해서 사용할 수 있다. CLOB 이란 character large object 로 4000자 이상인 경우이다. byte 단위에서는 BLOB을 사용한다. (BLOB은 주로 사진파일이나 문서파일을 적용)&lt;/p&gt;

&lt;p&gt;interval data type 은 시간의 차이를 의미한다.&lt;/p&gt;

&lt;p&gt;속성 데이터형을 정의할 수 있다. 마치 함수처럼&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DOMAIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN_TYPE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;specifying-constraints-in-sql&quot;&gt;&lt;strong&gt;Specifying Constraints in SQL&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/42.PNG&quot; alt=&quot;42&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NOT NULL constraint : primary key 또는 다른 null 값을 허용하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default value : 초기값을 설정한다. DEFAULT &lt;VALUE&gt;&lt;/VALUE&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;base table : create table로 선언된 relation 의 모습&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;virtual table :  view 로 보여주게끔 만든다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 referenced 된 tuple 을 삭제하려 할 때 기본값은 reject 이다. 같이 사라지게 하는것이 cascade, referencing tuple 의 foreign key를 null 이나 기본값으로 바꾸는 것이 SET NULL/SET DEFAULT 이다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/database/43.PNG&quot; alt=&quot;43&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DROP SCHEMA/DROP TABLE (스키마나 테이블 삭제)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;RESTRICT : 스키마에 아무것도 없으면 삭제한다. 있으면 삭제하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ALTER TABLE&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;속성 추가, 속성 삭제, value 삭제 및 기본값 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Database Basic Concept</title>
   <link href="jgtonys.github.io/school/2018/10/20/database-1/"/>
   <updated>2018-10-20T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2018/10/20/database-1</id>
   <content type="html">&lt;h2 id=&quot;database-definition&quot;&gt;&lt;strong&gt;Database Definition&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;컴퓨터의 활용 범위가 확대됨에 따라 모든 분야에서 사용하는 관계된 데이터들의 집합&lt;/p&gt;

&lt;p&gt;데이터란 알려진, 또는 기록된 사실들&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;책의 한 페이지, 명함 등&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implicit-properties-of-database&quot;&gt;&lt;strong&gt;Implicit properties of database&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Universe of Discourse (UoD) : mini-world&lt;/p&gt;

&lt;p&gt;고유의 의미를 가지고 논리적으로 결합된 데이터의 모임이다.&lt;/p&gt;

&lt;p&gt;특정한 목적을 위해 설계, 구현되었다.&lt;/p&gt;

&lt;p&gt;어떤 사이즈나 복잡도에 상관없이 구현이 가능하다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms의-정의&quot;&gt;&lt;strong&gt;DBMS의 정의&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;데이터베이스 관리 시스템(Database Management System) 이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Defining: 데이터의형, 구조, 제약조건 정의&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Constructing: 저장 매체에 데이터를 저장&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manipulating: 특정한 데이터의 질의 및 검색&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sharing : 다양한 사용자들에게 동일한 데이터를 공유&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-system의-구조&quot;&gt;&lt;strong&gt;Database System의 구조&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/1.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Database System 은 DBMS 보다 더 포괄적인 구조이다. (즉 DBMS는 안에 포함된 개념)&lt;/p&gt;

&lt;p&gt;User 가 접하는 Application Programs/Queries 를 통해 DBMS에 접근하며 DBMS 를 거쳐서 Stored Database Definition (Meta-Data) 와 Stored Database 에 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Database System = Application Program + DBMS + Stored Database Definition + Stored Database&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;DBMS는 여기서 중간자 역할을 하며 Queries/Programs 을 처리하는 소프트웨어와 Stored Data 에 접근하는 소프트웨어를 가지고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;defining&quot;&gt;&lt;strong&gt;Defining&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;레코드의 구조를 정의한다. 레코드에 어떤 속성들이 들어가 있는지 정의한다.&lt;/p&gt;

&lt;p&gt;데이터의 형을 정의한다. 각 속성들이 어떤 형을 가져야 하는지 정의한다. (coding scheme, 사용자 정의에 따라 정의할 수도 있다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;constructing&quot;&gt;&lt;strong&gt;Constructing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;데이터를 저장하는 작업이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;manipulating&quot;&gt;&lt;strong&gt;Manipulating&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;검색, 갱신, 첨가, 삭제를 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sharing&quot;&gt;&lt;strong&gt;Sharing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;접근할 수 있는 사용자들끼리 공유할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;file-system-vs-database&quot;&gt;&lt;strong&gt;File system vs Database&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;파일 시스템은 많은 동일한 데이터를 중복해서 별도로 관리하기 때문에 저장공간과 관리 노력에 있어서 비효율적이다. 데이터베이스는 이러한 중복을 줄이고 동시에 공유하게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db-접근의-특징&quot;&gt;&lt;strong&gt;DB 접근의 특징&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;한마디로 데이터 추상화가 가능하기 때문에 사용한다.(데이터를 쉽게 재사용한다)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Self-describing nature of database system&lt;/p&gt;

    &lt;p&gt;DB 의 정의와 DB 그 자체를 포함하고 있다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;catalog(meta-data)&lt;/em&gt; 란 File들의 구조, 데이터의 형, 제약조건을 담고 있다.&lt;/p&gt;

    &lt;p&gt;반대로 파일 시스템에서는 응용프로그램에서 데이터의 정의가 이루어져야 한다.(application-dependent) 그리고 데이터의 정의는 프로그램간 공유가 불가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Insulation between Programs and Data, and Data Abstraction&lt;/p&gt;

    &lt;p&gt;데이터 구조가 catalog 에 저장되어 독립적으로 관리되므로 program-data independence의 특징을 가진다.&lt;/p&gt;

    &lt;p&gt;DB 접근은 program-operation independence 를 object-oriented DBMS 로 구현할 수 있다.&lt;/p&gt;

    &lt;p&gt;DB 접근은 data abstraction 을 통해 직접 데이터를 표현하지 않고 개념적으로 표현할 수 있다. OODB/ORDB 에서는 데이터의 구조와 연산을 추상화할 수도 있다.&lt;/p&gt;

    &lt;p&gt;반대로 파일 시스템에서는 데이터의 구조가 프로그램에 종속적이므로 데이터 구조가 변경되면 프로그램을 변경해야 하고 program-operation independence 가 불가능하며 data abstraction 도 불가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support of Multiple Views of the Data&lt;/p&gt;

    &lt;p&gt;특정 데이터의 view 를 만들어서 보여줄 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sharing of Data and multiuser transaction processing&lt;/p&gt;

    &lt;p&gt;Online Transaction Processing(OLPT) 가 가능하다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Transaction 이란 프로그램을 실행하거나 프로세스를 실행하는 하나 이상의 데이터베이스 접근을 의미한다.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Concurrency Control 이 가능하다. 동시에 접근시 그것을 관리하는 것.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-system의-사용자들&quot;&gt;&lt;strong&gt;Database System의 사용자들&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;크게 Front 와 Behind 로 나뉜다.&lt;/p&gt;

&lt;p&gt;Front : DBA, DB designer, End user, System analysist and application programmers&lt;/p&gt;

&lt;p&gt;Behind : DBMS system designer and implementers, Tool developer, Operators and maintenance personnel.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;DBA는 Database Administrator 로 데이터베이스의 사용을 허가하고(보안유지를 담당), 데이터베이스의 현황과 성능을 감시하고(성능 관리), S/W &amp;amp; H/W 를 관리한다.&lt;/p&gt;

&lt;p&gt;DB designer 는 데이터의 정의와 저장구조를 설계한다. 이 과정에서 DB 사용자의 요구사항을 조사하고 이해한다. View 를 활용하는 사용자이다.&lt;/p&gt;

&lt;p&gt;End user는 일반적으로 데이터베이스를 사용하는 사람이다. casual end user는 DB 사용빈도수가 적지만 다양하고 복잡한 정보를 원하는 중급/고급 관리자이다. naive, parametric end user는 정형화된 질의/갱신 작업을 반복적으로 수행하는 은행이나 예약시스템을 쓰는 사용자이다. sophisticated end user는 데이터에 복잡한 작업을 수행하는 엔지니어나 과학자, 사업분석가 등이다. stand-alone user는 개인 데이터베이스 사용자이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;canned transaction : 정형화된 질의 갱신 작업&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;System analysts and application programmer는 사용자의 요구사항을 분석하는 시스템분석가(canned transaction 을 설계) 와 canned transaction을 관리하기 위한 프로그래밍, 디버깅등을 행하는 응용프로그램 개발자가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms-접근을-사용한-장점&quot;&gt;&lt;strong&gt;DBMS 접근을 사용한 장점&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Redundancy&lt;/p&gt;

    &lt;p&gt;데이터 저장공간을 공유해서 저장공간을 절약하고 데이터를 관리하는 노력을 감소시킨다.(데이터 갱신 일치)&lt;/p&gt;

    &lt;p&gt;반대로 file processing(파일 시스템) 은 동일한 데이터가 중복되어서 관리가 힘들고 동일 데이터를 갱신시 모두 다 갱신해 주어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Authorized access&lt;/p&gt;

    &lt;p&gt;데이터 접근을 허가하는 관리가 이루어지므로 보안에 용이하다. Account privileged(read/write/function)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Persistent storage&lt;/p&gt;

    &lt;p&gt;파일을 처리하는데 DBMS는 변환과정을 자동으로 해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Storage structure &amp;amp; search techniques&lt;/p&gt;

    &lt;p&gt;쿼리를 효율적으로 실행하게 해준다. Query processing optimization(index,buffering,caching) 을 수행한다. 물리적인 DB 디자인을 하고 수정하기도 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backup &amp;amp; Recovery&lt;/p&gt;

    &lt;p&gt;백업과 리커버리가 되어서 올바른 데이터가 유지된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiple User Interface&lt;/p&gt;

    &lt;p&gt;다양한 사용자 유형에게 다양한 인터페이스를 제공해서 숙련도를 지원한다.&lt;/p&gt;

    &lt;p&gt;casual user 에게는 query language, application programmer 에게는 programming language interface, naive user 에게는 form, stand-alone user 에게는 menu-driven, natural language 를 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Represent complex relationship among data&lt;/p&gt;

    &lt;p&gt;데이터 사이의 복잡한 관계를 표현한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enforcing integrity constraint (DB의 semantics)&lt;/p&gt;

    &lt;p&gt;DBMS에 의해서 데이터를 자동 점검한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using Rules &amp;amp; Trigger&lt;/p&gt;

    &lt;p&gt;어떤 변화가 일어났을 때 trigger 를 주어 활성화되게 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;표준화&lt;/p&gt;

    &lt;p&gt;명칭이나 데이터 포맷이나 출력 포맷 등을 표준화할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;응용프로그램 개발 시간의 단축&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유동성&lt;/p&gt;

    &lt;p&gt;변화에 대처가 용이하고 기존 프로그램이나 데이터에 영향이 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최신 데이터 이용 가능&lt;/p&gt;

    &lt;p&gt;많은 사용자 환경에서 concurrency control (은행, 예약) 을 수행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;경제성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms-사용의-범위&quot;&gt;&lt;strong&gt;DBMS 사용의 범위&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;DBMS를 사용하면 최초 투자 규모가 커지고 보안이나 concurrency control, recovery, integrity contraint checking 에서 overhead 가 많이 발생하기 때문에 함부로 사용해서는 효율적이지 못하다.&lt;/p&gt;

&lt;p&gt;간단하고 바뀌지 않는 데이터들이나 실시간으로 요구되어야 하는 데이터나 embedded system 이나 다중 사용자가 접근할 일이 없는 데이터에는 DBMS를 사용하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-model&quot;&gt;&lt;strong&gt;Data model&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;데이터베이스의 구조를 보여주는데 사용되는 개념들의 집합이다.&lt;/p&gt;

&lt;p&gt;데이터베이스의 구조는 데이터에 적용된 데이터타입, 관계, 그리고 제약조건이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Conceptual(High-level) data model&lt;/p&gt;

    &lt;p&gt;가장 보편화된 모습이며 DB 사용자가 이해하는 데이버이스의 구조이다. Entity-Relationship model 이 있다. 여기서 entity 는 실세계의 물건이나 개념에 해당하고 attribute 는 개체의 성질이나 속성, 관계는 둘 이상의 개체간의 관계이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Physical(low-level) data model&lt;/p&gt;

    &lt;p&gt;데이터가 저장된 모습이며 데이터의 저장방법을 기술하고 레코드 포맷과 순서를 보여준다. Access path 란 각 레코드를 찾아가는 포인터 구조를 말하며 Index 와 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implementation(Representation) data model&lt;/p&gt;

    &lt;p&gt;E-R Relationship을 기계가 이해하기에 더 편한 모습이다.(기계가 이해하고 있는 모습) 개념적 데이터 모델과 물리적 모델의 중간 모델이다. 물리적인 상세한 정보를 추상화하면서 데이터의 구조를 표현한다.&lt;/p&gt;

    &lt;p&gt;Relational data model, network data model, hierarchical data model, object data model&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Self-describing data model&lt;/p&gt;

    &lt;p&gt;데이터안에 형과 식을 같이 넣는 모습이다.&lt;/p&gt;

    &lt;p&gt;ex) JSON, XML, Key-value stores &amp;amp; NOSQL 형식이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-schema&quot;&gt;&lt;strong&gt;Database Schema&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;데이터가 어떻게 생겼는지 보여주는 데이터베이스에 대한 설명을 가지고 있다.&lt;/p&gt;

&lt;p&gt;DBMS의 catalog 에 저장된다.&lt;/p&gt;

&lt;p&gt;데이터베이스 설계 시 정의되며 자주 변경되지 않는다.&lt;/p&gt;

&lt;p&gt;제한된 정보 표현을 한다 (데이터 타입이나 제약조건을 표현하지 않는다)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Meta-data : Database Schema + constraints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;schema-diagram&quot;&gt;&lt;strong&gt;Schema diagram&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;스키마를 표현하는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/2.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Schema construct : diagram 의 한 단위&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;instance&quot;&gt;&lt;strong&gt;Instance&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;저장된 데이터 그 자체를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-statesnapshot&quot;&gt;&lt;strong&gt;Database state(snapshot)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;특정 순간의 instance 들의 집합을 의미한다.&lt;/p&gt;

&lt;p&gt;Define : Empty state&lt;/p&gt;

&lt;p&gt;Populated(loaded) : initial state&lt;/p&gt;

&lt;p&gt;Update operations : current state/valid state&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DBMS는 데이터베이스의 상테가 변할 때마다 catalog 에 저장된 meta-data의 스키마/제약조건을 만족하는지 valid state 를 검사한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;three-schema-architecture&quot;&gt;&lt;strong&gt;Three schema architecture&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/3.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;External(view) level : External schema (user view)&lt;/p&gt;

    &lt;p&gt;사용자 그룹의 목적에 따라서 데이터베이스의 일부분을 기술한다.&lt;/p&gt;

    &lt;p&gt;전체 데이터베이스의 형태나 데이터의 물리적 저장 구조는 숨겨진다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Implementation data model 과 conceptual data model 을 사용한다.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conceptual level : conceptual schema&lt;/p&gt;

    &lt;p&gt;사람이 이해하기 위한 전체 database의 구조를 묘사한다.&lt;/p&gt;

    &lt;p&gt;데이터의 물리적 저장 구조는 숨겨진다.&lt;/p&gt;

    &lt;p&gt;Entities, data types, relationships, user operations, constraints 들의 개념들을 표현한다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Implementation data model 과 conceptual data model 을 사용한다.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Internal level : Internal(physical schema)&lt;/p&gt;

    &lt;p&gt;실 데이터가 저장되는 방법을 묘사한다.&lt;/p&gt;

    &lt;p&gt;데이터베이스의 물리적 저장 구조와 access path를 보여준다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Physical(low-level) data model 을 사용한다.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시(대학 database)&lt;/p&gt;

    &lt;p&gt;Physical schema 는 저장된 데이터들의 모습과 나타내는 index 를 보여준다&lt;/p&gt;

    &lt;p&gt;Conceptual schema 는 각 entity의 구조를 보여준다(제약조건,관계,데이터타입 등)&lt;/p&gt;

    &lt;p&gt;External schema 는 특정 view를 보여준다. (ex) course_info )&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mapping : 각 레벨들 사이의 요청이나 결과를 변환해주는 작업&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Logical data independence : 응용프로그램이나 외부 스키마에 영향을 주지 않으면서 개념적 스키마를 독립적으로 변경이 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Physical data independence : 외부/개념적 스키마에 영향을 주지 않으면서 내부 스키마를 독립적으로 고칠 수 있다. 응용프로그램에도 영향을 주지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms-언어&quot;&gt;&lt;strong&gt;DBMS 언어&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;스키마 정의 언어&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DDL (Data Definition Language)&lt;/p&gt;

    &lt;p&gt;개념적 스키마 및 매핑 정의&lt;/p&gt;

    &lt;p&gt;설계된 DB 구조를 DBMS catalog에 입력&lt;/p&gt;

    &lt;p&gt;Conceptual level 과 Internal level의 일부분(store)을 담당하고 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SDL (Storage Definition Language)&lt;/p&gt;

    &lt;p&gt;내부스키마 및 매핑을 정의한다. 요즘의 DBMS에서는 거의 없음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VDL (View Definition Language)&lt;/p&gt;

    &lt;p&gt;물리적으로 존재하는 스키마와 별개로 외부 사용자에게 뷰를 정의하는 언어&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DML (Data Manipulation Language)&lt;/p&gt;

    &lt;p&gt;High-level DML 은 what to get 을 지향한다. non-procedural DML, set-at-a-time DML 등이 있다. ex) SQL&lt;/p&gt;

    &lt;p&gt;Low-level DML 은 how to get 을 지향한다. procedural DML, record-at-a-time DML. ex) GET NEXT&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms-interface&quot;&gt;&lt;strong&gt;DBMS Interface&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;DBA or DB designer : DDL, 권한 명령, 계정 생성&lt;/li&gt;
  &lt;li&gt;Casual end user : menu-based, form-based, natural language, keyword-based, speech input and output interface 를 사용한다.&lt;/li&gt;
  &lt;li&gt;Parametric end user : 특정 업무를 처리하기 위한 interface (은행원의 은행업무 interface)&lt;/li&gt;
  &lt;li&gt;SW programmer &amp;amp; System analyst : DML을 임베디드 환경에서 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms-component-modules&quot;&gt;&lt;strong&gt;DBMS Component Modules&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/4.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DDL compiler : 스키마 정의를 처리하고 DBMS catalog 에 저장한다. (세팅 작업)&lt;/li&gt;
  &lt;li&gt;Query compiler : 쿼리를 분석하고 파싱하여 internal form 으로 컴파일한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Query optimizer : 조인을 하거나 쿼리 알고리즘을 짤 때 가장 최적의 것을 선택하게 한다. System catalog 의 정보를 기반으로 선택한다. Executable code 를 생성해 낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Pre-compiler : 어플리케이션 프로그램에서 DML 명령어를 추출해낸다.&lt;/li&gt;
  &lt;li&gt;DML compiler : DML 명령어를 받아서 데이터베이스 접근을 위해 object code 를 생성해 낸다.&lt;/li&gt;
  &lt;li&gt;Host language compiler : 프로그램의 나머지 부분을 받는다.&lt;/li&gt;
  &lt;li&gt;Run-time database processor : runtime 에서 데이터베이스에 접근한다. R/W operation 을 수행하며 stored data manager 를 요청한다. 통계를 가지고 system catalog 를 업데이트한다. Privileged Commands, executable query plans, canned transactions with runtime parameters 를 실행한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stored data manager : 디스크(데이터베이스 &amp;amp; catalog) 접근을 제어하고, 메모리 버퍼나 데이터 전송 조절 등의 OS I/O를 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Concurrency control and backup and recovery systems&lt;/p&gt;

    &lt;p&gt;Transaction management 를 control 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Database System Utilites : loading (파일을 데이터베이스로 넣는것, 변환), backup, database storage reorganization, performance monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;structure-of-a-dbms&quot;&gt;&lt;strong&gt;Structure of a DBMS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;대표적인 DBMS는 layered architecture를 가진다. 어떤 모습은 concurrency control 과 recovery components 를 보여지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-clientserver-architectures&quot;&gt;&lt;strong&gt;Basic Client/Server architectures&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;모든 어플리케이션이 하나의 OS에 존재하며 서버는 하나밖에 없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/5.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;two-tier-clientserver-architectures&quot;&gt;&lt;strong&gt;Two-Tier Client/Server Architectures&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;분업화된 구조를 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/6.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;three-tier-and-n-tier-architectures&quot;&gt;&lt;strong&gt;Three-Tier and n-Tier Architectures&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;최근 가장 많이 사용되는 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/7.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dbms의-분류&quot;&gt;&lt;strong&gt;DBMS의 분류&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 모델 분류 : 관계형, 네트워크형, 계층형, 객체지향형&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 수 : single-user system, multiuser system(concurrent suers)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사이트 수 : 중앙 집중식, 분산 DBMS (homogeneous DDBMSs, heterogeneous DDBMSs)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;homogeneous DDBMSs : 모든 사이트가 동일한 DBMS 사용&lt;/p&gt;

      &lt;p&gt;heterogeneous DDBMSs : 사이트마다 다른 DBMS 사용&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;목적 : general-purpose DBMS, special-purpose DBMS&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;databse-design&quot;&gt;&lt;strong&gt;Databse Design&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/8.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Requirements Collection and Analysis&lt;/p&gt;

    &lt;p&gt;DB 사용자의 요구를 수집하고 분석한다. 그리고 DB requirements 를 정리한다.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Data requirements : 어떤 데이터가 저장되어야 하는가&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Functional requirements : 데이터를 어떻게 활용할 것인가(조회,삭제,삽입,갱신)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conceptual Design&lt;/p&gt;

    &lt;p&gt;모든 data requirement들을 종합하여 high-level data model(high-level conceptual schema) 로 넘긴다.&lt;/p&gt;

    &lt;p&gt;Entity type, relationship, constraints 를 고려하되 저장에 대한 고려는 하지 않는다.&lt;/p&gt;

    &lt;p&gt;비전문 사용자들과의 상호작용을 위함이다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Conceptual Schema 가 생성된다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functional Analysis&lt;/p&gt;

    &lt;p&gt;Functional requirements 를 high-level transaction 으로 넘긴다.&lt;/p&gt;

    &lt;p&gt;내가 만든 설계에 functional requirements를 적용할 수 있는지 확인한다.&lt;/p&gt;

    &lt;p&gt;개념적으로 이해하기 쉬운 트랜젝션으로 변환해 놓는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Logical Design (Data Model Mapping)&lt;/p&gt;

    &lt;p&gt;상용 DBMS를 사용해서 데이터베이스를 구현한다.&lt;/p&gt;

    &lt;p&gt;상용 DBMS는 일반적으로 구현 데이터 모델로 데이터를 표현한다.&lt;/p&gt;

    &lt;p&gt;Conceptual schema 에서 implementation data model 로의 mapping 이 필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Physical Design&lt;/p&gt;

    &lt;p&gt;내부저장 구조와 access path 를 설정한다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Internal Schema 가 생성된다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Programs Design&lt;/p&gt;

    &lt;p&gt;high-level transaction 을 사용해서 만든다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity-relationship-model&quot;&gt;&lt;strong&gt;Entity-Relationship Model&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;광범위하게 사용되는 개념적 데이터 모델(conceptual data model)로 DB 사용자가 이해하는 데이터베이스의 구조이다. 여기에는 개체(entity), 속성(attribute), 관계(relationship) 이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entity : 실세계에서 물리적 또는 개념적으로 존재하는 것이다. Entity 는 Attribute 값들의 집합으로 표현된다. 기본적으로 ER-diagram 에서 원으로 표기된다.&lt;/li&gt;
  &lt;li&gt;Attribute : Entity 의 성질(속성)을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attribute-의-형태-&quot;&gt;**Attribute 의 형태 **&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Simple(atomic) attribute : 나눌수 없는 속성 ex) 나이&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Composite attribute :  여러개의 속성으로 세분화 될 수 있는 속성 ex) 주소&lt;/p&gt;

    &lt;p&gt;( ) : composite attribute notation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Single-valued attribute : 각 entity당 오직 한개의 값만 갖는 속성 ex) 주민번호&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multi-value attribute : 한개 이상의 값을 가질 수 있는 속성 ex) 좋아하는 색&lt;/p&gt;

    &lt;p&gt;{ } : multi-value attribute notation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stored attribute : 속성값이 DB에 저장된 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Derived attribute : 다른 속성값으로 유된 것&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Null value 의 종류&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Special value : 해당하는 속성에 표현될 수 없기 때문에 null 인 값&lt;/li&gt;
  &lt;li&gt;Not Known : 속성값이 있지만 모르거나 존재 자체를 모르는 null 인 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity-types-entity--sets-keys-and-value-sets&quot;&gt;&lt;strong&gt;Entity Types, Entity  Sets, Keys, and Value Sets&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Entity types : intension이라고도 부르며 스키마에 해당한다. 동일한 속성을 갖는 entity 의 구조를 정의한다.&lt;/li&gt;
  &lt;li&gt;Entity Sets : extension 이라고도 부르며 인스턴스에 해당한다. Entity set에서 특정 entity를 찾기 위한 key attribute가 존재한다. 각 attribute들은 고유의 Value Set(Domain)을 가짐. ER diagram 에서 직사각형으로 표현이 된다.&lt;/li&gt;
  &lt;li&gt;Key attribute : entity와 1:1관계를 가진다. 다수가 될 수도 있다. composite attribute로도 가능하지만 minimal 해야 한다.&lt;/li&gt;
  &lt;li&gt;Key  Constraint : 데이터의 제약조건, entity간에 unique하다&lt;/li&gt;
  &lt;li&gt;Value sets (domain of an Attribute) : 모든 속성값은 domain을 가진다.
    &lt;ul&gt;
      &lt;li&gt;single-valued attribute : 하나의 값만을 가지는 속성&lt;/li&gt;
      &lt;li&gt;multi-valued attribute : set value ex) {1,2,3,4}&lt;/li&gt;
      &lt;li&gt;composite attribute : 모든 경우의 곱으로 표현된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;initial-conceptual-design-of-company-database&quot;&gt;&lt;strong&gt;Initial Conceptual Design of Company Database&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/9.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;부서(DEPARTMENT) 는 Name과 Number를 key attribute로 가지고, Manager와 Manager_start_date를 가진다. 위치(location)은 multi-value attribute 이다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;회사는 부서들로 구성된다. 부서마다 각각 유일한 이름과 번호를 갖고 부서를
관리하는 부서장이 존재한다. 모든 부서장들에 대해서 부서장직의 시작날짜
를 기록한다. 또한 한 부서는 여러 군데 있을 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;과제(PROJECT) 는 Name 과 Number를 key attribute로 가지고, loaction과 controlling department 를 가진다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;각 부서는 여러 개의 과제를 수행하고, 각 과제는 유일한 이름과 번호를 가지
며 한 위치에 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직원(Employee)는 고유한 속성들을 저장하고 Works_on 이라는 multi-value 를 통해 여러가지 과제 수행을 알려준다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;모든 직원의 이름, 주민등록번호, 주소, 월급, 성별, 생일을 저장한다. 각 직원
은 한 부서에 배정되지만, 여러 개의 과제에도 수행할 수 있다. 이때 과제는
꼭 자신이 속한 부서에서 관리 하는 과제일 필요는 없다. 각 직원이 과제 당
일하는 시간을 기록하고, 각 직원의 관리자를 기록한다.&lt;/p&gt;

      &lt;p&gt;보험을 위해서 각 직원 별 모든 가족 사항(이름,성별,생일,직원과의 관계)을
기록한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dependent 는 관계만을 기록하고 key attribute가 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relationship between entity types (연관관계)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;부서 &amp;lt;-&amp;gt; 직원&lt;/li&gt;
      &lt;li&gt;직원의 속성으로 부서를 본다(domain : all department)&lt;/li&gt;
      &lt;li&gt;부서의 속성으로 직원를 본다(domain : all employees)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relationship Set : 여러개의 세트를 포함한다(비슷한 관계들의 모임)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relationship Type : Entity Type 끼리의 관계로 말한다. ex) 직원 &amp;lt;-&amp;gt; 부서&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relationship&quot;&gt;&lt;strong&gt;Relationship&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;두개 이상의 entity들 사이의 관계를 의미한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Relationship Instance : 어떤 하나의 관계&lt;/li&gt;
  &lt;li&gt;Relationship Set : 비슷한 relationship 들의 세트. 하나의 n-ary relationship set R 은 n 개의 entity set 과 관계가 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relationship Type R : Relationship instance 들의 set 을 정의한다. n 개의 entity type E1,E2,…,En 간의 결합 집합이 R 이다. 이때 E1,E2 등은 R에 participate 한다고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Degree : relationship type 에서 참여하는 entity type의 개수&lt;/li&gt;
  &lt;li&gt;Role Name : relationship 에서의 entity type 의 역할이며 대부분 entity 이름으로 표현한다.&lt;/li&gt;
  &lt;li&gt;Recursive relationship : 하나의 relation 에 같은 entity 가 묶여있는 경우 서로 recursive 하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;constraints-on-relationship-types&quot;&gt;&lt;strong&gt;Constraints on Relationship Types&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Relationship에 미니월드의 constraints 를 표현한다.&lt;/p&gt;

&lt;p&gt;구조적인 제약조건(structural constraints)로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cardinality ratio : relationship instance 에 참여할 수 있는 entity 의 최대 개수를 나타내는 것이다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;1:1, 1:N, M:N 등이 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Participation : relationship type 을 통해 다른 entity 와 연결된 entity 의 존재를 의미한다.&lt;/p&gt;

    &lt;p&gt;Total participation (existence dependency) 은 항상 하나 이상의 entity 와 관계가 있다는 것을 의미하며 ER diagram 에서 두줄로 표현한다.&lt;/p&gt;

    &lt;p&gt;Partial participation 은 일부만이 관계를 형성한다는 것을 의미하며 ER diagram 에서 한줄로 표현한다.&lt;/p&gt;

    &lt;p&gt;ex) 모든 department 가 manager 가 있어야 한다면 manage relation에 department 는 total participation 이 걸려야 한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/database/10.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Weak entity : 스스로 내가 가진 entity를 구분할 수는 없으나 속성값들의 조합을 보고 구분할 수 있는 entity. 스스로는 identified 될 수 없으며 owner entity 의 primary key 를 통해 구별될 수 있다. Weak entity set 은 identifying relationship set 에 항상 total participation 되어야 한다.&lt;/li&gt;
  &lt;li&gt;Owner entity : weak entity의 일부 속성과 조합을 통해 identify 가능하게 해준다. Owner entity 와 weak entity 는 항상 1:N 의 관계를 가져야 한다.&lt;/li&gt;
  &lt;li&gt;Partial key : 동일한 owner entity와 연결되어 entity를 유일하게 찾는 key. ER diagram 에서 dot line으로 표현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attribute-migration&quot;&gt;&lt;strong&gt;Attribute migration&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1:1 - 어느쪽으로든 옮겨서 표현해도 된다.&lt;/li&gt;
  &lt;li&gt;1:N - N 쪽으로 옮겨서 표현해도 된다.&lt;/li&gt;
  &lt;li&gt;M:N - multi-value 로 표현하기 보다는 relation 으로 표기하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;alternative-notation-for-sturctural-constraint&quot;&gt;&lt;strong&gt;Alternative notation for sturctural constraint&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;entity E &amp;lt;- (min, max) -&amp;gt; relationship type R 으로 표현할 때 min = 0 이면 partial participation 이고, min &amp;gt; 0 이면 total participation 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/11.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;naming-convention&quot;&gt;&lt;strong&gt;Naming convention&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;스키마 요소 이름에서 entity type 은 단수로 사용하고, entity type 과 relationship type 은 대문자로 작성한다. Attribute 이름은 첫문자만 대문자로 작성한다. Role name 은 소문자로 작성한다.&lt;/p&gt;

&lt;p&gt;entity type name 은 명사, relationship type name 은 동사, attribute name 은 entity type name 을 묘사하는 명사여야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity-vs-attribute&quot;&gt;&lt;strong&gt;Entity vs Attribute&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;어떤 속성을 속성인 채 남겨 두어야 할까 아니면 entity 로 만들어야 할까?&lt;/p&gt;

&lt;p&gt;만약 이 속성이 여러개로 나타날 수 도 있다면 multi-valued atrribute 로 만들고, 이 속성의 세부적인 속성들이 이용될 수도 있다면 composite attribute 로 만든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/12.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그림 1 처럼 Employee 가 Department 에서 일한시간(works_for from to) 을 적을때는 원래것을 지우거나, 생성하지 못하거나 constraint 가 걸려버린다.&lt;/li&gt;
  &lt;li&gt;그림 2 처럼 생성하면 Duration(entity)을 주어 복수의 relation을 생성할 수 있게 한다. (옛 data를 보존할 수 있다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity-vs-relationship&quot;&gt;&lt;strong&gt;Entity vs Relationship&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/13.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Employee가 어떤 Deparment의 매니저인데  언제부터 얼마까지 사용할 수 있는가에 대한 예시인데, 부서가 다르다면 다른 relation으로 나타나므로 문제가 되지 않는다. 다만 예산이 relationship으로 관리가 되면 갱신될때마다 모든 relation을 갱신해 주어야 한다.&lt;/li&gt;
  &lt;li&gt;계좌 entity 를 생성해 주면 위의 문제가 해결된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;binary-vs-ternary-relationships&quot;&gt;&lt;strong&gt;Binary vs. Ternary Relationships&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;어떤것을 binary 로 ternary로 구현해야하는가?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/14.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;직원에게 가족이 있는데 직원 가족의 보험 정책이 Policy 객체이다. 단 모든 policy는 한명의 employee에 의해 관리가 된다. 그러므로 여러명의 부양가족에 여러개의 policy를 적용할 수 없다.&lt;/li&gt;
  &lt;li&gt;Dependent를 weak entity로 표현하면 해결된다. employee 와 policy 관계가 1:N 이 되며 또한 policy 와 dependent 의 관계가 1:N 이 되므로 한명의 employee 가 자신의 부양가족들을 하나의 policy 로 관리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/15.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;S 는 P 를 제공하고, D 는 S 가 P 를 제공하는 것을 허락하는 역할을 한다. 어떻게 Quantity 를 저장하고 binary relationship 으로 나타낼 수 있을까?&lt;/p&gt;

&lt;p&gt;(a) 는 ternary 로 나타낸 모습이다.&lt;/p&gt;

&lt;p&gt;(a) 의 예시를 바꾼 (b)는 모호하다. Supplier 가 Project에 연결되는지 알 수 없다. 왜냐하면 Part 와 Supplier 의 관계와 Project 와 Part 의 관계가 같지 않고, Supplier 또한 Project 에 연결되는지 알 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;만약 꼭 binary로 만들어야겠다면 weak entity로 만들어서 (c)처럼 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/16.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에도 마찬가지로 위의 (b)와 같은 모호함이 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/database/17.PNG&quot; alt=&quot;complete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(b)는 JOB_OFFER가 없을때는 감안하지 않는다.&lt;/p&gt;

&lt;p&gt;(c) 는 틀린 모양.&lt;/p&gt;

&lt;p&gt;(e) 는 어떤 회사에 누군가 지원을 했다면  interview에 저장하고 이전 지원 기록들도 남겨 둘 수 있다. 또한 그 인터뷰가 Job_offer에 의해서 일어난 것도 알 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이러한 개념을 aggregation 이라 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary-of-conceptual-design&quot;&gt;&lt;strong&gt;Summary of Conceptual Design&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Conceptual design 은 requirements analysis 가 필요하다. 그리고 저장될 데이터의 high-level description 을 만들어 낸다.&lt;/p&gt;

&lt;p&gt;주로 ER 모델로 표현이 되는데 entity, relationship, attribute, weak entities, ISA hierarchies, aggregation 등으로 구성된다.&lt;/p&gt;

&lt;p&gt;몇가지 무결성 제약조건들이 표현될 수 있는데, key constraints, participation constraints, foreign key constraints 등이 표현될 수 있다.(relationship set 의 definition 에서) 그러나 몇가지 constraints 들은 ER 모델에서 표현 될 수 없다.&lt;/p&gt;

&lt;p&gt;ER design은 주관적이여서 많은 방법이 있을 수 있다. FD information 과 normalization 은 design 하는데 유용한 기술이 될 수 있다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Compiler Design : DFA & NFA Quiz</title>
   <link href="jgtonys.github.io/school/2018/10/15/compiler-design-dfa-quiz/"/>
   <updated>2018-10-15T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2018/10/15/compiler-design-dfa-quiz</id>
   <content type="html">&lt;p&gt;Regular Expression, Design deterministic finite automata, Thompson’s construction algorithm, Subset construction algorithm 를 사용하여 문제를 풀고 있다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Q. Given the alphabet Σ ={−,+, x, y, z,0,1} and the below regular expression, which strings are valid? (Mark one or more.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R: (−|+|epsilon) (x|y|(0|1)*) z (0|1)*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(a) −xz1&lt;/p&gt;

&lt;p&gt;(b) −xz&lt;/p&gt;

&lt;p&gt;(c) yxz&lt;/p&gt;

&lt;p&gt;(d) epsilon&lt;/p&gt;

&lt;p&gt;(e) 01z−1&lt;/p&gt;

&lt;p&gt;(f) +011z1&lt;/p&gt;

&lt;p&gt;(g) +x&lt;/p&gt;

&lt;p&gt;(h) zx&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;(a), (b), (f)&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Q. Given the regular expression below, which strings are valid? (Mark one or more.) Note: “[a−z]” denotes lower-case characters, “[A−Z]” denotes upper-case characters, and “[0−9]” denotes the digits from 0–9.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R: [a−z] ( [a−z] | [A−Z] | [0−9] | _ )*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(a) x_&lt;/p&gt;

&lt;p&gt;(b) _x&lt;/p&gt;

&lt;p&gt;(c) yx0z&lt;/p&gt;

&lt;p&gt;(d) epsilon&lt;/p&gt;

&lt;p&gt;(e) ada1&lt;/p&gt;

&lt;p&gt;(f) a_d_a_1&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;(a), (c), (e), (f)&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Q. Write regular expressions for the following languages whose alphabet is Σ ={0,1}.&lt;/p&gt;

&lt;p&gt;(a) All possible strings, including the empty string.&lt;/p&gt;

&lt;p&gt;RE : &lt;code class=&quot;highlighter-rouge&quot;&gt;(0|1)*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(b) The empty string.&lt;/p&gt;

&lt;p&gt;RE : epsilon&lt;/p&gt;

&lt;p&gt;(c) The string 1011&lt;/p&gt;

&lt;p&gt;RE : (1011)&lt;/p&gt;

&lt;p&gt;(d) The strings 1 and 101.&lt;/p&gt;

&lt;p&gt;RE : (1)(101)&lt;/p&gt;

&lt;p&gt;(e) All strings beginning with 01.&lt;/p&gt;

&lt;p&gt;RE : &lt;code class=&quot;highlighter-rouge&quot;&gt;(01)(0|1)*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(f) All strings that contain exactly two 1’s.&lt;/p&gt;

&lt;p&gt;RE : (0)*(1) (0)*(1)(0)*&lt;/p&gt;

&lt;p&gt;(g) All strings beginning with a 0 and ending with a 1.&lt;/p&gt;

&lt;p&gt;RE : &lt;code class=&quot;highlighter-rouge&quot;&gt;(0)(0|1)*(1)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Q. Design deterministic finite automata (DFAs) to recognize the following languages over the alphabet Σ ={x, y}.&lt;/p&gt;

&lt;p&gt;(a) Every occurrence of the substring yy is followed by an x.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q6_4.PNG&quot; alt=&quot;hw1q6_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(b) Every third symbol is an x.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q6_6.PNG&quot; alt=&quot;hw1q6_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(c) All strings with an even number of x and an even number of y.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q6_5.PNG&quot; alt=&quot;hw1q6_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you build an automaton by hand, it is a good idea to add a description to each state: the description should specify which strings can possibly reach that state.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Q. Use Thompson’s construction algorithm to construct non-deterministic finite au-tomata (NFAs) from the following regular expressions:&lt;/p&gt;

&lt;p&gt;(a) &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|b)*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q5.PNG&quot; alt=&quot;hw1q5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;위에서 S7 은 accepting state 이다(표현을 하지 못했음)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(b) &lt;code class=&quot;highlighter-rouge&quot;&gt;a*(b|c)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q5_2.PNG&quot; alt=&quot;hw1q5_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(c) &lt;code class=&quot;highlighter-rouge&quot;&gt;a(a|b)*a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q5_3.PNG&quot; alt=&quot;hw1q5_3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Q. Use the subset construction algorithm to convert the above NFA for &lt;code class=&quot;highlighter-rouge&quot;&gt;a*(b|c)&lt;/code&gt; to a DFA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFA for &lt;code class=&quot;highlighter-rouge&quot;&gt;a*(b|c)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q5_2.PNG&quot; alt=&quot;hw1q5_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table encoding DFA&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;delta&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{S0,S1,S2}&lt;/td&gt;
      &lt;td&gt;{S1}&lt;/td&gt;
      &lt;td&gt;{S4,S7,S8}&lt;/td&gt;
      &lt;td&gt;{S6,S7,S8}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{S1}&lt;/td&gt;
      &lt;td&gt;{S1}&lt;/td&gt;
      &lt;td&gt;{S4,S7,S8}&lt;/td&gt;
      &lt;td&gt;{S6,S7,S8}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{S4,S7,&lt;strong&gt;S8&lt;/strong&gt;}&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{S6,S7,&lt;strong&gt;S8&lt;/strong&gt;}&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;The DFA for &lt;code class=&quot;highlighter-rouge&quot;&gt;a*(b|c)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/hw1q6.PNG&quot; alt=&quot;hw1q6&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Compiler Design : Lexical Analysis</title>
   <link href="jgtonys.github.io/school/2018/10/14/compiler-design-lexical-analysis/"/>
   <updated>2018-10-14T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2018/10/14/compiler-design-lexical-analysis</id>
   <content type="html">&lt;p&gt;2018년도 2학기 연세대학교 Compiler Design Lexical Analysis 수업내용이다&lt;/p&gt;

&lt;p&gt;Compiler에서 Scanner의 Token 생성방법과 알고리즘을 배운다&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;lexical-analysis&quot;&gt;&lt;strong&gt;Lexical Analysis&lt;/strong&gt;&lt;/h2&gt;

&lt;h2 id=&quot;the-role-of-the-scanner&quot;&gt;&lt;strong&gt;The Role of the Scanner&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test5.PNG&quot; alt=&quot;test5&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;소스코드의 캐릭터를 토큰으로 변환한다.&lt;/li&gt;
  &lt;li&gt;&amp;lt;id,x&amp;gt; &amp;lt;=&amp;gt; &amp;lt;id,y&amp;gt; &amp;lt;+&amp;gt; &amp;lt;int literal,21&amp;gt;&amp;lt;;&amp;gt; 등등으로 바꾼다&lt;/li&gt;
  &lt;li&gt;lexeme이란 단어를 구성하는 캐릭터이다. 패턴에 의해 매칭된 문자열&lt;/li&gt;
  &lt;li&gt;토큰은 튜플이다. &amp;lt;Token_type, value&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tokens&quot;&gt;&lt;strong&gt;Tokens&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MiniC 토큰의 types
    &lt;ol&gt;
      &lt;li&gt;identifier : i, j, initial, position 등의 변수를 말한다&lt;/li&gt;
      &lt;li&gt;keywords : if, for, int, float, bool 등의 함수 및 기능들&lt;/li&gt;
      &lt;li&gt;operators : +, -, * , &amp;amp;&amp;amp;, &amp;lt;= 등의 연산자&lt;/li&gt;
      &lt;li&gt;seperators : {},(),[],;,등의 구분자&lt;/li&gt;
      &lt;li&gt;literals : integer literals, float, bool, string 등의 값(value)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;각각의 토큰은 언어에 따라 달라진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tokens-can-be-described-by-patterns&quot;&gt;&lt;strong&gt;Tokens can be described by patterns&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pattern : 특정 토큰 타입의 lexeme 을 설명하는 규칙&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;INTLITERAL,ID,+,if 등&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;패턴은 세트 안에 있는 각 문자열에 맞아야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;formal notation 이 필요하다&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;프로그래밍 언어의 토큰을 구체화하게 한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test6.PNG&quot; alt=&quot;test6&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특정 패턴 X에 의해 설명된 lexeme은 X의 언어라고 한다.(language of X)&lt;/li&gt;
  &lt;li&gt;we write &lt;strong&gt;L(X)&lt;/strong&gt; to denote the language of pattern X =&amp;gt; Pattern 이 X 이고 lexemes 들의 집합이 L(X)이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string-concatenation&quot;&gt;&lt;strong&gt;String Concatenation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;ex) x and y are strings, xy is the string formed by appending y to x&lt;/p&gt;

&lt;p&gt;ex) key + board = keyboard&lt;/p&gt;

&lt;h2 id=&quot;set-operations&quot;&gt;&lt;strong&gt;Set Operations&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test7.PNG&quot; alt=&quot;test7&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Examples&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test8.PNG&quot; alt=&quot;test8&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;regular-expressions-inductive-definition&quot;&gt;&lt;strong&gt;Regular Expressions (inductive definition)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;REs 는 pattern 을 묘사하는데 사용된다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regular expression r 은  lexeme 들의 집합인 L(r) 을 묘사하는 패턴이다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lexeme 들은 alphabet(시그마로 표현됨) 의 character로 부터 만들어진다. alphabet 으로 부터의 character 들을 ++밑줄++ 그어서 표현한다(notation)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;R1 : epsilon 는 epsilon 세트를 의미하는 RE 표현이다&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;R2 : 만약 ++a++ 가 alphabet 에 있다면 ++a++ 의 RE 표현은 {++a++} 를 의미한다&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;L(++a++) &amp;lt;=&amp;gt; {++a++}&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;R3 : 만약 x 와 y 가 RE 표현으로 L(x) 와 L(y) 를 의미한다면, x&lt;/td&gt;
              &lt;td&gt;y 는 L(x) cup L(y) 를 뜻한다 (Alternation)&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;R4 : 만약 x 와 y 가 RE 표현으로 L(x) 와 L(y) 를 의미한다면, xy 는 L(x)L(y) 를 뜻한다 (Concatenation)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;R5 : 만약 x 와 y 가 RE 표현으로 L(x) 와 L(y) 를 의미한다면, x* 는 L(x)* 를 뜻한다 (Repetition,Closure)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Examples1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test9.PNG&quot; alt=&quot;test9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test10.PNG&quot; alt=&quot;test10&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;precedence-rules&quot;&gt;&lt;strong&gt;Precedence Rules&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Precedence rules 은 RE의 모호함을 없애는 것에 필요하다&lt;/p&gt;

    &lt;p&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;a + b * c = a + (b * c)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Parenthesis 를 사용해서 해결할 수 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Precedence of regular expression operators is closure, then concatenation, then alternation&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-token-specifications-using-res&quot;&gt;&lt;strong&gt;Example Token Specifications using REs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test11.PNG&quot; alt=&quot;test11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test12.PNG&quot; alt=&quot;test12&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-regular-expressions&quot;&gt;&lt;strong&gt;Writing Regular Expressions&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby binary literals : binary number 앞에는 “0b” 가 존재한다. 그리고 한쌍의 binary digit 사이에 userscore 가 포함될 수 있다. 그러나 underscore 앞 뒤에는 digit 이 꼭 존재해야 한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0b001011, 0b01&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0b0_101, 0b11_01&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;NOT*&amp;amp;&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0b_1, 0b1_&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ada identifiers : letters, digits, underlines 사용이 가능하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;_A&lt;/code&gt; 나 &lt;code class=&quot;highlighter-rouge&quot;&gt;A__B&lt;/code&gt; 등은 불가능하다.&lt;/p&gt;

    &lt;p&gt;A letter followed by any number of letters, digits, and underlines. An identifier must not end in an underline or have two underlines in a row.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;letter(letter|digit)* (_|epsilon) (letter|digit)*&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A floating point number : decimal point 다음에는 하나 이상의 digit이 와야한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(+|-) digit (digit)* (.) digit (digit)*&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Floating point number in scientific notation : e나 E가 decimal point 한자리 뒤에 와야 한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; (+|-) digit (digit)* (.) digit (((e|E) (+|-|epsilon))(digit)*|epsilon) (digit)*&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shorthand-notations&quot;&gt;&lt;strong&gt;Shorthand Notations&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;하나 이상의 concatenations : r^+^ = rr*&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;없거나 하나의 instance : r? = epsilon&lt;/td&gt;
          &lt;td&gt;r. 표현하면 L(r) cup {epsilon} 과 같다&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;캐릭터 classes : [a-z A-Z]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;minic-re-examples&quot;&gt;&lt;strong&gt;MiniC RE Examples&lt;/strong&gt;&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;token&lt;/th&gt;
      &lt;th&gt;RE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;letter&lt;/td&gt;
      &lt;td&gt;[a-z A-Z_]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;identifier&lt;/td&gt;
      &lt;td&gt;letter(letter|digit)*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;digit*&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;miniC에서는 letter가 _ 를 포함한다&lt;/li&gt;
  &lt;li&gt;Java 에서는 유니코드를 캐릭터셋으로 사용가능하다 (한글이 가능하다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-big-picture&quot;&gt;&lt;strong&gt;The Big Picture&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test13.PNG&quot; alt=&quot;test13&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스캐너가 source code를 토큰으로 바꾸고 패턴으로 쓰여진 specification을 scanner generator가 scanner 에 전달한다.&lt;/li&gt;
  &lt;li&gt;scanner의 행위를 automate 한다 (시간 절약)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;regular-expressions&quot;&gt;&lt;strong&gt;Regular Expressions&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REs 를 사용하여 lexeme 의 mapping 을  token으로 구체화할 수 있다.&lt;/li&gt;
  &lt;li&gt;Automata 이론과 알고리즘 이론을 사용해서 RE 로부터 recognizer 를 자동으로 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test14.PNG&quot; alt=&quot;test14&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;그림에서의 S~0~ 는 initial state(start state) 이고 받은 input을 확인한다. 그리고 S~1~으로 이동한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S~1~는 input에서 decimal digit 을 찾아서 S~2~로 이동한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S~2~ 는 accepting state이다. self transition을 진행(반복)하기도 한다. 유효한 것인지 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 유효한 accpeting state 가 아니라면 S~e~ 로 이동한다. 한번 error state로 가면 돌아올 수 없다. 그냥 오류. 어떤 state에서도 error state로 이동할 수 있다.&lt;/p&gt;

    &lt;p&gt;ex) digit이 먼저오면 이동(r이 아닌경우)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test15.PNG&quot; alt=&quot;test15&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;finite-automata-fa&quot;&gt;&lt;strong&gt;Finite Automata (FA)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test16.PNG&quot; alt=&quot;test16&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;state-transition-function-and-code&quot;&gt;&lt;strong&gt;State Transition Function and Code&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Table encoding RE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test17.PNG&quot; alt=&quot;test17&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Skeleton recognizer&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//as long as we have input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;non-deterministic-finite-automata-nfas&quot;&gt;&lt;strong&gt;Non-deterministic Finite Automata (NFAs)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test18.PNG&quot; alt=&quot;test18&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;맨앞에 epsilon 이 있으면 S~0~ 에서 S~1~로 이동.&lt;/li&gt;
  &lt;li&gt;S~1~은 두개의 transition을 가진다. (a에서)&lt;/li&gt;
  &lt;li&gt;이런 것을 Non-deterministric finite automaton (NFA) 라 한다.&lt;/li&gt;
  &lt;li&gt;NFA는 table에서 결정할 수 있는 것이 확실하지 않다.&lt;/li&gt;
  &lt;li&gt;NFA는 두개의 NFA를 합치기 쉽다.( epsilon 을 사용해서) 이것을  epsilon -transition이라고도 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;relationship-between-nfas-and-dfas&quot;&gt;&lt;strong&gt;Relationship between NFAs and DFAs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;DFA는 NFA의 특별한 케이스이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DFA는  epsilon transition 이 없으며 하나의 state에서 어떤 두개의 transition이 존재하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DFA는 NFA로 나타낼 수도 있다.(당연히)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NFA는 DFA로 나타낼 수 있다.&lt;/p&gt;

    &lt;p&gt;가능한 state들을 시연한다. 단 하나의 character input 당 하나의 state 가 나타나야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary--nfas-and-dfas&quot;&gt;&lt;strong&gt;Summary : NFAS and DFAs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A FA is a DFA if&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떠한 state도  epsilon -transition 이 없다. 다시 말해 epsilon 인풋에는 trainsition이 존재하지 않는다. Input symbol ++a++ 에 대해 각 state s 마다 s state를 떠나는 최대 한개의 edge 가 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A FA is an NFA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;epsilon -transition 을 포함하거나,  Input symbol ++a++ 에 대해 state s 에서 여러개의 가능한 transition 이 존재할 경우이다.&lt;/p&gt;

&lt;h2 id=&quot;automating-scanner-construction&quot;&gt;&lt;strong&gt;Automating Scanner Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Specification 을 코드로 변환하기 위해서는&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Input language 에 따른 RE 를 적는다.&lt;/li&gt;
  &lt;li&gt;큰 NFA를 만든다.&lt;/li&gt;
  &lt;li&gt;NFA를 돌게하는 DFA를 만든다.&lt;/li&gt;
  &lt;li&gt;DFA의 state 개수를 최소화한다.&lt;/li&gt;
  &lt;li&gt;Scanner code 를 생성한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Scanner generators&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lex 와 Flex 가 있다.&lt;/li&gt;
  &lt;li&gt;알고리즘이 필요하며 주요 issue 는 parser 로의 interface 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Outline&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test19.PNG&quot; alt=&quot;test19&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;re---nfa-using-thompsons-construction&quot;&gt;&lt;strong&gt;RE -&amp;gt; NFA using Thompson’s Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;RE 의 각 symbol 과 operator 를 NFA 로 구성하고 epsilon 을 사용하여 RE의 precedence order 에 따라 합친다. NFA를 합칠 때, state 번호를 재 부여해서 S~0~ 가 start state 가 될 수 있게 하고, 각 state 의 이름은 unique 하게 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test20.PNG&quot; alt=&quot;test20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test21.PNG&quot; alt=&quot;test21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test22.PNG&quot; alt=&quot;test22&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같이 사람은 더 간단하게 만들 수는 있지만, production 을 automate 하는 것에 중점을 맞추자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;thompsons-construction&quot;&gt;&lt;strong&gt;Thompson’s Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Syntax-driven 이다. REs의 구조를 가진다&lt;/li&gt;
  &lt;li&gt;Inductive Base
    &lt;ul&gt;
      &lt;li&gt;REs 의 정의에 의해 NFA 가 구성된다.&lt;/li&gt;
      &lt;li&gt;Inductive step 에서 작은 NFA로 bigger NFA를 만든다.(입실론을 사용해서)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Important : 만약 RE r 에서 symbol ++a++ 가 여러번 나타나면 각각의 ++a++ 에 대해 별도의 NFA를 구성해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test23.PNG&quot; alt=&quot;test23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test24.PNG&quot; alt=&quot;test24&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;subset-construction-nfa---dfa&quot;&gt;&lt;strong&gt;Subset Construction (NFA -&amp;gt; DFA)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test25.PNG&quot; alt=&quot;test25&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;S~1~ 에서 a 가 재귀하는지 S~2~로 가는지 확신할 수 없다. 그러므로 두개의 transition을 병행하여 따라간다.&lt;/li&gt;
  &lt;li&gt;virtual state 라는 것을 만들어서 symbol ++a++ 가 input 일 때 가능한 S~1~ 의 trainsition 인 S~1~과 S~2~를 포함하게 한다.&lt;/li&gt;
  &lt;li&gt;virtual state 는 모든 states의 subset 이다.(non-empty)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test26.PNG&quot; alt=&quot;test26&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;{S~0~,S~1~} 는 start state. 이녀석이 가질 수 있는 가능성은 a로 갈 경우 {S~1~,S~2~} 가 될 수 있고, b로 갈 경우에는 S~1~밖에 존재하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;alogorithm--nfa---dfa-with-subset-construction&quot;&gt;&lt;strong&gt;Alogorithm : NFA -&amp;gt; DFA with Subset Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;On-the-fly simulation 은 RE 가 한번만 사용될 경우 유용하지만 컴파일러가 language 의 token을 계속해서 만들어 내야할 경우에는 적절하지 않다. 그래서 Subset Construction 을 사용한다.&lt;/p&gt;

&lt;p&gt;Subset Construction 은 NFA state 들에 적절히 이용될 수 있다. 각 NFA state 들은 DFA state 가 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test27.PNG&quot; alt=&quot;test27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test28.PNG&quot; alt=&quot;test28&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start state에서의 변환은 epsilon-closure 를 가지고 있다. 그러므로 맨 처음에 start state 에 대한  epsilon-closure 값 (set of states reachable from S~0~) {S~0~,S~1~} 을 Dstates 에 넣는다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;여기서 Dstates 란 DFA -&amp;gt; NFA 를 통해 만들어지는 새로운 states 이다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While 문을 보면 Dstates 가 끝날때까지 반복하며, for 문 안에서는 alphabet 에 포함된 모든 character 당 결과 값들을 계산하도록 되어있다. 처음 반복문에 들어오면 T는 {S~0~,S~1~} 이고, 알파는 a 와 b 가 되는데, 알파 a 에 대한 U의 값은 {S~1~,S~2~} 가 되며 이는 기존의 Dstates 에 포함되지 않았기 때문에 추가한다. 또 알파 b에 대한 U의 값은 {S~1~} 이 나타나고 또한 Dstates 에 추가한다. 마지막으로 각 결과 값을 델타에 저장하고 반복문을 위와 같이 반복한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test29.PNG&quot; alt=&quot;test29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 Subset Construction 을 통한 NFA -&amp;gt; DFA 의 결과로 table을 만들 수 있고, 각각의 Dstates 를 토대로 새로운 DFA 를 만들어 낼 수 있다. 여기서 기존의 NFA state 에서 accepting state 였던 state 를 포함하는 Dstate 는 모두 새로운 DFA 의 accepting state 가 된다.&lt;/p&gt;

&lt;h2 id=&quot;example--nfa---dfa-with-subset-construction&quot;&gt;&lt;strong&gt;Example : NFA -&amp;gt; DFA with Subset Construction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test30.PNG&quot; alt=&quot;test30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test31.PNG&quot; alt=&quot;test31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Subset Construction 에 의해 새롭게 만들어진 DFA 에는 accepting state 가 3개이다.(기존 NFA의 accpeting state 를 포함하는 Dstate 가 3개 이므로). 또한 모든 transition 은 deterministic 으로 변했다.&lt;/p&gt;

&lt;p&gt;적은수의 state는 테이블의 관점에서 보았을 때 유리하다(좋다). 이제 DFA를 더 축약하는 알고리즘을 배운다.&lt;/p&gt;

&lt;h2 id=&quot;dfa-minimization-overview&quot;&gt;&lt;strong&gt;DFA Minimization Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;다른 state와 구별가능한 state를 찾는다&lt;/li&gt;
  &lt;li&gt;구별되지 않는 state는 하나의 state로 표현한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;두개의 state중 하나는 input 값에 의해 accepting state가 되고 다른 하나는 accepting state가 아닌 곳으로 이동하였을 때, 그 두개는 그 input 값에 대해 구별가능한 state라고 한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test32.PNG&quot; alt=&quot;test32&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Partition 의 개념&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{S0,S1,S2,S3} =&amp;gt; {S0,S1},{S2},{S3}&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;// these sets are divided by partition, S0 and S1 is not distinguished&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각각의 state s 는 정확히 하나의 partition p 에 포함된다. 따라서 같은 세트에 있는 state 들은 아직 구별되지 않았다고 하고, 다른 세트에 있는 state 들은 구별되었다고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) 위의 그림에서 s0 와 s1은 구별되지 않았고, 나머지는 구별되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;초기 partition P 는 두개의 세트를 포함한다.&lt;/p&gt;

    &lt;p&gt;하나는 Accepting state F 와 non-accepting state S-F 이다. 이 둘은 Empty string epsilon 에 의해 구별될 수 있다.(재귀)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input character 값 (symbol alphabet) 에 따라서 각각의 state 들이 다른 partition 으로 분리되는지 확인한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test33.PNG&quot; alt=&quot;test33&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dfa-minimization&quot;&gt;&lt;strong&gt;DFA Minimization&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test34.PNG&quot; alt=&quot;test34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initial partition P 는 두개의 state를 포함한다.&lt;/p&gt;

&lt;p&gt;Partition 이 변형 가능한한 split 를 지속하고 변형된 내용을 partition 에 적용한다.&lt;/p&gt;

&lt;p&gt;DFA minimization 의 두가지 불변의 법칙에 의해 알고리즘이 유지된다. 같은 세트에 남아있는 state 들은 어떤 string 에 대해서도 아직 구별되지 않은 state 들이다. 다른 세트로 나누어지는 state들은 어떤 string 에 의해 구별 가능한 state 들이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test35.PNG&quot; alt=&quot;test35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 같은 세트에 있는 state 들이 어떠한 symbol input 에 의해서도 나누어지지(split) 않으므로 하나로 합칠 수 있다. 이 결과 Minimal DFA 를 만들어 낼 수 있다.&lt;/p&gt;

&lt;p&gt;모든 RE language 는 minimal-state DFA (모든 state 이름들이 unique 한) 로 인식될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test36.PNG&quot; alt=&quot;test36&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-driven-vs-direct-coded-scanners&quot;&gt;&lt;strong&gt;Table-driven vs. Direct-coded Scanners&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;트랜지션 테이블을 기준으로 만든 것이 table-driven scanner 이고, 코드로 직접 짜는 것이 direct-coded scanner 이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effieciency 의 측면에서 바라본 table driven vs direct-coded scanner&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Table driven 은 캐시의 문제(cache miss)가 있을 수 있다(만약 table 이 커질 경우)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scanner-generators&quot;&gt;&lt;strong&gt;Scanner Generators&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;C로 만들어진 scanners&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lex(UNIX), flex(GNU’s fast lex, UNIX), mks lex(MS-DOS,Windows,OS/2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Java 로 만들어진 scanners&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JLex (Princenton University), JavaCC(Oracle)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-a-scanner-generator-works&quot;&gt;&lt;strong&gt;How a Scanner Generator Works&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test37.PNG&quot; alt=&quot;test37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DFA 는 두가지로 표현될 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Table-driven code (JLex) 로 표현될 수도 있고, Hard-wired code (직접 짠 코드) 로 표현될 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jlex-example-spec&quot;&gt;&lt;strong&gt;JLex Example Spec&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test38.PNG&quot; alt=&quot;test38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test39.PNG&quot; alt=&quot;test39&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-jlex-on-a-sample-scanner-spec&quot;&gt;&lt;strong&gt;Running JLex on a Sample Scanner Spec&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test40.PNG&quot; alt=&quot;test40&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;limitations-of-regular-languages&quot;&gt;&lt;strong&gt;Limitations of Regular Languages&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;**RE 의 장점 **&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pattern 들을 구체화하는데에 간단하고 강력한 notation&lt;/li&gt;
  &lt;li&gt;빠른 scanner (recognizer) 의 자동 구성&lt;/li&gt;
  &lt;li&gt;많은 pattern 들이 REs 에 의해 구체화 될 수 있음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;만약 이렇게 장점이 많다면 왜 모든 것에 RE 를 사용하지 않을까?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;표현할 수 있는 expression 에 한계가 있다.&lt;/li&gt;
  &lt;li&gt;정해진 N개의 문자열이 오는 경우나, 수학적 표현이나, parentheses match 를 표현할 수 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;결론&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;REs 는 keywords, identifiers, literals, operators 그리고 punctuation character 만 표현할 수 있다. 다른 많은 것들 (expressions, statements, nested statements, …) 은 더 강력한 방법이 필요하다.&lt;/p&gt;

&lt;h2 id=&quot;regular-expressions-and-context-free-grammers&quot;&gt;&lt;strong&gt;Regular Expressions and Context-Free Grammers&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;REs 와 Context-free grammers 로 정의될 수 있는 언어는 다음과 같은 결론을 갖는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;RE 는 CFGs 보다 약한 formalism 을 가진다. RE 에 의해 표현될 수 있는 언어는 모두 CFG에 의해 표현이 가능하지만 반대는 가능하지 않을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RE 에 의해 표현가능한 언어는 regular languages 라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반적으로 “self embedding” 을 하는 언어는 RE 에 의해 표현될 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그래밍 언어는 “self embedding” 을 한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test41.PNG&quot; alt=&quot;test41&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Compiler Design : CourseIntro</title>
   <link href="jgtonys.github.io/school/2018/10/14/compiler-design-course-intro/"/>
   <updated>2018-10-14T00:00:00-05:00</updated>
   <id>jgtonys.github.io/school/2018/10/14/compiler-design-course-intro</id>
   <content type="html">&lt;p&gt;2018년도 2학기 연세대학교 Compiler Design CourseIntro 수업내용이다&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;compiler-design--courseintro&quot;&gt;&lt;strong&gt;Compiler Design : CourseIntro&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이전의 컴퓨터들&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;1940년대 처음으로 나온 전기적 컴퓨터는 굉장히 크고, 스위치와 카드 리더기로 만든 binary machine code 로 프로그램 되었다. 따라서 코드의 재사용이 불가능하고, 유지보수가 힘들었다.&lt;/li&gt;
      &lt;li&gt;‘버그’ 라는 말은 기계에 벌레가 들어가서 나타난 오류에서 파생되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assembly Languages&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;어셈블리 언어는 기계어 명령어를 상징적인 기호로 변환하여 기억하는 ‘니모닉’ 개념으로 표현하기 위해 발명되었다.&lt;/li&gt;
      &lt;li&gt;어셈블리 언어 코드와 기계어는 1대1 매칭이 된다. 따라서 번역하는데 직관적이다.&lt;/li&gt;
      &lt;li&gt;Assembler 는 어셈블리 언어를 기계어로 변환해준다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;기계어와 비교한 어셈블리 언어의 장점&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;니모닉은 인간이 이해하기 쉽다&lt;/li&gt;
          &lt;li&gt;프로그램을 재사용하고(같은 architecture 에서만!) 재배치할 수 있도록 해준다&lt;/li&gt;
          &lt;li&gt;어셈블러를 사용해서 기계어로 변환한다(수동변환보다 더 생산적이다)&lt;/li&gt;
          &lt;li&gt;매크로를 사용할 수 있다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Inline assembly&lt;/strong&gt; : 어플리케이션단의 high level language에 동작속도를 빠르게 하기 위해 assembly language를 적용한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;High-Level Languages&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;1950년대 FORTRAN(FORmula TRANslator) 의 발명으로 시작되었다&lt;/li&gt;
      &lt;li&gt;컴파일러는 기계에 종속적이지 않은(machine-independent) 한 프로그램의 개발을 가능하게 했다. 또는 hardware independent 하다고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compilation&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;컴파일러는 high-level 프로그램을 목표 프로그램의 기계어로 변환시켜준다.&lt;/li&gt;
      &lt;li&gt;컴파일러는 프로그램이 잘못되었는지 판단할 수 있다.&lt;/li&gt;
      &lt;li&gt;컴파일러는 맞는 효과적인 코드를 만든다.&lt;/li&gt;
      &lt;li&gt;컴파일러는 나중에 사용자가 목표 프로그램을 돌릴 수 있게 해준다.&lt;/li&gt;
      &lt;li&gt;compilation 은 두개의 부분으로 나누어진다
        &lt;ul&gt;
          &lt;li&gt;Analysis 단계 : 소스코드에 표현될 명령을 선택한다. 각각의 명령들은 트리구조로 기록된다.&lt;/li&gt;
          &lt;li&gt;Synthesis 단계 : 트리구조를 받아서 명령을 타겟 프로그램으로 변환한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;platform X : 어떤 OS든 + 어떤 하드웨어이든을 지칭&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴파일러 구조&lt;/p&gt;

    &lt;p&gt;Source Code -&amp;gt; Lexical Analyzer -&amp;gt; Syntax Analyzer -&amp;gt; Semantic Analyzer -&amp;gt; Intermediate Code Generator // 여기까지가 Compiler Frontend (Analysis 단계)&lt;/p&gt;

    &lt;p&gt;-&amp;gt; Code Optimizer -&amp;gt; Code Generator -&amp;gt; Target Assembly Program // Compiler Backend(Synthesis 단계)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lexical-analysis-토큰화&quot;&gt;&lt;strong&gt;Lexical Analysis (토큰화)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scanner에 의해 이루어진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CHARACTER들을 토큰으로 바꾼다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;lexeme&lt;/strong&gt;이란 해당 토큰의 스트링 이름이다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;ex) &amp;lt;id,1&amp;gt; 의 lexeme은 “position”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scanner는 공백과 주석을 없앤다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scanner는 문법적 오류나 토큰형성에 문제가 되는 부분을 에러낸다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;syntax-analysis-문법적-오류-체크&quot;&gt;&lt;strong&gt;Syntax Analysis (문법적 오류 체크)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Parser 에 의해 이루어진다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;토큰을 AST로 정리한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문법은 Context-free grammer(CFG)로 정의된다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;CFG는 AST의 구조를 정의한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Parser는 AST가 생성되지 않으면 syntax error 를 생성한다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;이런 오류있는 프로그램은 CFG에 맞지 않는다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;semantic-analysis-의미-체크&quot;&gt;&lt;strong&gt;Semantic Analysis (의미 체크)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AST를 분석함으로서 프로그램의 의미를 분석한다.(Consistency check)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Static semantic checks(compile time)&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;identifier가 사용되기 전에 정의되어있는지&lt;/li&gt;
          &lt;li&gt;identifier가 부적절하게 사용된 경우(함수의 이름, 형변환)&lt;/li&gt;
          &lt;li&gt;함수의 argument 체크&lt;/li&gt;
          &lt;li&gt;type checking (a[2.6],int2float)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Static semantic check 의 예시&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Dynamic semantic checks(run-time)&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;bound를 벗어난 array&lt;/li&gt;
          &lt;li&gt;division by zero&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Dynamic semantic check 의 예시&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//run time check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Dynamic semantic check(run-time) Problems&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;It requires additional checks -&amp;gt; &lt;strong&gt;overhead(SLOW)&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Size of program increases(&lt;strong&gt;Bigger&lt;/strong&gt;)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Semantic check 를 실패하면 semantic error 이다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램의 의미를 분석해서 Decorated AST 를 배출한다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;AST의 형이나 식의 의미를 담은 것이 Decorated AST&lt;/p&gt;

      &lt;p&gt;ex) X + Y 의 operand type&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;여기까지의 단계가 Compiler Frontend (high level)&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;intermediate-code-generation-ast---ir&quot;&gt;&lt;strong&gt;Intermediate Code Generation (AST -&amp;gt; IR)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AST를 IR로 변환한다.&lt;/li&gt;
  &lt;li&gt;IR 은 기계 지시어로 바꾸는 변환을 쉽게 한다.&lt;/li&gt;
  &lt;li&gt;IR 디자인의 사소한 결정이 컴파일러의 속도나 효율에 크게 타격을 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;Popular IRs : ASTs(GCC), Directed acyclic graphs(DAGs), Three address code(3AC), Static single assignment form = SSA (GCC)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code-optimization-메모리효율-증가&quot;&gt;&lt;strong&gt;Code Optimization (메모리,효율 증가)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Code optimizer가 하는일&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;IR을 분석하고 향상시킨다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;실행속도, 파워 소모량, footprint의 감소&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;footprint 란 차지하는 메모리나 효율을 의미한다.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;기초 semantic은 반드시 유지한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대표적인 optimizations&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;상수를 계산한다. (Constant Propagation)&lt;/li&gt;
      &lt;li&gt;쓸모없거나 도달할 수 없는 코드 삭제 (Dead code elimination)&lt;/li&gt;
      &lt;li&gt;덜 자주 실행되는 곳으로 계산코드를 옮김 (Move to out of a loop body)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test1.PNG&quot; alt=&quot;test1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test2.PNG&quot; alt=&quot;test2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code-generation-기계어-생성&quot;&gt;&lt;strong&gt;Code Generation (기계어 생성)&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;타겟 코드를 만들어낸다&lt;/li&gt;
  &lt;li&gt;각 IR instruction 마다 타겟 instruction 을 선택한다&lt;/li&gt;
  &lt;li&gt;프로그램의 각 부분마다 레지스터에 어떤 변수를 저장할지 결정한다
    &lt;ul&gt;
      &lt;li&gt;레지스터의 개수는 변수의 개수에 비해 제한되어있기 때문에  어떤 변수를 레지스터에 저장할지는 중요한 요소이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;compiler-phases-theory-and-tools&quot;&gt;&lt;strong&gt;Compiler Phases, Theory and Tools&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lexical analysis : REs(regular expressions), scanner tools&lt;/li&gt;
  &lt;li&gt;Syntax analysis : parser tools&lt;/li&gt;
  &lt;li&gt;Semantic analysis :  type checking, this is not generator (not automatic)&lt;/li&gt;
  &lt;li&gt;Code optimizations : doing sophisticated analysis for optimizations (data-flow engines, LLVM framework) &amp;lt;- this is not compiler, this is tools&lt;/li&gt;
  &lt;li&gt;Code generation : equally complicated (automatic code generators)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;error-detection-error-reporting-and-recovery&quot;&gt;&lt;strong&gt;Error Detection, Error Reporting and Recovery&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;If compiler finds error, generates the below error&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lexical errors&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;“abc //unterminated string&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Syntax errors&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;a + (2*b //parenthesis&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Semantic errors&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;variable not defined(delcared)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컴파일러는 에러가 난 위치를 정확하게 보고해야 한다.&lt;/p&gt;

&lt;p&gt;에러를 탐지한 후 컴파일러는 복구하고 진행할 수도 있다.(멈추지 않고 계속 에러가 있는지 찾는다)&lt;/p&gt;

&lt;h3 id=&quot;error-recovery--all-error-find---fix-all---recompile-not-1-to-1&quot;&gt;&lt;em&gt;Error recovery : all error find -&amp;gt; fix all -&amp;gt; recompile&lt;/em&gt; (not 1 to 1)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error recovery is optional with the compiler project of this course&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jvm--java-bytecode-primer&quot;&gt;&lt;strong&gt;JVM &amp;amp; Java Bytecode Primer&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JVM&lt;/p&gt;

    &lt;p&gt;Java bytecode를 분석하는 processor 라고 이해 (사실 program)&lt;/p&gt;

    &lt;p&gt;이 프로그램의 목적은 OS 위에서 Java bytecode 를 분석하는것&lt;/p&gt;

    &lt;p&gt;own instruction set, construction set 을 가짐 (마치 processor처럼)&lt;/p&gt;

    &lt;p&gt;higher abstraction level 이라고 함. (CPU는 low abstraction level)&lt;/p&gt;

    &lt;p&gt;=&amp;gt; java exception, java garbage collection 등을 가지므로 higher abstraction level 이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiler : Java bytecode를 생성하는 역할&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test3.PNG&quot; alt=&quot;test3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jvm-stack-and-instruction-set&quot;&gt;&lt;strong&gt;JVM Stack and Instruction Set&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fload_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// load instruction. float value is on to the stack&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fstore_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// store instruction. float value is poped and store it in local variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i2f&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// take int convert to float (topmost stack-element)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bipush&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// push byte value onto the stack&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmul&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perform floating point multiplication of the topmost stack elements,push the result onto the stack&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compute the sum of the two topmost stack elements, push the result onto the stack.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These instructions run on JVM&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JVM IP (instruction pointer) : initially points to 0, increment&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;JVM no need to use registers, use stack.&lt;/li&gt;
  &lt;li&gt;Argument 는 stack 에 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/school/compilerdesign/test4.PNG&quot; alt=&quot;test4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q. 왜 JVM은 stack based 를 사용하는가?&lt;/p&gt;

&lt;p&gt;A. real processor는 register가 있고, JVM은 stack을 사용하므로 완벽하게 맞지 않는다. 어플리케이션의 performance penalty 라고 볼 수 있다(CPU와 비교하여).  stack code is smaller than register code (not many operands),&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MQTT란 무엇인가</title>
   <link href="jgtonys.github.io/iot/2018/07/13/mqtt-test/"/>
   <updated>2018-07-13T00:00:00-05:00</updated>
   <id>jgtonys.github.io/iot/2018/07/13/mqtt-test</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;MQTT&lt;/strong&gt;란 &lt;strong&gt;Message Queuing Telemetry Transport&lt;/strong&gt;의 약자로서 많은 IOT기기들에 최적화된 가벼운 메세징 프로토콜이다. 기존에 웹에서 통신하던 HTTP등의 프로토콜보다 제한적이고 특수한 상황에서 사용할 수 있는 모바일 특화 프로토콜이라고 이해할 수 있다. 여기서는 간단하게 리눅스 환경에서 MQTT 메세지 브로커를 구현해보고자 한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;broker--publisher--subscriber&quot;&gt;&lt;strong&gt;Broker / Publisher / Subscriber&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/mqtt/intro.png&quot; alt=&quot;mqtt-intro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MQTT는 사물인터넷을 사용하기 위해 개발된 TCP 기반의 프로토콜로서
낮은 전력 낮은 대역폭 낮은 성능의 환경에서도 사용이 가능하다.
통신하는 방법은 크게는 publisher/subscriber로 진행이 되며 중간에는 브로커(Broker)가 존재한다.&lt;/p&gt;

&lt;p&gt;통신의 과정을 설명하자면, Publisher(센서 장치)가 데이터를 브로커에게 전달한하면 각 Subscriber(출력장치 또는 처리 장치)에서 데이터를 받아온다.&lt;/p&gt;

&lt;p&gt;이때 각각의 데이터를 주고받을 때 어디로 데이터를 받을지를 정해주는 것이 Topic이다. 각 Publisher는 Topic을 정하고, 그 Topic을 구독하는 Subscriber가 해당 데이터를 받는다. 반대로 해당 Topic을 구독하지 않는 Subscriber는 데이터를 받지 못한다.&lt;/p&gt;

&lt;p&gt;배포한 최초의 코드는 이더리움 블록체인에 영구적으로 존재하기 때문에 결점이 있는 코드를 올리게 되면 그냥 못쓰는 DApp이 되어버린다. 그래서 솔리디티에는 보안이 가장 큰 이슈가 될 수 밖에 없다. 반대로 완벽한 스마트 컨트랙트를 검증하고 배포를 했다면, 그대로 영구적으로 실행될 것이라는 것을 의심의 여지 없이 확신할 수 있다. 제3자가 수정을 하거나 예상치 못한 결과를 자아낼 수 없다는 것을 뜻한다.&lt;/p&gt;

&lt;h2 id=&quot;mqtt-test&quot;&gt;&lt;strong&gt;MQTT TEST&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;linux mint에서 테스트 하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mqtt-broker-설치&quot;&gt;MQTT Broker 설치&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;mosquitto&lt;/strong&gt; 는 MQTT 브로커를 실행할 수 있는 오픈소스이다. 이 브로커는 publish/subscribe를 위한 커맨드라인 유틸리티까지 제공한다.&lt;/p&gt;

&lt;p&gt;따라서 리눅스에 Mosquitto를 설치해 보도록 하겠다.&lt;/p&gt;

&lt;p&gt;패키지 매니저에서 mosquitto 와 mosquitto-clients 를 직접 설치하거나 아래와 같이 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mosquitto
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mosquitto-clients
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/mqtt/mosquitto_install.png&quot; alt=&quot;mosquitto-install&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mosquitto-실행하기&quot;&gt;mosquitto 실행하기&lt;/h3&gt;

&lt;p&gt;Mosquitto는 디폴트로 1883번 포트를 사용하며 보안기능이 모두 꺼져 있으므로 추후에 보안을 위한 셋팅을 해주어야 할 필요가 있다.&lt;/p&gt;

&lt;p&gt;이 브로커가 어떤 작업들을 수행하고 있는지 알기 위해서 verbose모드로 실행하도록 해보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 아래와 같은 에러가 나오지 않는다면 이 작업은 스킵해도 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/mqtt/mosquitto-error1.png&quot; alt=&quot;mosquitto-error1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1883번 포트를 이미 사용하고 있다는 에러가 나오면서 브로커가 실행되지 않는다.
이는 mosquitto 브로커가 설치됨과 동시에 실행이 되어 있어 나타나는 에러이다. 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef | grep mosquitto&lt;/code&gt; 를 실행하고 이미 실행되어있는 mosquitto 프로세스를 강제종료 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo kill 12345&lt;/code&gt; 한 후 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;mosquitto -v&lt;/code&gt; 하면 정상적으로 나타난다.&lt;/p&gt;

&lt;h3 id=&quot;subscriber&quot;&gt;Subscriber&lt;/h3&gt;

&lt;p&gt;브로커가 정상적으로 실행되었다면, 이제 Publisher와 Subscriber를 만들어보기 위해 CMD창을 두개 더 띄워 본다.&lt;/p&gt;

&lt;p&gt;하나의 창에 아래와 같은 명령어를 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_sub &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; testSub &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;-h : mosquitto가 실행되고 있는 서버를 지정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;-i : client ID를 의미한다. 생략가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;-t : subscribe 하려는 topic을 지정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉 이 testSub라는 Subscriber는 debug라는 topic에서 오는 통신을 받을 준비가 되었다.(localhost 안에서)&lt;/p&gt;

&lt;h3 id=&quot;publisher&quot;&gt;Publisher&lt;/h3&gt;

&lt;p&gt;나머지 하나의 CMD창에 아래와 같은 명령어를 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_pub &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; testPub &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; debug &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TESTING&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;-m : 커맨드라인에서 보내고자 하는 메세지&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 testPub라는 Publisher는 debug라는 topic으로 TESTING이라는 메세지를 보냈다. 따라서 브로커가 실행되어있는 한, 위에서 지정한 testSub라는 Subscriber는 해당 메세지를 받을 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 테스트 결과이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/mqtt/mqtt_success.png&quot; alt=&quot;mqtt_success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;맨 위의 tilda 창이 MQTT Broker, 왼쪽 아래가 Publisher, 오른쪽 아래가 Subscriber를 나타낸다. Broker를 보면 현재 어떤 일 처리가 일어나고 있는지 확인 할 수 있다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DApp Challenge : Solidity.part2</title>
   <link href="jgtonys.github.io/dapp/2018/05/17/dapp-solidity2/"/>
   <updated>2018-05-17T00:00:00-05:00</updated>
   <id>jgtonys.github.io/dapp/2018/05/17/dapp-solidity2</id>
   <content type="html">&lt;p&gt;지난 포스트에서 크립토좀비 튜토리얼을 이용하여 챕터2까지 졸졸졸 따라다니며 크립토키티를 먹는 나만의 크립토좀비를 생성해 냈다. 이번 포스트에서는 한층 더 깊어진 이더리움 DApp의 속성과 Solidity의 특성들에 대해 공부할 것이다. 크립토좀비 튜토리얼 챕터3를 지금부터 시작한다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;cryptozombie-practice-ch3&quot;&gt;CryptoZombie Practice CH3~&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/cryptozombie-main.jpeg&quot; alt=&quot;cryptozombie-main&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;컨트랙트의-불변성&quot;&gt;&lt;strong&gt;컨트랙트의 불변성&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이더리움 DApp은 일반적인 어플리케이션과 다른 특성을 가지고 있다. 일반적인 어플리케이션은 배포를 한 후 언제든지 수정을 통해 버그를 잡고, 업데이트를 진행할 수 있다. 그러나 DApp은 한 번 이더리움에 컨트랙트를 배포하고 나면 절대 수정하거나 업데이트 할 수 없다. 이것을 컨트랙트의 불변성(Immutable)이라고 한다.&lt;/p&gt;

&lt;p&gt;배포한 최초의 코드는 이더리움 블록체인에 영구적으로 존재하기 때문에 결점이 있는 코드를 올리게 되면 그냥 못쓰는 DApp이 되어버린다. 그래서 솔리디티에는 보안이 가장 큰 이슈가 될 수 밖에 없다. 반대로 완벽한 스마트 컨트랙트를 검증하고 배포를 했다면, 그대로 영구적으로 실행될 것이라는 것을 의심의 여지 없이 확신할 수 있다. 제3자가 수정을 하거나 예상치 못한 결과를 자아낼 수 없다는 것을 뜻한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Contract is Immutable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이러한 특성 때문에 &lt;strong&gt;외부 의존성&lt;/strong&gt; 에 대한 문제를 해결할 방법을 찾아야 한다. 이 말은 무슨 말인가 하면, 외부 컨트랙트에 내 DApp이 의존하고 있다면 외부 컨트랙트에 문제가 생겼을 때를 대비하여 코드를 구성해야한다는 것이다. 예를 들어 저번 포스트에서 공부했던 크립토좀비가 크립토키티를 먹는 코드에서 크립토키티 컨트랙트가 오류가 발생한다면 내 크립토좀비 DApp은 망가지게 된다. 따라서 크립토키티가 문제가 생겼을 때 해당 주소를 바꿀 수 있도록 유동성있게 참조하도록 코드를 짜야 한다.&lt;/p&gt;

&lt;p&gt;유동성 있게 바꾼 참조. &lt;code class=&quot;highlighter-rouge&quot;&gt;setKittyContractAddress&lt;/code&gt;함수를 사용하여 언제든 컨트랙트의 주소를 바꾸어 참조할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kittyContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setKittyContractAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kittyContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 여기에는 심각한 문제가 있는데.. 함수를 외부에서 내가 제어하려고 만들다 보니 external로 선언하게 되고, 그럼 다른 사람도 내 코드를 수정할 수 있다!&lt;/p&gt;

&lt;p&gt;여기에서 솔리디티 &lt;strong&gt;OpenZeppelin&lt;/strong&gt; 라이브러리 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ownable&lt;/code&gt; 컨트랙트를 사용해야 한다. 이 녀석은 안전하고 검증받은 스마트 컨트랙트의 라이브러리로, 이 함수를 사용하는 사람이 소유자가 맞는지를 확인해주고 사용에 제한을 걸어주는 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;역시 솔리디티도 알아야 할 추가 패키지같은게 있다. 갈길이 멀다..&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ownable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OwnershipTransferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;/**&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ownable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`owner`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ownable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;/**&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onlyOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;/**&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Allows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transferOwnership&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onlyOwner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OwnershipTransferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ownable 컨트랙트의 모습이다. 내 컨트랙트의 참조 함수를 이를 이용해 적용해 보겠다.
방법은 간단하다. 메인 컨트랙트에 Ownable 컨트랙트를 상속시키면 된다. 그럼 Ownable 컨트랙트의 onlyOwner 함수 제어자를 내 ZombieFeeding 컨트랙트에서도 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 구조는 이러하다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ZombieFeeding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ownable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아 맞다 그리고 위에 Ownable 컨트랙트의 onlyOwner를 보면 일반 함수가 아니라 modifier 키워드로 되어있는 것을 볼 수 있다. 이건 함수 제어자로서 직접 호출할 수 없고 함수 정의부 끝에 붙여서 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kittyContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setKittyContractAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onlyOwner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kittyContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;onlyOwner를 사용하여 아무나 수정할 수 없는 유동적인 참조(인터페이스)를 만들어 냈다!&lt;/p&gt;

&lt;h2 id=&quot;gas&quot;&gt;&lt;strong&gt;GAS&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;가스가 무엇인지 저저저번 포스팅 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp : Concept&lt;/code&gt;에서 알아보았다. DApp의 기능을 실행할 때마다 지불하는 가상화폐이고 가스는 ETH(이더리움 화폐)를 통해 구입이 가능하다. 가스의 비용은 연산수행에 필요한 컴퓨팅 자원들의 합산으로 계산된다. 사용자들은 내 DApp을 사용하는데 실제 돈이 들어가므로 DApp의 코드 효율은 다른 어플리케이션보다도 훨씬 더 중요하다.&lt;/p&gt;

&lt;p&gt;실제 돈 == GAS 가 되기 때문에 DApp에서는 &lt;strong&gt;구조체 압축&lt;/strong&gt; 이 매우 중요하다. 불필요한 변수의 타입을 압축하고, 데이터 타입을 묶고, 저장공간을 최소화해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;시간-단위&quot;&gt;&lt;strong&gt;시간 단위&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;솔리디티는 시간단위를 제공한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;now&lt;/code&gt; 변수는 현재의 유닉스 타임스탬프를 제공해주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;seconds&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;minutes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hours&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;days&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;weeks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;years&lt;/code&gt; 같은 시간 단위 또한 제공해준다.&lt;/p&gt;

&lt;h2 id=&quot;함수-제어자&quot;&gt;&lt;strong&gt;함수 제어자&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;앞서 사용했던 onlyOwner 함수 제어자같은 녀석들을 직접 만들어서 제어할 수도 있다. 또한 함수 제어자에 인자를 전달해서 그 인자가 요구조건을 만족하는지를 require를 사용하여 검증하고 값을 던져줄 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;view-함수&quot;&gt;&lt;strong&gt;view 함수&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;앞선 포스트에서 데이터를 읽기만 하는 함수는 view함수로 정의한다고 했다. view함수는 데이터를 수정하지 않기 때문에 사용자에 의해 외부에서 호출되었을 때 가스를 전혀 소모하지 않는다. 이는 블록체인 상에서 실제로 어떤 수정도 하지 않기 때문이다. 따라서 View함수를 사용해서 가스를 절약하는 코드를 만드는 것은 매우 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;단 view 함수가 동일 컨트랙트 내의 다른 함수에서 내부적으로 호출되면 가스가 소모된다. 무조건 외부에서 호출되었을 때에만 무료이다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;또한 앞서 이야기 했듯 Storage 데이터는 비용이 많이 드는, 연산이 많은 녀석이다. 그래서 view 함수의 특성을 이용해 memory에 배열을 선언하는 방법으로 비용을 절약할 수 있다. 먼저 접근을 &lt;code class=&quot;highlighter-rouge&quot;&gt;external view&lt;/code&gt;로 하여 storage에서 배열을 직접 업데이트 하지 않고 memory에 배열을 선언한 다음 리턴한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;어쩌다 보니 챕터3까지 완료!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/level3.PNG&quot; alt=&quot;level3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;바로 챕터4로 갑니다.&lt;/p&gt;

&lt;h2 id=&quot;payable&quot;&gt;&lt;strong&gt;Payable&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;크립토 좀비 튜토리얼에서는 payable 함수가 솔리디티와 이더리움을 아주 멋지게 만든다고 주장한다. 이 녀석은 직접 컨트랙트에 이더리움을 보내고 받을 수 있는 특별한 함수이다. 컨트랙트 코드 자체가 모두 이더리움 위에서 존재하기 때문에, 함수 실행과 동시에 컨트랙트에 돈을 지불하는 것이 가능한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payable&lt;/code&gt;로 컨트랙트에 이더를 보낸 후에는 컨트랙트 이더리움 계좌에 이더가 저장된 상태가 된다. 컨트랙트에 있는 잔액을 특정 이더리움 주소로 다시 보내는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt;함수를 써서 구현 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onlyOwner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 구현하면 사용자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.balance&lt;/code&gt;라는 컨트랙트의 잔액을 꺼낼 수 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;챕터4 뒷부분은 새로운 개념보다는 그냥 따라 만드는게 주를 이루어서 쓸 내용이 별로 없었다. 어쩌다 보니 이렇게 챕터4도 완료했다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/level4.PNG&quot; alt=&quot;level4&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DApp Challenge : Solidity.part1</title>
   <link href="jgtonys.github.io/dapp/2018/05/17/dapp-solidity1/"/>
   <updated>2018-05-17T00:00:00-05:00</updated>
   <id>jgtonys.github.io/dapp/2018/05/17/dapp-solidity1</id>
   <content type="html">&lt;p&gt;이전 포스트에서는 DApp을 시작하기 위한 기초적인 배경지식에 대해 공부했다. 이더리움 네트워크는 어떻게 작동하는 것인가를 파악했으니 이제는 실전이다. Solidity를 사용해서 나만의 컨트랙트를 만드는 것부터 시작해 보겠다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;cryptozombie-practice-ch1ch2&quot;&gt;CryptoZombie Practice CH1~Ch2&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/cryptozombie-main.jpeg&quot; alt=&quot;cryptozombie-main&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;기초적인-문법&quot;&gt;&lt;strong&gt;기초적인 문법&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Solidity는 객체 지향형 언어로서 스마트 컨트랙트를 구현하게 해주는 언어이다. 클래스와 비슷하게 변수,함수,구조체 등을 포함하고 상속과 다형성을 지원한다.&lt;/p&gt;

&lt;p&gt;솔리디티 파일의 확장자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.sol&lt;/code&gt; 이고 파일의 맨 처음에 solidity 컴파일러 버전을 지정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pragma solidity ^0.4.19;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하나의 컨트랙트가 있고 그 안에 상태 변수, 이벤트, 함수 등 넣는 구조이다.&lt;/p&gt;

&lt;p&gt;아래는 크립토좀비 튜토리얼 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#컨트랙트 ZombieFactory
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#정수 변수 선언
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaDigits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaModulus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaDigits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;#구조체 선언
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zombies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#함수 선언
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_createZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;zombies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;솔리디티 함수는 view 와 pure라는 제어자가 있는데 해당 함수가 데이터를 보기만 하고 변경하지 않는다면 view 함수, 데이터에 아예 접근하지 않는다면 pure 함수로 정의할 수 있게 해 놓았다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_generateRandomDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;간단한-형변환-연습&quot;&gt;&lt;strong&gt;간단한 형변환 연습&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이더리움은 SHA3의 버전인 keccak256을 내장 해시 함수로 가지고 있다. 이는 입력된 스트링을 랜덤
256비트 16진수로 매핑한다. 따라서 입력 스트링이 달라지면 해시값이 달라지게 된다.&lt;/p&gt;

&lt;p&gt;크립토 좀비 튜토리얼에서는 이 해시 함수를 &lt;strong&gt;의사난수발생기&lt;/strong&gt; 로서 사용한다. 참고로 &lt;strong&gt;의사난수발생기&lt;/strong&gt; 란 소프트웨어에서 연관성이 없는 듯한 수열을 만들어내는 난수 생성 방법이다. 이는 진정한 난수가 아니다.&lt;/p&gt;

&lt;p&gt;아무튼 형 변환 연습을 해보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keccak256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_str&lt;/code&gt; 문자열을 이더리움 내장함수인 keccak256으로 변환한 후 uint로 매핑한다.&lt;/p&gt;

&lt;h2 id=&quot;이벤트&quot;&gt;&lt;strong&gt;이벤트&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이벤트는 컨트랙트가 액션이 발생했을때 의사소통하는 방법이다. 이벤트 선언의 방법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegersAdded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;여기까지는 왠지 그냥 조금 다른 언어의 문법을 배우는 기분이다. 실제로 이게 어떻게 이더리움 네트워크와 통신하는지 등은 아직 잘 모르겠지만 일단 튜토리얼 레슨1 완료하니까 내 크립토 좀비가 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/cryptozombie.PNG&quot; alt=&quot;cryptozombie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;못생겼어..&lt;br /&gt;
링크도 준다ㅎㅎ
https://share.cryptozombies.io/ko/lesson/1/share/Jungyu_Kim&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;이제 챕터2로 넘어갔다. 이거 생각보다 재밌다.&lt;/p&gt;

&lt;h2 id=&quot;매핑과-주소&quot;&gt;&lt;strong&gt;매핑과 주소&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이더리움 블록체인은 자신의 지갑 계좌번호인 주소를 가지고 있다. 즉 여기서 주소는 특정 유저나 스마트컨트랙트가 가지고 있는 고유한 값이라는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;매핑은 구조화된 데이터를 저장하는 방법 중 하나인데, (key-value) 형식으로 저장한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;msgsender&quot;&gt;&lt;strong&gt;msg.sender&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;msg.sender는 모든 함수에서 이용 가능한 전역변수이다. 이녀석은 현재 함수를 호출한 주소를 가리키고 있어서 누가 함수에 접근하였는지 저장할 수 있고, 또한 외부에서 임의로 추적할 수 없도록 하는 보안성을 가지고 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zombieToOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownerZombieCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_createZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zombies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;zombieToOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ownerZombieCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NewZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_createZombie&lt;/code&gt;함수가 실행되었을 때 매핑된 &lt;code class=&quot;highlighter-rouge&quot;&gt;zombieToOwner&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;id(uint)&lt;/code&gt;에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;msg.sender(address)&lt;/code&gt;를 저장하고 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;ownerZombieCount&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;msg.sender(address)&lt;/code&gt;에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;uint&lt;/code&gt;형 을 생성하여(초기에는 0) 변형한다.&lt;/p&gt;

&lt;p&gt;내가 봐도 좀 외계어처럼 설명하기는 했는데, 간단히 말하자면 좀비를 생성한 사용자를 사용자의 id와 묶고, 사용자가 만든 좀비개수를 업데이트하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mapping 이거 겁나게 멋있다.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;require&quot;&gt;&lt;strong&gt;require&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;함수에게 제약조건을 거는 녀석이다. 만약 ~라면 함수를 실행해라 라는 if같은 기능을 제공해 준다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createRandomZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ownerZombieCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randDna&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_generateRandomDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_createZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require(ownerZombieCount[msg.sender] == 0);&lt;/code&gt; 부분은 한 사용자당 이 함수를 한번만 실행하여 좀비를 생성할 수 있도록 제약을 걸어준다.&lt;/p&gt;

&lt;h2 id=&quot;상속&quot;&gt;&lt;strong&gt;상속&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;뭐 이건 익숙한 내용이라 자세한 설명은 패스한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;./zombiefactory.sol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFeeding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드를 분리해서 ZombieFactory를 상속한 ZombieFeeding을 만들었다.&lt;/p&gt;

&lt;h2 id=&quot;storage-memory&quot;&gt;&lt;strong&gt;Storage, Memory&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Storage는 블록체인 상에 영구적으로 저장되는 하드디스크의 느낌이고 Memory는 임시적으로 저장되는 RAM의 느낌으로 이해하면 된다. 실용적으로 설명해 보면 상태변수가 storage고 함수 안에서 선언된 임시 변수들이 memory이다.&lt;/p&gt;

&lt;h2 id=&quot;internal-external&quot;&gt;&lt;strong&gt;Internal, External&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;함수 접근 제어자에는 public, private 말고도 internal 과 external이 있다. internal은 컨트랙트를 상속하는 컨트랙트에서 접근이 가능하도록 하고 external은 컨트랙트 바깥에서만 호출될 수 있고 안에서는 호출될 수 없도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;interface&quot;&gt;&lt;strong&gt;Interface&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;외부의 컨트랙트에서 필요한 데이터를 가져오는 상호작용을 할 수 있게 해주는 기능이다. 간단한 함수명만 정의를 해주면 된다. 아래는 크립토 키티 컨트랙트에서 크립토키티를 가져오는 인터페이스이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#getKitty의 함수 모습
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getKitty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGestating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooldownIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextActionAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;siringWithId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matronId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sireId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Kitty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kitties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isGestating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;siringWithId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooldownEndBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cooldownIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooldownIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nextActionAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooldownEndBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;siringWithId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;siringWithId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;birthTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birthTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matronId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matronId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sireId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sireId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;genes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#우리의 크립토 좀비에서 interface 정의
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getKitty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGestating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooldownIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextActionAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;siringWithId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matronId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sireId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;getKitty 함수 첫줄(반환자까지) 적고 세미콜론 적어주면 정의된다. 이렇게 설정한 Interface는 다음과 같이 활용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ckAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x06012c8cf97BEaD5deAe237070F9587f8E7A266d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kittyContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KittyInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;여차여차해서 챕터2까지 완료했다. 드디어 크립토키티를 먹은 크립토좀비를 생성해냈다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/atekitty.PNG&quot; alt=&quot;atekitty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아오 고양이 먹더니 더못생겼네.&lt;/p&gt;

&lt;p&gt;챕터2가 끝나고 챕터3로 들어가니 부자연스럽게 번역된 한글 문구가 경고를 했다. 재밌는건 여기까지였고 이제 솔리디티에 대한 기술적인 부분을 깊게 다룰꺼야.&lt;/p&gt;

&lt;p&gt;집중력이 조금 떨어진 것 같은데, 마음을 다잡고 다음 포스팅에서 챕터3로 들어가자.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DApp Challenge : Concept</title>
   <link href="jgtonys.github.io/dapp/2018/05/17/dapp-concept/"/>
   <updated>2018-05-17T00:00:00-05:00</updated>
   <id>jgtonys.github.io/dapp/2018/05/17/dapp-concept</id>
   <content type="html">&lt;p&gt;블록체인 플랫폼에서 돌아가는 DApp에 대한 공부를 해보려고 한다. 아직 블록체인 네트워크에 대한 지식도 부족하고 이 구조가 어떻게 운영되는지도 얕은 지식으로만 알고 있지만 포스팅을 하면서 공부한 내용을 추가할 예정이다. 먼저 이더리움 네트워크에 대한 공부를 시작해 보겠다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;solidity&quot;&gt;&lt;strong&gt;Solidity?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/solidity.jpg&quot; alt=&quot;solidity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;블록체인 기술은 신뢰성 있는 P2P 분산 스토리지라고 생각할 수 있다. 여기서 이더리움의 역할은 트랜잭션에 의한 내역 및 가상화폐의 입출금을 가능하게 하는 도구로서 이해했다. 이 도구를 사용하여 &lt;strong&gt;스마트 컨트랙트 프로그래밍을 하는 언어가 Solidity&lt;/strong&gt; 라고 결론 지을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;근데 중요한 건 스마트 컨트랙트는 또 뭐지&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;smart-contract&quot;&gt;&lt;strong&gt;Smart Contract?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;블록체인 계좌를 가지고 있는 사람들끼리 자산을 분배할 수 있는 장치&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;음 아직 감이 안 온다. 좀 더 쉬운 번역이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/contract.jpg&quot; alt=&quot;contract&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;거래가 이루어질 때 계약 조건이 성립되는 과정은 실제 사람이 계약서에 쓰인 내용을 그대로 이행해야만 한다. 하지만 &lt;strong&gt;디지털 명령어로 계약서를 작성하면 자동으로(Smart하게) 계약이 이루어질 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;좋다. 스마트 컨트랙트의 개념을 1994년에 제시한 Nick Szabo의 주장을 내가 이해하기 쉽게 바꾸어 보았다.&lt;/p&gt;

&lt;p&gt;최초의 블록체인 기반 스마트 컨트랙트를 하게 해주는 언어는 비트코인 스크립트인데, 이 비트코인 스크립트는 반복문의 사용불가 및 취득 정보의 제한성 때문에 한계점이 존재했다고 한다.&lt;/p&gt;

&lt;p&gt;이 한계를 극복하기 위해 나온, 스마트 컨트랙트를 위한 블록체인 플랫폼이 이더리움이다. 이더리움은 반복문의 사용을 가능하게 만들면서 DoS의 문제점을 막기 위한 수수료 개념을 도입했다. 이로서 스마트 컨트랙트가 원할하게 이루어질 수 있는 환경이 제공되었다!&lt;/p&gt;

&lt;p&gt;다시 핵심으로 돌아와서 스마트 컨트랙트란
&lt;strong&gt;“우리의 거래를 자동화하고 또 신뢰성 있게 만들어주는 프로토콜”&lt;/strong&gt; 이다. 그럼 어떻게 이 스마트 컨트랙트를 이용해서 거래를 할 수 있을까?&lt;/p&gt;

&lt;p&gt;앞에서 언급한 Solidity를 이용하서 스마트 컨트랙트를 짜고, 그 코드를 EVM이라는 이더리움 가상 머신에서 실행해야만 동작 할 수 있다.&lt;/p&gt;

&lt;p&gt;자 그럼 EVM에 대해 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;ethereum-virtual-machine&quot;&gt;&lt;strong&gt;Ethereum Virtual Machine&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/EVM.PNG&quot; alt=&quot;EVM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EVM이란 이더리움 블락체인 네트워크의 노드들이 접근하는 거대한 서버이다. 여기서 많은 사용자들이 접근하여 데이터를 수정하고 공유하는데, 이 것을 중재하는 것이 EVM의 역할이다. 또 Gas라는 게임머니 같은 개념을 도입해서 수수료의 정책을 조절한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자 그럼 도대체 코드는 여기서 어떻게 돌아가는 건데(feat.developers)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Solidity로 짠 코드는 솔리디티 컴파일러에 의해 기계어로 변환되고 이 변환된 기계어가 이더리움 가상 환경에서 돌아갈 수 있다.&lt;/p&gt;

&lt;p&gt;Solidity -&amp;gt; Ethereum Bytecodes -&amp;gt; Ethereum VM&lt;/p&gt;

&lt;p&gt;이렇게 작동한다. Java로 짠 코드가 Java virtual Machine에서 돌아가는 것과 비슷한 원리이다. 그러나 Solidity로 짠 스마트 컨트랙트는 EVM에서 실행될 때 수수료(Gas)를 지불해야 한다. Gas는 앞에서 언급했듯 작은 경제를 조절하는 수단임과 동시에 비트코인 스크립트의 한계점이었던 반복문의 사용을 허용하되 코드의 남용을 막는 장치 역할을 한다.(똑똑하다..)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;자 이제 완벽하게는 아니더라도 대강의 환경을 이해했다. 이제부터는 직접 코딩이다. 뭐든지 맨땅에 해딩하면서 배우는게 정석이라고 했는데 요즘 이미 많은 분들이 초보자들을 위한 친절한 글들을 많이 써주셔서 사실 맨땅도 아니다.&lt;/p&gt;

&lt;p&gt;처음으로 DApp에 대한 관심을 가지게 되고 또 많이 배우게 된 글을 소개한다.&lt;/p&gt;

&lt;p&gt;https://medium.com/@weekly.teckle/%EC%B4%88%EB%B3%B4%EC%9E%90%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80-dapp-%EB%A7%8C%EB%93%A4%EA%B8%B0-c6ddb0c6651d&lt;/p&gt;

&lt;p&gt;이제 다음번에는 직접 코딩으로 돌아가는 것을 내눈으로 봐야겠다!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux Mint란 무엇인가</title>
   <link href="jgtonys.github.io/os/2018/05/04/linux-mint-preview/"/>
   <updated>2018-05-04T00:00:00-05:00</updated>
   <id>jgtonys.github.io/os/2018/05/04/linux-mint-preview</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;리눅스 민트&lt;/strong&gt; 란 초보자들에게 많이 알려져 있는 우분투 기반으로 만들어진 데스크톱 OS인데, 중요한 차이점은 우분투처럼 Unity 기반이 아니고 Gnome 기반이라는 것이다. 간단하게 말하자면 조금 더 사용자 친화적이고 &lt;strong&gt;UI 및 기타 개발 환경들을 조금 더 매니아&lt;/strong&gt; 틱하게 바꿀 수 있다는 뜻이 된다. 다만 기존에 윈도우나 맥북에서 제공하는 것처럼 모두 셋팅된 환경이 아니라서 인프라 구성에 학을 떼지 않는 사람이 시도해야 할 것 같다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;알게-된-계기&quot;&gt;&lt;strong&gt;알게 된 계기?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2017 맥프레의 구매가 좌절&lt;/strong&gt; 된 상황에서 집에 있는 i3 RAM 8g 512ssd 노트북을 어떻게 하면 개발 최적화 시킬 수 있을까 하다가 생각해낸 대안이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리눅스 기반의 PC로 서버 및 개발 툴들의 사용이 용이해야 함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;리눅스 오픈소스 프로그램들의 사용이 최적화 되어야 함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;맥북 처럼 이뻤으면 좋겠다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 세가지의 관점에 부합하는 OS를 쇼핑하다가 리눅스 민트를 알게 되었는데, 이게 상당히 매력적인 녀석이라는 것을 글을 쓰면서 더욱 알게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;리눅스-민트의-종류&quot;&gt;&lt;strong&gt;리눅스 민트의 종류&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;64bit 기준으로 정리된 사항입니다&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;종류&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;버전&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;사이즈&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cinnamon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linux Mint 18.3 “Sylvia”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8G&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mate&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linux Mint 18.3 “Sylvia”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8G&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Xfce&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linux Mint 18.3 “Sylvia”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.7G&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;KDE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linux Mint 18.3 “Sylvia”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2G&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;공통-권장-사항&quot;&gt;&lt;strong&gt;공통 권장 사항&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RAM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Video&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Disk&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3G&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;256MB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20G&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;OS의 가벼움과 스피디한 작업을 기준으로 나열하였을 때 Xfce,Mate,Cinnamon,KDE 순서대로 가볍다. 현재 민트 커뮤니티에서 발표된 사항으로는 KDE판 리눅스 민트를 제거하기로 하였다고 한다. 공식적인 KDE배포판은 이제 나오지 않지만 이전의 KDE는 지원한다.(대신 보안 업데이트가 불가)&lt;/p&gt;

&lt;p&gt;가장 인기가 좋은 Cinnamon은 나머지 배포판들에 비해 상대적으로 무겁지만 User sophisticated 하고 Gnome3 기반으로 만들어져 있다. 특히 비주얼적인 이펙트가 많아서 역동적이고 깔끔한 데스크탑 환경을 구성하는데 탁월하다. 안정성에 있어서 Mate보다는 뒤쳐지지만 모든 사소한 개발환경들을 정교하게(이쁘게) 구성할 수 있다는 점에서 많은 인기가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/linux-mint-cinnamon.png&quot; alt=&quot;Cinnamon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[Linux Mint 18.3 “Sylvia” Cinnamon]&lt;/p&gt;

&lt;p&gt;두번째로 소개할 배포판은 Cinnamon 보다 가볍고 안정성을 더 추구한 Mate 배포판이다. Cinnamon이 Gnome3 기반으로 구성된 것과 다르게 Gnome2기반으로 데스크톱 환경이 구성되어 있고, 사용자는 더욱 직관적으로 시스템 환경을 구성할 수 있다. 비록 비주얼적인 면에서 Cinnamon에 비해 구식같은 모습을 제공하지만 더 빠르고 급격한 업데이트 없이 버그 없이 안정적이라는 면에서 인기가 좋다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/linux-mint-mate.png&quot; alt=&quot;mate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[Linux Mint 18.3 “Sylvia” Mate]&lt;/p&gt;

&lt;p&gt;세번째로 간략하게 소개할 Xfce는 현재 가장 저사양으로 환경이 구성되는 배포판이다. 소프트웨어 매니저나 필수 코덱들이 로우앤드 PC에서도 원할하게 돌아갈 수 있도록 제공하는 환경이다. 주로 특정한 목적을 위해 집에 굴러다니는 노트북을 쓸만한 개발환경으로 만들기 위해 사용하는 것 같다. 리눅스 커뮤니티에 떠도는 소문으로는 Xfce가 다음 배포판부터 삭제된다는 소문도 돌고 있다.&lt;/p&gt;

&lt;h2 id=&quot;리눅스-민트의-소프트웨어&quot;&gt;&lt;strong&gt;리눅스 민트의 소프트웨어&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;리눅스 민트는 우분투 기반으로 만들어져 현재 독자적인 노선을 달리고 있지만, 우분투에서 돌아가는 익숙한 프로그램들은 모두 다 원할하게 지원이 된다! 여기에서는 리눅스 민트만의 소프트웨어 뿐만 아니라 우분투에서도 인기가 좋은 모든 소프트웨어를 소개한다.&lt;/p&gt;

&lt;h3 id=&quot;clementine&quot;&gt;&lt;strong&gt;Clementine&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 음악전용 플레이어&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;클레멘타인은 음악전용 플레이어로 스트리밍 플레이, 라디오 기능들을 지원하는 감각적인 프로그램입니다.&lt;br /&gt;
현재 1.3.1 버전이 마지막 배포입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;clementine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/clementine.png&quot; alt=&quot;clementine&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;moc&quot;&gt;&lt;strong&gt;MOC&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;터미널 음악재생 플레이어&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MOC는 매우 가볍고 실용성에 매우 충실한 음악 플레이어다. 리눅스 민트에서 개발하는 개발자들에게 무거운 음악플레이어는 부담스러운 선택일 수 있지만 이 MOC는 메모리를 1~3Mb 밖에 차지하지 않으면서도 최근의 여러가지 테마를 곁들이면 매우 감성적인 플레이어가 된다는 점에서 인기가 많다. 또한 리눅스 민트가 제공하는 코덱들과의 상성이 좋다고 알려져 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;moc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행은 터미널에서 mocp를 입력한다.&lt;br /&gt;
아래는 리눅스 민트와 투명터미널 Tilda를 적용한 모습&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/moc.png&quot; alt=&quot;moc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개발자들 눈돌아가는 소리가 들린다. 내가 이미 이 MOC에 꽃혀있는 상태다.&lt;/p&gt;

&lt;h3 id=&quot;gparted&quot;&gt;&lt;strong&gt;Gparted&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 파티션 조정 프로그램&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Gnome Project 에서 관리하는 리눅스계의 파티션 제왕이다. 최근에는 버그도 많이 없고, 사용법도 간단하여 리눅스 기반 OS의 필수 소프트웨어로 자리잡았다.&lt;br /&gt;
필요한 기능들은 모두 들어가 있고, 파일 시스템도 원할하게 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/gparted.png&quot; alt=&quot;moc&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;atom&quot;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;텍스트 에디터&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;사실 이 프로그램은 리눅스 민트나 우분투에 한정된 것은 아니고 윈도우에서도 많이 사용한다. 다만 내가 Atom 을 좋아해서 개인적으로 추천한다.&lt;br /&gt;
컴파일러들만 연동시켜 놓으면 감성적인 IDE가 되고 무엇보다 스스로 조작할 수 있는 패키지가 많다는 것, 또 마우스 없이 키보드로만 개발이 용이하다는 점에서 매우 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/atom.png&quot; alt=&quot;atom&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;preload&quot;&gt;&lt;strong&gt;preload&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;시스템 관리 속도 향상 프로그램&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;메모리에 상주하여 프로세스 실행 속도를 효율적으로 조정해주는 프로그램이다. 최대 10프로까지의 OS 속도 향상에 기여한다는 어마어마한 녀석이므로 꼭 깔아두고 메모리를 감시하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;preload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;grub-customizer&quot;&gt;&lt;strong&gt;grub-customizer&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;grub 부팅 설정 변경 프로그램&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;리눅스 민트를 설치하고 나면 grub 부팅메뉴에서 멍하니 기다리는 시간이 생긴다. 이를 수정하고 추가적으로 UI를 커스터마이징 하는데 많이 쓰이는 프로그램이다.&lt;br /&gt;
설치하기 전에 ppa install 을 선행하고 시스템 업데이트를 해주는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;grub-customizer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/grub-customizer.png&quot; alt=&quot;grub-customizer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;compiz&quot;&gt;&lt;strong&gt;compiz&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스계의 이펙트 마스터&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;실용성과 화려함을 겸비한 창 관리자. 리눅스 양덕들의 말을 들어보면 이것 때문에 리눅스로 온 사람도 있다고 한다. 화려한 이펙트는 조금만 검색해도 영상으로 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/compiz1.JPG&quot; alt=&quot;compiz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/compiz2.png&quot; alt=&quot;compiz2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tilda&quot;&gt;&lt;strong&gt;tilda&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;차별화된 CMD창&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;명령창을 투명하게 만들어서 항상 디자인이 맘에 안들던 cmd를 개발하고 싶게 만들어주는 디자인 툴이다. 많은 사람들이 깔끔함에 반해 사용하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/tilda.png&quot; alt=&quot;tila&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;synapse&quot;&gt;&lt;strong&gt;Synapse&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 검색 도구&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;모든 파일을 총 집합해서 빠르게 검색해주는 검색 툴이다. 이게 얼마나 편하냐 하면 음악 검색, 폴더 검색, 사진 검색, 앱 실행등의 모든 검색을 이 하나의 프로그램으로 찾고 실행할 수 있다. 즉 마우스로 바로가기나 폴더들을 뒤적뒤적 하지 않아도 된다는 뜻이다.&lt;br /&gt;
단축키 제공으로 키보드만으로 검색 후 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/synapse.jpg&quot; alt=&quot;synapse&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;focuswriter&quot;&gt;&lt;strong&gt;Focuswriter&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 글쓰기 도구&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;간편한 글을 쓰거나 메모가 필요할 때 이 프로그램이 제격이다. 무엇보다도 가볍고 마크다운처럼 심플하다. 여러가지 테마도 제공하고 있어서 일정이나 떠오른 아이디어를 적어 놓기에 적합하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/focuswriter.png&quot; alt=&quot;focuswriter&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;webstorm&quot;&gt;&lt;strong&gt;WebStorm&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;최강 Javascript IDE&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트 프론트 및 백앤드 개발의 최강 프로그램. 사실 Atom보다도 더 인기가 많은 녀석이다. 개발자에게 대세 IDE 프로그램은 꼭 써볼 가치가 있다고 생각한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/webstorm.jpg&quot; alt=&quot;webstorm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dbeaver&quot;&gt;&lt;strong&gt;DBeaver&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;무료 통합 SQL Editor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;무료 DB관리 프로그램 중 심플하고 강력한 툴을 제공한다. 하나의 관리 툴로 거의 모든 데이터베이스를 관리하고 CRUD를 제공한다. 물론 phpMyAdmin 이라던가 등등의 유료 DB관리 프로그램들이 훨씬 좋은 기능들과 통신을 선보이겠지만, 일단 무료로 나쁘지 않은 선택이다.&lt;/p&gt;

&lt;h3 id=&quot;libreoffice&quot;&gt;&lt;strong&gt;LibreOffice&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 오피스 프로그램&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;리눅스로 갈아타면서 나타나는 가장 큰 불편함 중 하나인 문서작업(파워포인트,엑셀,워드)의 고민을 해결해 줄 프로그램이다. 호환성이 좋아서 파일이 잘 깨지지도 않고(깨지긴 하지만) 무엇보다 무료로 사용할 수 있어서 메리트가 있다. 리눅스 민트를 사용하면 필수 프로그램이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/LibreOffice.png&quot; alt=&quot;LibreOffice&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;postman&quot;&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;서버 테스팅 툴&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;서버를 구현할 때 http 디버깅은 항상 고달프다. 임의의 request 를 날리고 히스토리 및 해시모드를 지원하며 헤더값을 명료하게 보여줄 수 있는 툴이다. 윈도우에서 사용할 때는 크롬 확장프로그램으로 사용했는데, 리눅스에서는 우분투버전으로 다운받아서 설치 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/postman.jpg&quot; alt=&quot;postman&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vnc-viewer&quot;&gt;&lt;strong&gt;VNC viewer&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;원격 데스크톱 연결&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;다른 PC에 원격을 접속해서 작업을 하고(예를 들어 라즈베리파이) 돌아오는 일이 매우 빈번한 나는 필수적으로 필요한 프로그램이다. 또한 AWS 나 Azure 사용에 있어서도 GUI로 확인하며 개발하기 위해서는 원격 데스크톱 연결이 필수적이다.&lt;br /&gt;
별다를 것이 없는 일반적인 원격 연결 프로그램이다.&lt;/p&gt;

&lt;h3 id=&quot;vlc-player&quot;&gt;&lt;strong&gt;VLC player&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;리눅스 미디어 플레이어&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;개발용 노트북에서 영화나 드라마를 다운로드 받아서 볼 일은 거의 없지만(스트리밍으로 봄) 그래도 미디어 플레이어가 없으면 뭔가 부족한 PC같은 느낌이 든다. 가장 무난하고 코덱문제를 빈번히 일으키지 않는 VLC플레이어를 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/VLC.png&quot; alt=&quot;VLC&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 밖에도 응용 소프트웨어가 아닌 개발환경 설치는 꽤나 많지만, JDK나 PIP등의 설치는 윈도우에서부터 해오던 것이기에 별다를 것이 없어서 따로 올리지 않았다.&lt;br /&gt;
사실 그때 사용했던 명령어들이 리눅스 민트를 사용함으로 더욱 편리해지고 직관적으로 변했기 때문도 있다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;&lt;strong&gt;마치며&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;사실 그냥 우분투의 Unity 환경이 너무 딱딱해보이고 정이 안가서 찾아보게 되었다가 리눅스 민트와 소프트웨어에 반해서 혹하게 된 글이다. 노트북을 리눅스 민트로 바꾸고 좀 사용해 본 다음에 꽤나 맘에들면 데스크톱도 윈10과 멀티부팅으로 바꿀 예정이다. 완벽하게 깔끔+개발 최적화 환경으로 커스텀하기에는 아직 세팅하고 배워야 할 것이 너무나도 많지만, 수많은 능력자들과 리눅스덕들의 충고를 해석하면서 도전해 보겠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;환경세팅이라면 하기도 전에 피로해하는 형 왈 &lt;em&gt;“그냥 맥북을 사”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미 리눅스로 마음이 넘어와서 돌이킬 수가 없다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vuejs SPA boilerplate</title>
   <link href="jgtonys.github.io/web/2018/04/18/vuejs-parcel-spa/"/>
   <updated>2018-04-18T00:00:00-05:00</updated>
   <id>jgtonys.github.io/web/2018/04/18/vuejs-parcel-spa</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Vuejs&lt;/strong&gt; 웹 프레임워크를 사용한 &lt;strong&gt;SPA&lt;/strong&gt;(Single Page Application) boilerplate를 소개한다. 서버는 &lt;strong&gt;nodejs&lt;/strong&gt; 로 간단하게 구현하였고 웹 어플리케이션 번들러는 &lt;strong&gt;parceljs&lt;/strong&gt; 를 사용하였다.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;demo&quot;&gt;&lt;strong&gt;DEMO&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;https://github.com/jgtonys/vuejs-parcel-express-boilerplate&lt;/p&gt;

&lt;h2 id=&quot;간단한-재료-소개&quot;&gt;&lt;strong&gt;간단한 재료 소개&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이 SPA boilerplate를 제작하는데 사용된 재료(조미료)들을 소개하겠다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Material&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vuejs&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frontend Javascript Framework&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://vuex.vuejs.org/en/intro.html&quot;&gt;Vuex&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vuejs state management library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://vuetifyjs.com/ko/&quot;&gt;Vuetify&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Material Design Component Framework&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html&quot;&gt;Vue Router&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SPA Frontend Router&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;http://docs.sequelizejs.com/&quot;&gt;Sequelize&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Nodejs ORM DB management&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;Sqlite3&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Simple SQL Database Engine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://jwt.io/&quot;&gt;JWT&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JSON Web Token&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://ko.parceljs.org/&quot;&gt;Parcel&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Web Application Bundler&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
재료들을 보면 조금 생소한 녀석들이 있을 수 있다. 어떤 오픈소스인지 알아보고 싶다면 위의 링크를 참조하면 좋을 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;구조-잡기&quot;&gt;&lt;strong&gt;구조 잡기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/boilerplate-backbone.PNG&quot; alt=&quot;backbone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진은 위 Demo의 boilerplate 뼈대이다. 일단 이렇게 구조를 잡은 이유는 서버와 클라이언트를 완벽하게 분리하고, 렌더링되는 모든 것을 클라이언트에서 처리하는 SPA를 만들기 위해서이다.&lt;/p&gt;

&lt;p&gt;서버는 Nodejs Express, 클라이언트는 Vuejs로 완벽하게 분리시켜 놓은 모습이다. 클라이언트는 모두 위 사진의 client 폴더에서 독립적으로 돌아갈 수 있다. 폴더의 구조는 사실 내가 스스로 개발하기에 편한 방식으로 만든 것이고, 여러 다른 모습으로 구조를 짤 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;구현-기능&quot;&gt;&lt;strong&gt;구현 기능&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;parcel-bundler&quot;&gt;&lt;strong&gt;parcel bundler&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/parcel.png&quot; alt=&quot;parcel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;번들러&lt;/strong&gt; 란 무엇인가? 부터 간략하게 설명하겠다.&lt;br /&gt; 우리는 개발을 할 때 파일들을 분리하여 작업한다. 이는 개발 편의성과 가독성을 위해 필수적인 사항이다. 또한 MVC, MVVM 패턴으로 아름다운 프로그램을 만들기 위해서도 코드의 분리는 필수적이다.&lt;br /&gt;
코드를 분리하여 웹 어플리케이션을 구성할 경우 모든 분리된 파일들은 각자의 요청과 응답을 받게 되고 이는 속도 감퇴라는 큰 단점 뿐만 아니라 예상치 못한 버그 등으로 인해 개발에 어려움이 생기게 된다.&lt;br /&gt;
이를 해결하기 위해 웹 어플리케이션으로 띄우기 전에 생성된 프론트 자원들을 하나로 묶어(번들링)주는 것이 번들러이다.&lt;/p&gt;

&lt;p&gt;대표적인 번들러는 &lt;strong&gt;webpack&lt;/strong&gt; 이 있다. 그러나 조금 무겁다는 단점이 있어서(프로젝트가 커지면 컴파일 시간이 매우 오래걸림) 이 boilerplate를 가볍게 만들기에는 조금 과한 감이 있어서 &lt;strong&gt;parcel&lt;/strong&gt; 을 사용하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/client-list.PNG&quot; alt=&quot;client-list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진에는 클라이언트 폴더의 자원들을 보여주고 있다. assets, components, js, scss 를 모두 번들링하여 하나의 js와 css로 컴파일하고 옵션에 따라 minify하여 출력한다. 이렇게 나타난 로컬 html,js,css를 이제 서버는 그대로 띄워주고 요청된 정보를 백그라운드에서 제공하는 역할을 해 준다.&lt;/p&gt;

&lt;h3 id=&quot;database&quot;&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/sequelize.png&quot; alt=&quot;sequelize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내가 만든 boilerplate에서는 간단한 user signin 및 signup 기능이 구현되어 있다. 데이터베이스의 설정이 필요한데, 사용한 데이터베이스는 sqlite3 이고, 이를 sql문들을 다닥다닥붙여서 만드는 것이 아니라 ORM 을 사용하여 코드로 데이터베이스를 자동화 하기로 했다.&lt;/p&gt;

&lt;p&gt;선택한 ORM은 &lt;strong&gt;sequelize&lt;/strong&gt; 인데 설정코드를 넣어놓으면 자동으로 DB table을 생성하고 객체로서 테이블을 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 config/db.js 파일의 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lodash&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./config&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;dialect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./test.sqlite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// timezone: 'Asia/Seoul',&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modelPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../app/models/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;associate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;associate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ORM을 사용한 장점은 서버에서 javascript코드로 db를 조작하는 것이 매우 편리하다는 데에 있다. demo boilerplate를 돌려보면 사용자가 직접 관여 할 필요 없이 db가 말씀하게 작동하는 것을 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;jwt-sessionstorage&quot;&gt;&lt;strong&gt;JWT SessionStorage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/jwt.png&quot; alt=&quot;jwt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JWT란 JSON Web Token의 줄임말이다. 기존의 많은 로그인 기능들이 세션(서버)에 물려 있던 것과 다르게, 세션이 없이 로컬PC의 토큰을 기반으로 인증되는 방법이다. facebook,twitter,github,google 등등 최근의 모던 웹서비스에서 매우 많이 사용되고 있고 또 사용법도 간단하다.&lt;/p&gt;

&lt;p&gt;서버 기반 인증의 문제점과 토큰 기반 시스템에 대한 장단점들은 다른 블로그 및 사이트에서 정말 잘 설명을 해 놓아서 따로 설명하지 않겠다.&lt;/p&gt;

&lt;p&gt;JWT에 대한 config 파일은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;jsonwebtoken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./config&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expiresIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;6h&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라우터가 페이지를 라우팅할 때, 헤더의 토큰을 verify하여 인증된 사용자인지 확인하고 로그인된 사용자만이 접근할 수 있는 기능을 구현 할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 SessionStorage를 구현하여 로그인된 사용자가 다시 웹페이지에 접속했을 때 인증된 토큰을 사용할 수 있도록 하였다. 마찬가지로 SessionStorage도 잘 설명된 글이 많으므로 설명은 패스한다.&lt;/p&gt;

&lt;p&gt;아 참 그리고 password는 bcrypt 모듈을 사용해서 암호화 되도록 만들었다. DB에 들어가 있는 값을 보면 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;기타-사용된-기능&quot;&gt;&lt;strong&gt;기타 사용된 기능&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;vuex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/vuex.png&quot; alt=&quot;vuex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;vuejs 개발에 있어서 구현할 수 있는 통합 이벤트 버스 및 상태,변형 관리 시스템. 모든 공유된 데이터와 이벤트를 관리하는 컨트롤러의 역할을 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vuetify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/vuetify.jpg&quot; alt=&quot;vuetify&quot; /&gt;&lt;/p&gt;

&lt;p&gt;css로 직접 버튼 만들고 레이아웃 짜는 것은 사실 이제 조금 비효율적이다. 전부터 사람들은 부트스트랩으로 만들어진 디자인을 가져다 쓰는 방식을 택하기 시작했다.&lt;/p&gt;

&lt;p&gt;vuejs에 특화된 css framework인 vuetify는 이쁘고 실용적인 디자인들을 선보인다. 전체적인 테마와 기능들을 이 boilerplate에 넣어서 만들었다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;&lt;strong&gt;마치며&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;프론트와 백앤드를 분리하고 싶어서 시작했던 프로젝트가 나름 많은 큼직큼직한 오픈소스들의 합작이 되었다. 처음에는 이벤트 버스며 JWT며 어려운 것 투성이였는데, 만들고 나니 뿌듯하다. 이로서 웹 서비스 시대의 흐름을 조금 탔나 하고 보면 아직도 할게 많고 내일 보면 또 새로운 기술이 나와 있겠지..&lt;/p&gt;

&lt;p&gt;남들이 올려놓은 boilerplate만 가져다가 썼는데 내가 만드는 날도 오는구나.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/compile.PNG&quot; alt=&quot;compile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오픈소스를 얼마나 넣었으면 이정도 기능에 js가 1.5MB나 나오는건지..그래도 parcel 컴파일 정말 빠르다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Raspberry Pi Zero Project</title>
   <link href="jgtonys.github.io/iot/2018/02/15/raspberry-pi-zero-project/"/>
   <updated>2018-02-15T00:00:00-06:00</updated>
   <id>jgtonys.github.io/iot/2018/02/15/raspberry-pi-zero-project</id>
   <content type="html">&lt;h2 id=&quot;기본-node-settings&quot;&gt;기본 Node Settings&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;기존 nodejs 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get remove &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; nodejs
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;nodesource에서 nodejs 최신버전 다운로드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_9.x | &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; bash -
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;express-설치&quot;&gt;Express 설치&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; express
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; express-generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;aircrack-설치&quot;&gt;Aircrack 설치&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;apt 업그레이드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;rpi 업데이트&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rpi-update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;라이브러리 설치&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libssl-dev and &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libnl-dev and &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sqlite
wget http://download.aircrack-ng.org/aircrack-ng-1.2-rc4.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; aircrack-ng-1.2-rc4.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;aircrack-ng-1.2-rc4/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Airmon test&lt;/strong&gt;
sudo airmon-ng&lt;/p&gt;

&lt;h2 id=&quot;network-settings&quot;&gt;Network Settings&lt;/h2&gt;

&lt;p&gt;raspberry pi config(locale) window&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;raspi-config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;show network adapters&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;iwconfig&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;scan wifi&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;sudo iwlist wlan0 scan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;wifi setup file location&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;network-wpa_supplicantconf&quot;&gt;Network WPA_SUPPLICANT.conf&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_ssid&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;psk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_pw&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RSN
  &lt;span class=&quot;nv&quot;&gt;key_mgmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WPA_PSK
  &lt;span class=&quot;nv&quot;&gt;pairwise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CCMP
  &lt;span class=&quot;nv&quot;&gt;auth_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OPEN
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;raspberry pi project&lt;/strong&gt;
&lt;a href=&quot;http://&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Map API</title>
   <link href="jgtonys.github.io/web/2018/02/01/google-map-api/"/>
   <updated>2018-02-01T00:00:00-06:00</updated>
   <id>jgtonys.github.io/web/2018/02/01/google-map-api</id>
   <content type="html">&lt;p&gt;Google Map API 사용법 및 Nodejs 와의 연계&lt;/p&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>Tensorflow</title>
   <link href="jgtonys.github.io/python/2018/01/30/google-tensorflow/"/>
   <updated>2018-01-30T00:00:00-06:00</updated>
   <id>jgtonys.github.io/python/2018/01/30/google-tensorflow</id>
   <content type="html">&lt;p&gt;Google Tensorflow의 원리를 파악하고
python을 이용한 실습을 해보자
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;용어&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;-오퍼레이션(Operation)&lt;/p&gt;

&lt;p&gt;그래프 상의 노드는 오퍼레이션(줄임말 op)으로 불립니다. 오퍼레이션은 하나 이상의 텐서를 받을 수 있습니다. 오퍼레이션은 계산을 수행하고, 결과를 하나 이상의 텐서로 반환할 수 있습니다.&lt;/p&gt;

&lt;p&gt;-텐서(Tensor)&lt;/p&gt;

&lt;p&gt;내부적으로 모든 데이터는 텐서를 통해 표현됩니다. 텐서는 일종의 다차원 배열인데, 그래프 내의 오퍼레이션 간에는 텐서만이 전달됩니다. (Caffe의 Blob과 유사합니다.)&lt;/p&gt;

&lt;p&gt;-세션(Session)&lt;/p&gt;

&lt;p&gt;그래프를 실행하기 위해서는 세션 객체가 필요합니다. 세션은 오퍼레이션의 실행 환경을 캡슐화한 것입니다.&lt;/p&gt;

&lt;p&gt;-변수(Variables)&lt;/p&gt;

&lt;p&gt;변수는 그래프의 실행시, 패러미터를 저장하고 갱신하는데 사용됩니다. 메모리 상에서 텐서를 저장하는 버퍼 역할을 합니다.&lt;/p&gt;

&lt;p&gt;Tensorflow 프로그램은 computational graph 이다. 일련의 Tensorflow Operation을 노드들의 그래프로 구조화(시각화)한 것이다. 노드는 텐서를 입력으로 받아서 텐서를 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;노드의 종류&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;constant 노드 : 변하지 않는 상수를 저장하는 노드이다.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Const:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Const_1:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#노드가 실제 값을 가지려면 일련의 오퍼레이션을 노드들의 그래프로 구조화하여야 한다. 구조화(평가)하려면 세션(session)을 생성해 주면 된다.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;operation 노드 : 노드들의 연산이 저장되는 노드이다.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node3: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'node3: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Add:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sess.run(node3): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sess.run(node3): '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;placeholder 노드 : 외부에서 입력 받을 수 있는 값을 저장하는 노드
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adder_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# + provides a shortcut for tf.add(a, b)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Placeholder:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Placeholder_1:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adder_node&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'add:0'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adder_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;7.5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adder_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;7.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;실습&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;선형 방정식 W*x + b 의 computational graph 를 만들어 보자.&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;x는 입력되어야 하는 변수이므로 placeholder 노드를 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;가중치 W와 바이어스 b는 placeholder와는 달리, 입력 텐서와 출력텐서가 다르다. 훈련을 통해 파라미터(가중치, 바이어스)는 학습해야 하며, 이 경우 Variable을 이용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수는 초기화해서 사용해야 하며, tf.global_variables_initializer()를 이용한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;초기화된 변수 W와 b의 출력은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.30000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.30000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 입력 x = [1,2,3,4]를 이용하여 선형 방정식을 평가해 보자.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;          &lt;span class=&quot;mf&quot;&gt;0.30000001&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;0.60000002&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;0.90000004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
**&lt;모델의 정확도=&quot;&quot; 판별=&quot;&quot;&gt;**&lt;/모델의&gt;&lt;/p&gt;

&lt;p&gt;모델의 예측값과 실제 결과값 사이의 차이를 평가한다. 이때 여기에서는 squared error 함수를 손실 함수로 사용하여 실습하겠다.&lt;/p&gt;

&lt;p&gt;실제 결과값 y&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;손실함수(squared error) : 실제 결과값과 예측값의 차이를 제곱하여 모든 테스트마다 더한다. (Y1-y1)^2 + (Y2-y2)^2 + …&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squared_deltas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squared_deltas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 y=[0, -1, -2, -3] 값을 이용하여 손실을 평가한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;23.66&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loss 계산은 다음과 같다.
(0. ? 0.)^2 + (0.3 ? (-1))^2 + (0.6 ? (-2))^2 + (0.9 ? (-3))^2
= 0 + 1.69 + 6.76 + 15.2
= 23.66&lt;/p&gt;

&lt;p&gt;실제 모델의 학습하려는 값은 W=1, b=-1 이다.
이를 넣어서 계산하여 보면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;손실은 0이 된다. 즉 정확한 예측이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&amp;lt;학습(tf.train API)&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;실제 예측값으로 수렴하기 위해 프로그램을 계속 학습시켜야 한다.&lt;/p&gt;

&lt;p&gt;W와 b가 진짜 값인 -1,1에 수렴하도록 학습시키는 것이다.&lt;/p&gt;

&lt;p&gt;최적화 함수로 gradient descent를 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 파라미터를 다시 랜덤값으로 초기화한 후, 반복 훈련시킨다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;학습된 파라미터를 출력해 본다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9999969&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99999082&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;W와 b가 각각 -1과 1에 근접했음을 확인할 수 있다. 현재까지 훈련된 파라미터와 손실을 출력해 보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_loss&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;W: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s b: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s loss: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr_W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9999969&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99999082&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.69997e-11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;W와 b의 값이 거의 -1과 1로 수렴하는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&amp;lt;고수준 학습(tf.contrib.learn)&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;텐서플로우에서 제공하는 tf.contrib.learn을 이용하여 앞의 예제를 다시 만들어 보겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# x를 1차원으로 정의한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_valued_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# 훈련모델을 정의하는데, 여기서 훈련 모델은 linear regressor 를 사용한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinearRegressor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# 훈련 데이터셋과 배치사이즈, 에폭스를 정의한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy_input_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_epochs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# 모델을 1000번 반복학습시킨다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;# 훈련된 모델을 평가한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>NodeJs</title>
   <link href="jgtonys.github.io/web/2018/01/29/nodejs/"/>
   <updated>2018-01-29T00:00:00-06:00</updated>
   <id>jgtonys.github.io/web/2018/01/29/nodejs</id>
   <content type="html">&lt;p&gt;NodeJS 포스팅 예정.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Express를 제외한 Nodejs&lt;/li&gt;
  &lt;li&gt;Express를 넣은 Nodejs&lt;/li&gt;
  &lt;li&gt;프로젝트별 Nodejs&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>Eduple Military Rooting Project</title>
   <link href="jgtonys.github.io/tips/2017/12/09/eduple-rooting/"/>
   <updated>2017-12-09T00:00:00-06:00</updated>
   <id>jgtonys.github.io/tips/2017/12/09/eduple-rooting</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 Reverse Tethering 가능&lt;br /&gt;
Xposed installer 및 xposed framework 설치 완료(루팅필요)&lt;br /&gt;
hack connectivity 설치 완료(루팅필요)&lt;br /&gt;
Global rooting application 을 사용한 루팅 불가능 확인&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Manual rooting&lt;/code&gt; 필요&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;ADB를 사용한 Eduple 제어&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;What is adb?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android 디버그 브리지(adb)는 에뮬레이터 인스턴스나 연결된 Android 기기와 통신할 수 있는 다목적 명령줄 도구입니다.&lt;br /&gt;
이 도구는 앱 설치 및 디버깅과 같은 다양한 기기 작업을 쉽게 해주고, 에뮬레이터나 연결된 기기에서 다양한 명령을 실행하는 데 사용할 수 있는 Unix 셸 액세스를 제공합니다.&lt;br /&gt; 
이 도구는 클라이언트, 데몬, 서버로 구성되어 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;adb 작동방식 &lt;a href=&quot;https://developer.android.com/studio/command-line/adb.html?hl=ko#howadbworks&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;adb 실행법&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기본적으로 AppData\Local\Android\sdk\platform-tool 에 있는 adb.exe로 실행한다.&lt;br /&gt;
cmd 터미널을 열고 adb를 입력하였을 때 여러가지 옵션들이 등장한다면 성공적으로 실행한 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adb 명렁어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adb devices&lt;/code&gt; : adb가 현제 연결되어 있는 adv를 보여준다. 만약 아무것도 나타나지 않는다면 해당 장비의 개발자 옵션에서 usb debugging 을 설정하여야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb reboot&lt;/code&gt; : reboot 한다&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; : shell 에 들어간다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb install c:\test.apk&lt;/code&gt; : apk를 설치한다. -r 옵션은 재설치, -s 옵션은 메모리카드에 설치한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell am force-stop [packagename]&lt;/code&gt; : 패키지명을 이용하여 구동중인 안드로이드 어플리케이션을 강제종료한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb uninstall packagename&lt;/code&gt; : 패키지명을 사용하여 안드로이드 앱을 삭제한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell pm list packages -f&lt;/code&gt; : 설치된 모든 앱의 패키지명을 가져온다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;wm size 가로x세로&lt;/code&gt; : 화면 해상도를 변경한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;wm density 값&lt;/code&gt; : 값으로 density를 변경한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;wm size|density reset&lt;/code&gt; : 해상도|density 를 리셋한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EdupleD Military Spec&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CPU : sun50iw1p1&lt;/p&gt;

&lt;p&gt;CPU_brand : linux-sunxi&lt;/p&gt;

&lt;p&gt;sunxi(arm cores) : sun50i (cortex-a53 smp)&lt;/p&gt;

&lt;p&gt;sunxiwx (soc id) : sun50iw1 (0x1689)&lt;/p&gt;

&lt;p&gt;soc name : A64&lt;/p&gt;

&lt;p&gt;cores : 4xCortex-A53&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Python Excel 다루기</title>
   <link href="jgtonys.github.io/python/2017/11/30/python-xlrd/"/>
   <updated>2017-11-30T00:00:00-06:00</updated>
   <id>jgtonys.github.io/python/2017/11/30/python-xlrd</id>
   <content type="html">&lt;p&gt;업무를 하게되면 가장 많이 다루게 되는 Excel.&lt;br /&gt;
수 없이 많은 셀작업들을 하다 보면 프로그래밍으로 쉽게 쉽게 정보를 얻고, 수정하고 싶어진다.&lt;br /&gt;
Python module xlrd를 사용하여 Excel을 다루는 방법을 소개한다.&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;xlrd 설치법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;python 3.5 기준으로&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlrd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;설치가 완료된다.&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;xlrd 사용하기&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Excel 파일 불러오기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xlrd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlrd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_workbook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;파일.xlsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_demand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding_override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cp949'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;시트이름&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;특정 cell 또는 row,col 얻기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 1,1의 내용을 가져온다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 전체 col의 개수를 리턴한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 전체 row의 개수를 리턴한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 특정 row의 값들을 리턴한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 특정 col의 값들을 리턴한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;만약 읽어온 Excel 파일 안의 내용이 날짜형식이라면??&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;엑셀은 자동으로 날짜 형식을 구현해 주기 때문에, 값을 python으로 읽어오게 되면 이상한 숫자가 불려와진다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlrd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_workbook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;파일.xlsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_demand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding_override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cp949'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;시트이름&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlrd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xldate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xldate_as_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datemode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이로써 변환이 가능하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이제 Excel 파일을 쉽고 빠르게 읽어오자!&lt;/p&gt;

&lt;p&gt;#Excel 쓰기 Python 모듈 포스팅 예정#&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Git Flow</title>
   <link href="jgtonys.github.io/tips/2017/11/28/git-flow-using/"/>
   <updated>2017-11-28T00:00:00-06:00</updated>
   <id>jgtonys.github.io/tips/2017/11/28/git-flow-using</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;git flow 사용기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;음 매우 좋다.&lt;br /&gt;
일단 알아서 develop branch 가 생성되고, 특징적인 기술을 추가로 개발할때는 feature branch가 생성된다.&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;또 release 할때는 알아서 release branch 가 버전 태그를 달며 생성되며 끝나면 master에 병합되고 다시 develop branch 로 이동한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;설치법&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; git://github.com/nvie/gitflow.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러면 이제 git flow 를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;주의할 점&lt;/strong&gt;
–recursive 옵션을 달아주지 않으면&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Error:  No such file or directory @ rb_sysopen - /home/ubuntu/workspace/gitflow/gitflow-shFlags&lt;/code&gt;&lt;br /&gt;
이런 에러가 뜬다. 주의하자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;시작하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git flow를 사용하려면 다음과 같이 시작한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러면 사용할 브랜치를 고르라고 나타나는데, 기본적으로 master 와 branch 는 주어진다.&lt;br /&gt;
git flow를 이용하여 만들 수 있는 branch는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;master : 최종 릴리즈한 안정화 버전&lt;/li&gt;
  &lt;li&gt;develop : 다음 릴리즈를 위해 개발중인 최신 버전&lt;/li&gt;
  &lt;li&gt;feature : 특정 기능 개발을 위한 branch&lt;/li&gt;
  &lt;li&gt;release : 릴리즈 점검을 위한 branch&lt;/li&gt;
  &lt;li&gt;hotfix : 긴급 버그 픽스를 위한 branch&lt;/li&gt;
  &lt;li&gt;support : 버전 호환성 문제 처리를 위한 branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
기본적으로 develop branch에서 개발하고, master로 realease하는 방식이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;특정한 기능을 추가하여 개발하고 싶다면 feature를 이용한다.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow feature start &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;feature branch가 만들어지고 수정된 사항을 stage하여 commit 한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stage
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기능 개발이 완료 된 후에는 git flow에 개발이 끝났다고 알려주고, 다시 develop branch로 돌아가야 한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow feature finish  &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 과정이 이루어진다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;git flow는 develop branch로 checkout 한 후,&lt;/li&gt;
  &lt;li&gt;feature branch의 변경 내용을 자동으로 develop branch에 merge하고,&lt;/li&gt;
  &lt;li&gt;작업이 끝난 feature branch를 삭제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
develop에서 개발이 완료되고 master로 병합하는 release를 하는 방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow release start &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;release 작업을 위한 branch가 생겼다.  release branch는 보통 릴리즈 점검을 위해 간단한 버그를 수정하는 등의 작업을 목적으로 사용한다.
절대 release branch에서는 기능을 개발하거나, 기존과 다른 개발을 진행하지 않는다.(단순 확인만 하는 branch)
release를 위한 점검이 끝났으면 간단하게 realease를 finish 해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow release finish &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 작업이 이루어진다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;release 브랜치의 코드를 master branch에 merge&lt;/li&gt;
  &lt;li&gt;release의 이름으로 태그 등록&lt;/li&gt;
  &lt;li&gt;릴리즈를 develop branch로 재병합(back-merge)&lt;/li&gt;
  &lt;li&gt;release branch를 삭제&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;마치며&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git flow를 사용하면 복잡한 git의 흐름을 잘 이해할 수 있었다.
작은 프로젝트를 할 때에는 사실 이와 같은 branch 관리가 필요할까 라는 생각도 들지만, 미리미리 연습해 두는 것도 큰 프로젝트의 commit 관리에 도움이 될 것이라고 생각하여 시도해 보았다.&lt;br /&gt;
실제로 사용해 보니 그렇게 어렵지는 않았고, 추후에 협업하여 프로젝트를 할 때에도 많은 도움이 될 것 같다.&lt;br /&gt;
굳.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How to run jekyll using c9??</title>
   <link href="jgtonys.github.io/tips/2017/11/24/how-to-run-server-c9/"/>
   <updated>2017-11-24T00:00:00-06:00</updated>
   <id>jgtonys.github.io/tips/2017/11/24/how-to-run-server-c9</id>
   <content type="html">
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--watch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- more --&gt;

&lt;p&gt;When your new post is not availalbe in your server, you should check some things.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The post is not placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;The post has incorrect title. Posts should be named &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt; (Note the extension too.)&lt;/li&gt;
  &lt;li&gt;The post’s date is in the future. You can make the post visible by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;future: true&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; (documentation)&lt;/li&gt;
  &lt;li&gt;The post has &lt;code class=&quot;highlighter-rouge&quot;&gt;published: false&lt;/code&gt; in its front matter. Set it to true.&lt;/li&gt;
  &lt;li&gt;The title contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; character. Replace it with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#58&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;these tips are originally found in &lt;a href=&quot;https://stackoverflow.com/questions/30625044/jekyll-post-not-generated&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>무료 이미지 사용하기</title>
   <link href="jgtonys.github.io/tips/2017/11/23/free-image-sites/"/>
   <updated>2017-11-23T00:00:00-06:00</updated>
   <id>jgtonys.github.io/tips/2017/11/23/free-image-sites</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;저작권에 걸리지 않는 무료 이미지 사이트들&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://unsplash.com&lt;/li&gt;
  &lt;li&gt;https://pixabay.com&lt;/li&gt;
  &lt;li&gt;https://www.picjumbo.com&lt;/li&gt;
  &lt;li&gt;https://www.gratisography.com&lt;/li&gt;
  &lt;li&gt;https://www.splitshire.com&lt;/li&gt;
  &lt;li&gt;https://www.designerspics.com&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>django 시작하기</title>
   <link href="jgtonys.github.io/python/2017/11/22/starting-django/"/>
   <updated>2017-11-22T00:00:00-06:00</updated>
   <id>jgtonys.github.io/python/2017/11/22/starting-django</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What is Django??&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Django&lt;/code&gt; 는 파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크입니다. 개발자에게 회원가입, 로그인 폼, 인증 및 DB관리를 쉽게 제공하여 편리하게 웹사이트를 개발할 수 있도록 도와주는 프레임워크입니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;Then What is Web Framwork??&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
웹 프레임워크는 동적인 웹 페이지나, 웹 애플리케이션, 웹 서비스 개발 보조용으로 만들어지는 애플리케이션 프레임워크의 일종입니다. 데이터베이스 연동, 템플릿 형태의 표준, 세션 관리, 코드 재사용 등의 기능을 포함하여 개발의 편리성을 증진시키기 위하여 사용된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;python django 를 사용하여 로컬 웹서버를 띄우는 방법&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
먼저 python django 를 설치한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;django~&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.11.0
Collecting django~&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.11.0
  Downloading Django-1.11.3-py2.py3-none-any.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6.8MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Installing collected packages: django
Successfully installed django-1.11.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
django 가 잘 설치되었다면, python - lib - site-packages - django - bin - django-admin.py 가 존재한다.&lt;br /&gt;
어느 경로에서나 이 django-admin.py 를 사용하기 위해 환경변수(path)에 등록한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;django-admin startproject myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Selenium Crawling</title>
   <link href="jgtonys.github.io/python/2017/11/22/selenium-crawling/"/>
   <updated>2017-11-22T00:00:00-06:00</updated>
   <id>jgtonys.github.io/python/2017/11/22/selenium-crawling</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Selenium 을 사용한 웹 크롤러(python)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;동적으로 생성되지 않는 웹 페이지는 python 기본 라이브러리를 사용하서 쉽게 소스코드를 긁어올 수 있다.&lt;br /&gt;
그런데 문제는 Javascript로 동적 생성되는 페이지 안의 일부 내용 또는 iframe으로 불러오는 새로운 페이지들은 이러한 방법으로 긁어올 수가 없다!&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어떻게 하면 우리가 웹페이지를 직접 들어가서 보는 그대로의 내용을 크롤링할 수 있을까?&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;Selenium 이란&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium&lt;/code&gt; 은 웹 테스트 프레임워크로서 브라우저를 직접 동작시켜서 동적으로 생성된 결과물에 접근이 가능하다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Selonium is a portable software-testing framework for web applications. Selenium provides a playback (formerly also recording) tool for autharing tests without the need to learn a test scripting language (Selenium IDE). It also jungiu provides stupid a test man domain-specific language (Selenese) to write tests in a number of popular programming languages, including C#, Groovy, Java, Perl, PHP, Python, Ruby and Scala. The tests can then run against most modern web browsers. Selenium deploys on Windows, Linux, and OS X platforms. It is open-source software, released under the Apache 2.0 license: web developers can download and use it without charge.
https://en.wikipedia.org/wiki/Selenium_(software)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium&lt;/code&gt;을 사용해서 가상 웹 페이지를 띄우고, 그 페이지에서 보는 그대로의 내용을 크롤링하는 python 프로그램을 만들어 볼 것이다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selanium 설치&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;본 포스팅은 파이썬 3.5 기준입니다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;selenium
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip uninstall selenium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;
Selenium을 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Webdriver&lt;/code&gt; 를 통해 브라우저를 제어하게 된다.&lt;br /&gt;
본 포스팅에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhantomJS Webdriver&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Chrome Webdriver&lt;/code&gt;를 사용해 보려고한다&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is PhantomJS??&lt;/strong&gt;
&lt;br /&gt;
그래픽 유저 인터페이스(GUI)가 없는 Headless brower로서 커맨드 라인 인터페이스(CLI)를 통해 실행하고 제어할 수 있다.&lt;br /&gt;
웹페이지 개발자 테스트 또는 화면 캡쳐용으로 많이 쓰이고 있다.&lt;br /&gt;
본래 JAVA API로서 많이 사용되었고, python에서도 사용할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Chrome 은 너무 유명하니 생략하겠다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install Webdriver&lt;/strong&gt;
&lt;br /&gt;
PhantomJS는 &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;http://phantomjs.org/download.html&lt;/a&gt;에서 다운받을 수 있고, Chrome 드라이버는 &lt;a href=&quot;https://sites.google.com/a/chromium.org/chromedriver/downloads&quot;&gt;https://sites.google.com/a/chromium.org/chromedriver/downloads&lt;/a&gt;에서 다운로드 받을 수 있다.&lt;br /&gt;
다운로드 받은 파일을 압축을 풀면 드라이버 파일이 나타나는데, 그 저장된 경로를 기억해 두자.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium-PhantomJS-Crawler 만들기&lt;/strong&gt;
&lt;br /&gt;
먼저 PhantomJS driver를 사용하여 만들어 보겠다.&lt;br /&gt;&lt;br /&gt;
기본적인 순서는 이렇게 진행한다.&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Webdriver import&lt;/li&gt;
  &lt;li&gt;브라우저를 제어하는 PhantomJS driver 만들기&lt;/li&gt;
  &lt;li&gt;URL에 해당하는 페이지 소스 가져오기&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Webdriver import &amp;amp; Driver setting&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# phantomjs가 설치되어있지 않은 경우(드라이버 파일 다운로드인 경우)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'다운로드받은위치/phantomjs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# phantomjs가 설치되어있는 경우
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Q. 만약 PhantomJS가 정상적으로 설치되었음에도 불구하고 SSL ERROR가 나타난다면?&lt;/p&gt;

&lt;p&gt;A. &lt;code class=&quot;highlighter-rouge&quot;&gt;driver = webdriver.PhantomJS(service_args=['--ignore-ssl-errors=true', '--ssl-protocol=any'])&lt;/code&gt;
를 사용하자. SSL ERROR를 무시하는 옵션이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이제 driver setting이 완료되었다.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Crawling start&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래의 코드를 추가해준다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'동적으로 생성되는 페이지 URL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;또한 긁어온 html을 paring 해 주기 위해 beautiful soup를 사용하겠다.&lt;br /&gt;
beautifulsoup4 를 설치하고 import 해준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'동적으로 생성되는 페이지 URL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_page&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lxml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#parser는 html.parser를 사용해도 된다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;soup&lt;/code&gt;에는 긁어온 &lt;code class=&quot;highlighter-rouge&quot;&gt;전체 html&lt;/code&gt;이 paring되어 존재한다.&lt;br /&gt;
하지만 우리는 전체 html을 원하기 보다, 주로 &lt;code class=&quot;highlighter-rouge&quot;&gt;일부 정보를 빠르게 얻기 위해&lt;/code&gt; crawling을 사용한다.&lt;br /&gt;
물론 다른 프로그램을 하나 더 만들어서 한줄씩 읽어가며 정보를 추려낼 수도 있겠지만, 여기서는 애초에 &lt;code class=&quot;highlighter-rouge&quot;&gt;driver에게 긁어올 대상들을 지정&lt;/code&gt;하는 방법을 소개하겠다.&lt;/p&gt;

&lt;p&gt;페이지의 단일 element에 접근하는 api&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;find_element_by_name(‘HTML_name’)&lt;br /&gt;
find_element_by_id(‘HTML_id’)&lt;br /&gt;
find_element_by_xpath(‘/html/body/some/xpath’)&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;페이지의 여러 elements에 접근하는 api&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;find_element_by_css_selector(‘#css &amp;gt; div.selector’)&lt;br /&gt;
find_element_by_class_name(‘some_class_name’)&lt;br /&gt;
find_element_by_tag_name(‘h1’)&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 driver 자체가 접근하여 element를 가져오면 아래와 같은 기능들을 수행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#검색창에 키워드 입력
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'검색창 id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'키워드'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#검색 버튼에 접근
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_button_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;검색 버튼의 css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#검색 버튼 클릭
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_button_element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#a 태그의 href 속성 가져오기
#다른 태그의 다른 속성도 이와 마찬가지로 가져올 수 있다
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;iframe 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;동적으로 생성되는 페이지들은 iframe으로 구성되어 있는 경우가 많다.&lt;br /&gt;
이때 우리의 selenium-phantomjs-crawler는 iframe으로 들어가서 임무를 수행할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#iframe의 id를 가지고 driver가 찾아낸 iframe element를 저장한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iframe_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iframe#id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#iframe element로 driver가 진입한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch_to_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iframe_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#default content로 돌아온다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch_to_default_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;중고나라 크롤링 프로그램 완성&lt;/strong&gt;
&lt;a href=&quot;https://github.com/jgtonys/selenium_crawling_phantomjs&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Markdown 예시</title>
   <link href="jgtonys.github.io/tips/2017/11/22/markdown-prac/"/>
   <updated>2017-11-22T00:00:00-06:00</updated>
   <id>jgtonys.github.io/tips/2017/11/22/markdown-prac</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Markdown 문법을 사용해보자&lt;/strong&gt;
&lt;br /&gt;
사용해보면 매우 편리하다.&lt;br /&gt;
일일이 html 태그넣어줘서 만들어 냈던 내 옛 웹 페이지들이 너무 불쌍할 정도로 간결하고 심플하고 큐트하게 웹 페이지를 만들어 낼 수 있다.&lt;br /&gt;
그 Markdown 문법을 소개한다.&lt;br /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글은 아래의 주소에서 참조하였습니다.
https://gist.github.com/godori/40bb4e48e0b1565bf1a3c2a6e229a1cc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#마크다운 연습&lt;/p&gt;

&lt;h4 id=&quot;1-마크다운-연습을-시작해봅시다&quot;&gt;1. 마크다운 연습을 시작해봅시다!&lt;/h4&gt;

&lt;h4 id=&quot;이건-강조하는-거예요&quot;&gt;이건 강조하는 거예요&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;이렇게&lt;/strong&gt; 혹은 &lt;strong&gt;이런식으로&lt;/strong&gt; 쓰는 건 … Cmd + B&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이 글씨는&lt;/em&gt; 살짝 &lt;em&gt;기울어졌어요&lt;/em&gt; … &lt;em&gt;입닥쳐&lt;/em&gt; 말포이&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;강조를 하면서 &lt;em&gt;이탤릭체&lt;/em&gt; 로 쓸수도 있어요&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-인용을-해-봅시다&quot;&gt;2. 인용을 해 봅시다&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;꺽쇠 하나만 넣으면 인용 따옴표가 뜬답니다.&lt;/p&gt;

  &lt;p&gt;진짜 꺽쇠는 &amp;gt; 이렇게 써요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-링크와-이메일을-넣어-봐요&quot;&gt;3. 링크와 이메일을 넣어 봐요&lt;/h4&gt;

&lt;p&gt;저의 이메일 링크는 &lt;a href=&quot;mailto:gej.okpo@gmail.com&quot;&gt;gej.okpo@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다른 인라인 링크는 이렇게 &lt;a href=&quot;http://www.godori.org&quot;&gt;http://www.godori.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;링크의 텍스트를 바꿀 수도 있습니다 &lt;a href=&quot;http://www.godori.org&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;캡션을 띄울 수도 있어요 &lt;a href=&quot;http://www.godori.org&quot; title=&quot;설명이 뜨죠&quot;&gt;커서를 대보세요&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-이미지&quot;&gt;4. 이미지&lt;/h4&gt;
&lt;p&gt;인라인 이미지는 이렇게 넣습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CjpY78aVEAACwC6.jpg&quot; alt=&quot;Smaller icon&quot; /&gt;  { 안녕! 난 화이트야 )&lt;/p&gt;

</content>
 </entry>
 

</feed>
